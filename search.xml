<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM框架之动态代理</title>
      <link href="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/"/>
      <url>/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<p>今天看到几篇文章，记录动态代理，觉得挺有价值的，因而记下，这里先感谢<a href="https://www.pdai.tech/%E8%AF%A5%E7%BD%91%E7%AB%99%E7%9A%84%E4%BD%9C%E8%80%85">https://www.pdai.tech/该网站的作者</a></p><h1 id="一、动态代理"><a href="#一、动态代理" class="headerlink" title="一、动态代理"></a>一、动态代理</h1><h2 id="1、什么是代理？"><a href="#1、什么是代理？" class="headerlink" title="1、什么是代理？"></a>1、什么是代理？</h2><p><strong>代理模式</strong>(Proxy pattern): 为另一个对象提供一个替身或占位符以控制对这个对象的访问</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/a6c20f60-5eba-427d-9413-352ada4b40fe-16608285684821.png"></p><p>举个简单的例子：</p><p>我(client)如果要买(doOperation)房，可以找中介(proxy)买房，中介直接和卖方(target)买房。中介和卖方都实现买卖(doOperation)的操作。中介就是代理(proxy)。</p><h2 id="2、什么是动态代理？"><a href="#2、什么是动态代理？" class="headerlink" title="2、什么是动态代理？"></a>2、什么是动态代理？</h2><p><strong>动态代理</strong>就是，在程序运行期，创建目标对象的代理对象，并对目标对象中的方法进行功能性增强的<strong>一种技术</strong>。</p><p>在生成代理对象的过程中，目标对象不变，代理对象中的方法是目标对象方法的增强方法。可以理解为运行期间，对象中方法的动态拦截，在拦截方法的前后执行功能操作。</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/spring-springframework-aop-61-16608286409964.png"></p><h2 id="3、分类"><a href="#3、分类" class="headerlink" title="3、分类"></a>3、分类</h2><p>现在SSM框架中主要有两种动态代理</p><ul><li>Cglib代理</li><li>JDK代理</li></ul><p>下面会一一介绍</p><h1 id="二、Cglib代理"><a href="#二、Cglib代理" class="headerlink" title="二、Cglib代理"></a>二、Cglib代理</h1><h2 id="1、什么是Cglib？"><a href="#1、什么是Cglib？" class="headerlink" title="1、什么是Cglib？"></a>1、什么是Cglib？</h2><p>Cglib是一个强大的、高性能的代码生成包，它广泛被许多AOP框架使用，为他们提供方法的拦截。</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/spring-springframework-aop-62-16608287695517.png"></p><ul><li>最底层是字节码)</li><li>ASM是操作字节码的工具</li><li>cglib基于ASM字节码工具操作字节码（即动态生成代理，对方法进行增强）</li><li>SpringAOP基于cglib进行封装，实现cglib方式的动态代理</li></ul><h2 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h2><p>下面简单写一个使用cglib的例子</p><h3 id="①-依赖引入"><a href="#①-依赖引入" class="headerlink" title="① 依赖引入"></a>① 依赖引入</h3><p>引入cglib依赖包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tech-pdai-spring-demos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tech.pdai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>007-spring-framework-demo-aop-proxy-cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②-定义实体类"><a href="#②-定义实体类" class="headerlink" title="② 定义实体类"></a>② 定义实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author chen */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③-写被代理的类"><a href="#③-写被代理的类" class="headerlink" title="③ 写被代理的类"></a>③ 写被代理的类</h3><p>即目标类，对被代理的类中的方法进行增强</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token comment">/** * @author chen */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do something</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④-cglib代理"><a href="#④-cglib代理" class="headerlink" title="④ cglib代理"></a>④ cglib代理</h3><p>cglib代理类，需要实现MethodInterceptor接口，并指定代理目标类target</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 业务类对象，供代理方法中进行真正的业务方法调用     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getUserLogProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//给业务对象赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment">//创建加强器，用来创建动态代理类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//为加强器指定要代理的业务类（即：为下面生成的代理类指定父类）</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置回调：对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实现intercept()方法进行拦</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建动态代理类对象并返回</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 实现回调方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// log - before method</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[before] execute method: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// call method</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// log - after method</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[after] execute method: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", return value: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑤-使用代理"><a href="#⑤-使用代理" class="headerlink" title="⑤ 使用代理"></a>⑤ 使用代理</h3><p>启动类中指定代理目标并执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// proxy</span>        <span class="token class-name">UserServiceImpl</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">UserLogProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserLogProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// call methods</span>        userService<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑥-简单测试"><a href="#⑥-简单测试" class="headerlink" title="⑥ 简单测试"></a>⑥ 简单测试</h3><p>启动上述类main 函数，执行的结果如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[before] execute method: findUserList[after] execute method: findUserList, return value: [User&#123;name&#x3D;&#39;chen&#39;, age&#x3D;18&#125;][before] execute method: addUser[after] execute method: addUser, return value: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、cglib代理的流程"><a href="#3、cglib代理的流程" class="headerlink" title="3、cglib代理的流程"></a>3、cglib代理的流程</h2><p>把上述Demo的主要流程画出来</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/spring-springframework-aop-63-166082931786510.png"></p><p><strong>更多细节：</strong></p><ul><li>在上图中，可以通过在Enhancer中配置更多的参数来控制代理的行为，比如如果只希望增强这个类中的一个方法（而不是所有方法），那就增加callbackFilter来对目标类中方法进行过滤；Enhancer可以有更多的参数类配置其行为，不过学习上述主要的流程就够了。</li><li>final方法为什么不能被代理？很显然final方法没法被子类覆盖，当然不能代理了。</li><li>Mockito为什么不能mock静态方法？因为mockito也是基于cglib动态代理来实现的，static方法也不能被子类覆盖，所以显然不能mock。但PowerMock可以mock静态方法，因为它直接在bytecode上工作</li></ul><h2 id="4、SpringAOP中Cglib代理的实现"><a href="#4、SpringAOP中Cglib代理的实现" class="headerlink" title="4、SpringAOP中Cglib代理的实现"></a>4、SpringAOP中Cglib代理的实现</h2><p><strong>SpringAOP封装了cglib，通过其进行动态代理的创建。</strong></p><p>看下CglibAopProxy的getProxy方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating CGLIB proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> rootClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>rootClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Target class must be available for creating a CGLIB proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 上面流程图中的目标类</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span>CGLIB_CLASS_SEPARATOR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> additionalInterfaces <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> additionalInterface <span class="token operator">:</span> additionalInterfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>additionalInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Validate the class, writing log messages as necessary.</span>    <span class="token function">validateClassIfNecessary</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重点看这里，就是上图的enhancer，设置各种参数来构建</span>    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token function">createEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartClassLoader</span><span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isClassReloadable</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span><span class="token class-name">SpringNamingPolicy</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassLoaderAwareGeneratorStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置callback回调接口，即方法的增强点</span>    <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks <span class="token operator">=</span> <span class="token function">getCallbacks</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      types<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 上节说到的filter</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProxyCallbackFilter</span><span class="token punctuation">(</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getConfigurationOnlyCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重点：创建proxy和其实例</span>    <span class="token keyword">return</span> <span class="token function">createProxyClassAndInstance</span><span class="token punctuation">(</span>enhancer<span class="token punctuation">,</span> callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CodeGenerationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Could not generate CGLIB subclass of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">": Common causes of this problem include using a final class or a non-visible class"</span><span class="token punctuation">,</span>        ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TargetSource.getTarget() failed</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Unexpected AOP exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取callback的方法如下，提几个理解的要点吧，在学习的时候建议把例子跑一下，然后打一个断点进行理解。</p><ul><li><code>rootClass</code>: 即目标代理类</li><li><code>advised</code>: 包含上文中获取到的advisor增强器的集合</li><li><code>exposeProxy</code>: 在xml配置文件中配置的，背景就是如果在事务A中使用了代理，事务A调用了目标类的的方法a，在方法a中又调用目标类的方法b，方法a，b同时都是要被增强的方法，如果不配置exposeProxy属性，方法b的增强将会失效，如果配置exposeProxy，方法b在方法a的执行中也会被增强了</li><li><code>DynamicAdvisedInterceptor</code>: 拦截器将advised(包含上文中我们获取到的advisor增强器)构建配置的AOP的callback（第一个callback)</li><li><code>targetInterceptor</code>: xml配置的optimize属性使用的（第二个callback)</li><li>最后连同其它5个默认的Interceptor 返回作为cglib的拦截器链，之后通过CallbackFilter的accpet方法返回的索引从这个集合中返回对应的拦截增强器执行增强操作。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCallbacks</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> rootClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Parameters used for optimization choices...</span>  <span class="token keyword">boolean</span> exposeProxy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">isExposeProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> isFrozen <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> isStatic <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Choose an "aop" interceptor (used for AOP calls).</span>  <span class="token class-name">Callback</span> aopInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicAdvisedInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Choose a "straight to target" interceptor. (used for calls that are</span>  <span class="token comment">// unadvised but can return this). May be required to expose the proxy.</span>  <span class="token class-name">Callback</span> targetInterceptor<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    targetInterceptor <span class="token operator">=</span> <span class="token punctuation">(</span>isStatic <span class="token operator">?</span>        <span class="token keyword">new</span> <span class="token class-name">StaticUnadvisedExposedInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token keyword">new</span> <span class="token class-name">DynamicUnadvisedExposedInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    targetInterceptor <span class="token operator">=</span> <span class="token punctuation">(</span>isStatic <span class="token operator">?</span>        <span class="token keyword">new</span> <span class="token class-name">StaticUnadvisedInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token keyword">new</span> <span class="token class-name">DynamicUnadvisedInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Choose a "direct to target" dispatcher (used for</span>  <span class="token comment">// unadvised calls to static targets that cannot return this).</span>  <span class="token class-name">Callback</span> targetDispatcher <span class="token operator">=</span> <span class="token punctuation">(</span>isStatic <span class="token operator">?</span>      <span class="token keyword">new</span> <span class="token class-name">StaticDispatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SerializableNoOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mainCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>      aopInterceptor<span class="token punctuation">,</span>  <span class="token comment">// </span>      targetInterceptor<span class="token punctuation">,</span>  <span class="token comment">// invoke target without considering advice, if optimized</span>      <span class="token keyword">new</span> <span class="token class-name">SerializableNoOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// no override for methods mapped to this</span>      targetDispatcher<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisedDispatcher<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">EqualsInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">HashCodeInterceptor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks<span class="token punctuation">;</span>  <span class="token comment">// If the target is a static one and the advice chain is frozen,</span>  <span class="token comment">// then we can make some optimizations by sending the AOP calls</span>  <span class="token comment">// direct to the target using the fixed chain for that method.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isStatic <span class="token operator">&amp;&amp;</span> isFrozen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fixedCallbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span>methods<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO: small memory optimization here (can skip creation for methods with no advice)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Method</span> method <span class="token operator">=</span> methods<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> rootClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      fixedCallbacks<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedChainStaticTargetInterceptor</span><span class="token punctuation">(</span>          chain<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Now copy both the callbacks from mainCallbacks</span>    <span class="token comment">// and fixedCallbacks into the callbacks array.</span>    callbacks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span>mainCallbacks<span class="token punctuation">.</span>length <span class="token operator">+</span> fixedCallbacks<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>mainCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mainCallbacks<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>fixedCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> mainCallbacks<span class="token punctuation">.</span>length<span class="token punctuation">,</span> fixedCallbacks<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorOffset <span class="token operator">=</span> mainCallbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    callbacks <span class="token operator">=</span> mainCallbacks<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> callbacks<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以结合调试，方便理解</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/spring-springframework-aop-64-166082953519513.png"></p><h1 id="三、JDK代理"><a href="#三、JDK代理" class="headerlink" title="三、JDK代理"></a>三、JDK代理</h1><h2 id="1、什么是JDK代理？"><a href="#1、什么是JDK代理？" class="headerlink" title="1、什么是JDK代理？"></a>1、什么是JDK代理？</h2><p>JDK动态代理是有JDK提供的工具类Proxy实现的，动态代理类是在运行时生成指定接口的代理类，每个代理实例（实现需要代理的接口）都有一个关联的调用处理程序对象，此对象实现了InvocationHandler，最终的业务逻辑是在InvocationHandler实现类的invoke方法上。</p><h2 id="2、案例-1"><a href="#2、案例-1" class="headerlink" title="2、案例"></a>2、案例</h2><h3 id="①-不需要maven依赖"><a href="#①-不需要maven依赖" class="headerlink" title="① 不需要maven依赖"></a>① 不需要maven依赖</h3><p>jdk代理不需要任何依赖</p><h3 id="②-定义实体类-1"><a href="#②-定义实体类-1" class="headerlink" title="② 定义实体类"></a>② 定义实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author chen */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③-被代理的类和接口"><a href="#③-被代理的类和接口" class="headerlink" title="③ 被代理的类和接口"></a>③ 被代理的类和接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"chen"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// do something</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④-JDK代理类"><a href="#④-JDK代理类" class="headerlink" title="④ JDK代理类"></a>④ JDK代理类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogProxy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserLogProxy</span><span class="token punctuation">(</span><span class="token class-name">UserServiceImpl</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">IUserService</span> <span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">IUserService</span> proxy<span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * proxy: 代理对象。 一般不使用该对象 method: 正在被调用的方法 args: 调用方法传入的参数             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// log - before method</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[before] execute method: "</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// call method</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 前置通知</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 返回通知, 可以访问到方法的返回值</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 异常通知, 可以访问到方法出现的异常</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 后置通知. 因为方法可以能会出异常, 所以访问不到方法的返回值</span>                <span class="token comment">// log - after method</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[after] execute method: "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">", return value: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">/**         * loader: 代理对象使用的类加载器.         * interfaces: 指定代理对象的类型. 即代理代理对象中可以有哪些方法.         * h: 当具体调用代理对象的方法时, 应该如何进行响应, 实际上就是调用 InvocationHandler 的 invoke 方法         */</span>        proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑤-使用代理-1"><a href="#⑤-使用代理-1" class="headerlink" title="⑤ 使用代理"></a>⑤ 使用代理</h3><p>启动类中指定代理目标并执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// proxy</span>        <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLogProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑥-简单测试-1"><a href="#⑥-简单测试-1" class="headerlink" title="⑥ 简单测试"></a>⑥ 简单测试</h3><p>启动上述类main 函数，执行的结果如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[before] execute method: findUserList[after] execute method: findUserList, return value: [User&#123;name&#x3D;&#39;chen&#39;, age&#x3D;18&#125;][before] execute method: addUser[after] execute method: addUser, return value: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、JDK代理的流程"><a href="#3、JDK代理的流程" class="headerlink" title="3、JDK代理的流程"></a>3、JDK代理的流程</h2><p>JDK代理自动生成的class是由sun.misc.ProxyGenerator来生成的。</p><h3 id="①-ProxyGenerator生成代码"><a href="#①-ProxyGenerator生成代码" class="headerlink" title="① ProxyGenerator生成代码"></a>① ProxyGenerator生成代码</h3><p>看下sun.misc.ProxyGenerator生成代码的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Generate a proxy class given a name and a list of proxy interfaces.    *    * @param name        the class name of the proxy class    * @param interfaces  proxy interfaces    * @param accessFlags access flags of the proxy class*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                                        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                        <span class="token keyword">int</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ProxyGenerator</span> gen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFile <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>generateClassFile方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Generate a class file for the proxy class.  This method drives the    * class file generation process.    */</span><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 第一步：将所有方法包装成ProxyMethod对象 */</span>        <span class="token comment">// 将Object类中hashCode、equals、toString方法包装成ProxyMethod对象</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>hashCodeMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>equalsMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>toStringMethod<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将代理类接口方法包装成ProxyMethod对象</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> intf<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addProxyMethod</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> intf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 校验返回类型</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProxyMethod</span><span class="token punctuation">></span></span> sigmethods <span class="token operator">:</span> proxyMethods<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkReturnTypes</span><span class="token punctuation">(</span>sigmethods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 第二步：为代理类组装字段，构造函数，方法，static初始化块等 */</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 添加构造函数，参数是InvocationHandler</span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 代理方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProxyMethod</span><span class="token punctuation">></span></span> sigmethods <span class="token operator">:</span> proxyMethods<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProxyMethod</span> pm <span class="token operator">:</span> sigmethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 字段</span>                fields<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldInfo</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>methodFieldName<span class="token punctuation">,</span>                    <span class="token string">"Ljava/lang/reflect/Method;"</span><span class="token punctuation">,</span>                        ACC_PRIVATE <span class="token operator">|</span> ACC_STATIC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 上述ProxyMethod中的方法</span>                methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span><span class="token function">generateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// static初始化块</span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateStaticInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"unexpected I/O Exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"method limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"field limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 第三步：写入class文件 */</span>    <span class="token comment">/*        * Make sure that constant pool indexes are reserved for the        * following items before starting to write the final class file.        */</span>    cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>superclassName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> intf<span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*        * Disallow new constant pool additions beyond this point, since        * we are about to write the final constant pool table.        */</span>    cp<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ByteArrayOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataOutputStream</span> dout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>bout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*            * Write all the items of the "ClassFile" structure.            * See JVMS section 4.1.            */</span>                                    <span class="token comment">// u4 magic;</span>        dout<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0xCAFEBABE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 minor_version;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>CLASSFILE_MINOR_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 major_version;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>CLASSFILE_MAJOR_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// (write constant pool)</span>                                    <span class="token comment">// u2 access_flags;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 this_class;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token function">dotToSlash</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 super_class;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>superclassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 interfaces_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// u2 interfaces[interfaces_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> intf <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>                <span class="token function">dotToSlash</span><span class="token punctuation">(</span>intf<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                                    <span class="token comment">// u2 fields_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// field_info fields[fields_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FieldInfo</span> f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                                    <span class="token comment">// u2 methods_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">// method_info methods[methods_count];</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodInfo</span> m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            m<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                                        <span class="token comment">// u2 attributes_count;</span>        dout<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (no ClassFile attributes for proxy classes)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"unexpected I/O Exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一共三个步骤（<strong>把大象装进冰箱分几步</strong>？）：</p><ul><li>第一步：（把冰箱门打开）准备工作，将所有方法包装成ProxyMethod对象，包括Object类中hashCode、equals、toString方法，以及被代理的接口中的方法</li><li>第二步：（把大象装进去）为代理类组装字段，构造函数，方法，static初始化块等</li><li>第三步：（把冰箱门带上）写入class文件</li></ul><h3 id="②-从生成的Proxy代码看执行流程"><a href="#②-从生成的Proxy代码看执行流程" class="headerlink" title="② 从生成的Proxy代码看执行流程"></a>② 从生成的Proxy代码看执行流程</h3><p>从上述sun.misc.ProxyGenerator类中可以看到，这个类里面有一个配置参数<code>sun.misc.ProxyGenerator.saveGeneratedFiles</code>，可以通过这个参数将生成的Proxy类保存在本地，比如设置为true 执行后，生成的文件如下：</p><p><img src="/2022/08/18/ssm-kuang-jia-zhi-dong-tai-dai-li/spring-springframework-aop-71.png"></p><p>看下生成后的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//</span><span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment">// (powered by FernFlower decompiler)</span><span class="token comment">//</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IUserService</span><span class="token punctuation">;</span><span class="token comment">// 所有类和方法都是final类型的</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m4<span class="token punctuation">;</span>    <span class="token comment">// 构造函数注入 InvocationHandler</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>var1<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">List</span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 初始化 methods, 2个IUserService接口中的方法，3个Object中的接口</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"tech.pdai.springframework.service.IUserService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"findUserList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"tech.pdai.springframework.service.IUserService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"addUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要流程是：</strong></p><ul><li>ProxyGenerator创建Proxy的具体类$Proxy0</li><li>由static初始化块初始化接口方法：2个IUserService接口中的方法，3个Object中的接口方法</li><li>由构造函数注入InvocationHandler</li><li>执行的时候，通过ProxyGenerator创建的Proxy，调用InvocationHandler的invoke方法，执行我们自定义的invoke方法</li></ul><h2 id="4、SpringAOP中JDK代理的实现"><a href="#4、SpringAOP中JDK代理的实现" class="headerlink" title="4、SpringAOP中JDK代理的实现"></a>4、SpringAOP中JDK代理的实现</h2><p>SpringAOP扮演的是JDK代理的创建和调用两个角色，通过这两个方向来看下SpringAOP的代码（JdkDynamicAopProxy类）</p><h3 id="①-SpringAOP-Jdk代理的创建"><a href="#①-SpringAOP-Jdk代理的创建" class="headerlink" title="① SpringAOP Jdk代理的创建"></a>① SpringAOP Jdk代理的创建</h3><p>代理的创建比较简单，调用getProxy方法，然后直接调用JDK中Proxy.newProxyInstance()方法将classloader和被代理的接口方法传入即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating JDK dynamic proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxiedInterfaces<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②-SpringAOP-Jdk代理的执行"><a href="#②-SpringAOP-Jdk代理的执行" class="headerlink" title="② SpringAOP Jdk代理的执行"></a>② SpringAOP Jdk代理的执行</h3><p>执行的方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * Implementation of &#123;@code InvocationHandler.invoke&#125;.    * &lt;p>Callers will see exactly the exception thrown by the target,    * unless a hook method throws an exception.    */</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> oldProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>    <span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行的是equal方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// The target does not implement the equals(Object) method itself.</span>            <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行的是hashcode方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// The target does not implement the hashCode() method itself.</span>            <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果是包装类，则dispatch to proxy config</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">DecoratingProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// There is only getDecoratedClass() declared -> dispatch to proxy config.</span>            <span class="token keyword">return</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 用反射方式来执行切点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Advised</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Service invocations on ProxyConfig with the proxy config...</span>            <span class="token keyword">return</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Make invocation available if necessary.</span>            oldProxy <span class="token operator">=</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Get as late as possible to minimize the time we "own" the target,</span>        <span class="token comment">// in case it comes from a pool.</span>        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取拦截链</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Check whether we have any advice. If we don't, we can fallback on direct</span>        <span class="token comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// We can skip creating a MethodInvocation: just invoke the target directly</span>            <span class="token comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span>            <span class="token comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            retVal <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// We need to create a method invocation...</span>            <span class="token class-name">MethodInvocation</span> invocation <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Proceed to the joinpoint through the interceptor chain.</span>            retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Massage return value if necessary.</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>                returnType <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span><span class="token class-name">RawTargetAccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Special case: it returned "this" and the return type of the method</span>            <span class="token comment">// is type-compatible. Note that we can't help if the target sets</span>            <span class="token comment">// a reference to itself in another returned object.</span>            retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> <span class="token class-name">Void</span><span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>                    <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Must have come from TargetSource.</span>            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Restore old proxy.</span>            <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架之Mybatis补充篇</title>
      <link href="/2022/08/17/ssm-kuang-jia-zhi-mybatis-bu-chong-pian/"/>
      <url>/2022/08/17/ssm-kuang-jia-zhi-mybatis-bu-chong-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MyBatis的缓存"><a href="#一、MyBatis的缓存" class="headerlink" title="一、MyBatis的缓存"></a>一、MyBatis的缓存</h2><h3 id="1、MyBatis的一级缓存"><a href="#1、MyBatis的一级缓存" class="headerlink" title="1、MyBatis的一级缓存"></a>1、MyBatis的一级缓存</h3><p><strong>一级缓存是SqlSession级别的</strong>，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会<strong>从缓存中直接获取</strong>，不会从数据库重新访问</p><p><strong>使一级缓存失效的四种情况：</strong></p><ul><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ul><h3 id="2、MyBatis的二级缓存"><a href="#2、MyBatis的二级缓存" class="headerlink" title="2、MyBatis的二级缓存"></a>2、MyBatis的二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p><strong>二级缓存开启的条件：</strong></p><ul><li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ul><p><strong>使二级缓存失效的情况：</strong></p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><h3 id="3、二级缓存的相关配置"><a href="#3、二级缓存的相关配置" class="headerlink" title="3、二级缓存的相关配置"></a>3、二级缓存的相关配置</h3><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li><p>eviction属性：缓存回收策略</p><ul><li><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p></li><li><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p></li><li><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p></li><li><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p></li></ul><p>默认的是 LRU</p></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p></li><li><p>size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly属性：只读，true/false</p><ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</li></ul></li></ul><h3 id="4、MyBatis缓存查询的顺序"><a href="#4、MyBatis缓存查询的顺序" class="headerlink" title="4、MyBatis缓存查询的顺序"></a>4、MyBatis缓存查询的顺序</h3><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</li><li>如果二级缓存没有命中，再查一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><h2 id="二、MyBatis的逆向工程"><a href="#二、MyBatis的逆向工程" class="headerlink" title="二、MyBatis的逆向工程"></a>二、MyBatis的逆向工程</h2><ul><li><strong>正向工程：</strong>先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li><li><strong>逆向工程：</strong>先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></li></ul><h3 id="1、创建步骤"><a href="#1、创建步骤" class="headerlink" title="1、创建步骤"></a>1、创建步骤</h3><ol><li><p>添加依赖和插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 依赖MyBatis核心包 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 控制Maven在构建过程中相关配置 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 构建过程中用到的插件 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 插件的依赖 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>                 <span class="token comment">&lt;!-- 逆向工程的核心依赖 --></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token comment">&lt;!-- 数据库连接池 --></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                 <span class="token comment">&lt;!-- MySQL驱动 --></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建MyBatis的核心配置文件</p></li><li><p>创建逆向工程的配置文件（<strong>文件名必须是：generatorConfig.xml</strong>）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- targetRuntime: 执行生成的逆向工程的版本 MyBatis3Simple: 生成基本的CRUD（清新简洁版） MyBatis3: 生成带条件的CRUD（奢华尊享版） --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3Simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 数据库的连接信息 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>                         <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">"</span></span>                         <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                         <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- javaBean的生成策略--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- SQL映射文件的生成策略 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- Mapper接口的生成策略 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 逆向分析的表 --></span>         <span class="token comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --></span>         <span class="token comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_emp<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Emp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行MBG插件的generate目标</p><p><img src="/2022/08/17/ssm-kuang-jia-zhi-mybatis-bu-chong-pian/image-20220817094144110.png"></p><p>效果：</p><p><img src="/2022/08/17/ssm-kuang-jia-zhi-mybatis-bu-chong-pian/image-20220817094157627.png"></p></li></ol><h3 id="2、QBC查询"><a href="#2、QBC查询" class="headerlink" title="2、QBC查询"></a>2、QBC查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMBG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">EmpMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmpMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">EmpExample</span> empExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系 </span>    empExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andEnameLike</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andAgeGreaterThan</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>andDidIsNot <span class="token class-name">Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//将之前添加的条件通过or拼接其他条件 </span>    empExample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andSexEqualTo</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>empExample<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、分页插件"><a href="#三、分页插件" class="headerlink" title="三、分页插件"></a>三、分页插件</h2><h3 id="1、分页插件使用步骤"><a href="#1、分页插件使用步骤" class="headerlink" title="1、分页插件使用步骤"></a>1、分页插件使用步骤</h3><ul><li><p>添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置分页插件</p><p>在MyBatis的核心配置文件中配置插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--设置分页插件--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、分页插件的使用"><a href="#2、分页插件的使用" class="headerlink" title="2、分页插件的使用"></a>2、分页插件的使用</h3><ul><li><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li></ul></li><li><p>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, int navigatePages)</code>获取分页相关数据</p><ul><li>list：分页之后的数据</li><li>navigatePages：导航分页的页码数</li></ul></li><li><p>分页相关数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PageInfo</span><span class="token punctuation">&#123;</span>pageNum<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> pageSize<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> startRow<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">,</span> endRow<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> pages<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>list<span class="token operator">=</span><span class="token class-name">Page</span><span class="token punctuation">&#123;</span>count<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> pageNum<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> pageSize<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> startRow<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> endRow<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>pages<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> reasonable<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> pageSizeZero<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>prePage<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> nextPage<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> isFirstPage<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> isLastPage<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> hasPreviousPage<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>hasNextPage<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> navigatePages<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> navigateFirstPage4<span class="token punctuation">,</span> navigateLastPage8<span class="token punctuation">,</span>navigatepageNums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>常用数据</strong></p><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li><li>size：当前页显示的真实条数</li><li>total：总记录数</li><li>pages：总页数</li><li>prePage：上一页的页码</li><li>nextPage：下一页的页码</li><li>isFirstPage/isLastPage：是否为第一页/最后一页</li><li>hasPreviousPage/hasNextPage：是否存在上一页/下一页</li><li>navigatePages：导航分页的页码数</li><li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li></ul></li></ul><h2 id="四、MyBatis获取参数值的两种方式"><a href="#四、MyBatis获取参数值的两种方式" class="headerlink" title="四、MyBatis获取参数值的两种方式"></a>四、MyBatis获取参数值的两种方式</h2><p>MyBatis获取参数值的两种方式：**${}<strong>和</strong>#{}**</p><ul><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；</li><li>但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h3 id="1、单个字面量类型的参数"><a href="#1、单个字面量类型的参数" class="headerlink" title="1、单个字面量类型的参数"></a>1、单个字面量类型的参数</h3><p>若mapper接口中的方法参数为单个的字面量类型</p><p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><h3 id="2、多个字面量类型的参数"><a href="#2、多个字面量类型的参数" class="headerlink" title="2、多个字面量类型的参数"></a>2、多个字面量类型的参数</h3><p>若mapper接口中的方法参数为多个时</p><p>此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以param1,param2…为键，以参数为值；</p><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><h3 id="3、map集合类型的参数"><a href="#3、map集合类型的参数" class="headerlink" title="3、map集合类型的参数"></a>3、map集合类型的参数</h3><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><h3 id="4、实体类类型的参数"><a href="#4、实体类类型的参数" class="headerlink" title="4、实体类类型的参数"></a>4、实体类类型的参数</h3><p>若mapper接口中的方法参数为实体类对象时</p><p>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><h3 id="5、使用-Param标识参数"><a href="#5、使用-Param标识参数" class="headerlink" title="5、使用@Param标识参数"></a>5、使用@Param标识参数</h3><p>可以通过@Param注解标识mapper接口中的方法参数</p><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Swagger篇</title>
      <link href="/2022/08/17/springboot-zhi-swagger-pian/"/>
      <url>/2022/08/17/springboot-zhi-swagger-pian/</url>
      
        <content type="html"><![CDATA[<p>在工作中接触到swagger，相比postman有一定用处，因此记下</p><h2 id="一、Swagger简介"><a href="#一、Swagger简介" class="headerlink" title="一、Swagger简介"></a>一、Swagger简介</h2><h3 id="1、前后端分离"><a href="#1、前后端分离" class="headerlink" title="1、前后端分离"></a>1、前后端分离</h3><p>在现在许多工作中，都要求前后端分离</p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p>在这过程中就产生了一个问题</p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p>由此有一个解决方案</p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p>而swagger就是这么一个工具，在写接口的时候自动帮助程序员生成接口文档的，只要程序员遵循它的规范并写一些接口的说明注解即可。</p><h3 id="2、Swagger"><a href="#2、Swagger" class="headerlink" title="2、Swagger"></a>2、Swagger</h3><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h2 id="二、SpringBoot继承Swagger"><a href="#二、SpringBoot继承Swagger" class="headerlink" title="二、SpringBoot继承Swagger"></a>二、SpringBoot继承Swagger</h2><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><h3 id="1、使用Swagger"><a href="#1、使用Swagger" class="headerlink" title="1、使用Swagger"></a>1、使用Swagger</h3><p><strong>要求：</strong>jdk 1.8 + 否则swagger2无法运行</p><ol><li><p>新建一个SpringBoot-web项目</p></li><li><p>添加Maven依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写HelloController，测试确保运行成功！</p></li><li><p>要使用Swagger，需要编写一个配置类-SwaggerConfig来配置 Swagger</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//配置类</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token comment">// 开启Swagger2的自动配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面</p></li></ol><h3 id="2、配置Swagger"><a href="#2、配置Swagger" class="headerlink" title="2、配置Swagger"></a>2、配置Swagger</h3><ol><li><p><strong>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token comment">//配置docket以配置Swagger具体参数</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以通过apiInfo()属性配置文档信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//配置文档信息</span><span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Contact</span> contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"联系人名字"</span><span class="token punctuation">,</span> <span class="token string">"http://xxx.xxx.com/联系人访问链接"</span><span class="token punctuation">,</span> <span class="token string">"联系人邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                   <span class="token string">"Swagger学习"</span><span class="token punctuation">,</span> <span class="token comment">// 标题           </span>        <span class="token string">"学习演示如何配置Swagger"</span><span class="token punctuation">,</span> <span class="token comment">// 描述           </span>        <span class="token string">"v1.0"</span><span class="token punctuation">,</span> <span class="token comment">// 版本           </span>        <span class="token string">"http://terms.service.url/组织链接"</span><span class="token punctuation">,</span> <span class="token comment">// 组织链接     </span>        contact<span class="token punctuation">,</span> <span class="token comment">// 联系人信息           </span>        <span class="token string">"Apach 2.0 许可"</span><span class="token punctuation">,</span> <span class="token comment">// 许可           </span>        <span class="token string">"许可链接"</span><span class="token punctuation">,</span> <span class="token comment">// 许可连接           </span>        <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 扩展  </span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Docket 实例关联上 apiInfo()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Beanpublic</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> 看下效果</p></li></ol><h3 id="3、配置扫描接口"><a href="#3、配置扫描接口" class="headerlink" title="3、配置扫描接口"></a>3、配置扫描接口</h3><ol><li><p>构建Docket时通过select()方法配置怎么扫描接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuang.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启项目测试，由于配置根据包的路径扫描接口，所以只能看到一个类</p></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 扫描所有，项目中的所有接口都会被扫描到</span>    <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不扫描接口</span>    <span class="token comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> annotation<span class="token punctuation">)</span>    <span class="token comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><span class="token function">withClassAnnotation</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> annotation<span class="token punctuation">)</span>    <span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> basePackage<span class="token punctuation">)</span> <span class="token comment">// 根据包路径扫描接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>除此之外，还可以配置接口扫描过滤：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuang.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/kuang/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里的可选值还有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 任何请求都扫描</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 任何请求都不扫描</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pathRegex<span class="token punctuation">)</span> <span class="token comment">// 通过正则表达式控制</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> antPattern<span class="token punctuation">)</span> <span class="token comment">// 通过ant()控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4、配置Swagger开关"><a href="#4、配置Swagger开关" class="headerlink" title="4、配置Swagger开关"></a>4、配置Swagger开关</h3><ol><li><p>通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuang.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/kuang/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 设置要显示swagger的环境</span>   <span class="token class-name">Profiles</span> of <span class="token operator">=</span> <span class="token class-name">Profiles</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 判断当前是否处于该环境</span>   <span class="token comment">// 通过 enable() 接收此参数判断是否要显示</span>   <span class="token keyword">boolean</span> b <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span>      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span>      <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.kuang.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span>      <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/kuang/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5、配置API分组"><a href="#5、配置API分组" class="headerlink" title="5、配置API分组"></a>5、配置API分组</h3><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640.png"></p><ol><li><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token comment">// 配置分组</span>       <span class="token comment">// 省略配置....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启项目查看分组</p></li><li><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启项目查看即可</p></li></ol><h3 id="6、实体类配置"><a href="#6、实体类配置" class="headerlink" title="6、实体类配置"></a>6、实体类配置</h3><ol><li><p>新建一个实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>   <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启查看测试</p><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640-16607060888357.png"></p></li></ol><p><strong>注：</strong>并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><ul><li>@ApiModel为类添加注释</li><li>@ApiModelProperty为类属性添加注释</li></ul><h3 id="7、常用注解"><a href="#7、常用注解" class="headerlink" title="7、常用注解"></a>7、常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>也可以给请求的接口配置一些注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">"名字的接口"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/name"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span><span class="token string">"这个名字会被返回"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。</p><p>当然了，在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p><h3 id="8、拓展：其他皮肤"><a href="#8、拓展：其他皮肤" class="headerlink" title="8、拓展：其他皮肤"></a>8、拓展：其他皮肤</h3><p>可以导入不同的包实现不同的皮肤定义：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 默认访问 访问 http://localhost:8080/swagger-ui.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640-166070632131710.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--bootstrap-ui 访问 http://localhost:8080/doc.html --></span><span class="token comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640-166070632131811.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Layui-ui   访问 http://localhost:8080/docs.html --></span><span class="token comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.caspar-chen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-ui-layer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640-166070632131812.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- mg-ui   访问 http://localhost:8080/document.html --></span><span class="token comment">&lt;!-- 引入swagger-ui-layer包 /document.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zyplayer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-mg-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/08/17/springboot-zhi-swagger-pian/640-166070632131813.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLZOO刷题上篇</title>
      <link href="/2022/08/09/sqlzoo-shua-ti-shang-pian/"/>
      <url>/2022/08/09/sqlzoo-shua-ti-shang-pian/</url>
      
        <content type="html"><![CDATA[<p>抽空刷了点sqlzoo的题，记一下</p><h2 id="一、第一章"><a href="#一、第一章" class="headerlink" title="一、第一章"></a><strong>一、第一章</strong></h2><h3 id="第一节：SELECT-basics"><a href="#第一节：SELECT-basics" class="headerlink" title="第一节：SELECT basics"></a><strong>第一节：SELECT basics</strong></h3><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-e7efb6512125b06bbdded21a2e284f70_720w.jpg"></p><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><p>显示德国 Germany 的人口。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'Germany'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h4><p>查询显示面积为 5,000,000 以上平方公里的国家,该国家的人口密度(population/area)。人口密度并不是 WORLD 表格中的栏,但我们可用公式(population/area)计算出来。修改此例子,查询面积为 5,000,000 以上平方公里的国家,对每个国家显示她的名字和人均国内生产总值(gdp/population)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> gdp<span class="token operator">/</span>population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> area <span class="token operator">></span> <span class="token number">5000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SQL查出的列可以很灵活，可以是一个现成的列，也可以是一个表达式。</p><h4 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h4><p>检查列表:单词“IN”可以让我们检查一个项目是否在列表中。</p><p>此示例显示了“Luxembourg 卢森堡”,“Mauritius 毛里求斯”和“Samoa 萨摩亚”的国家名称和人口。</p><p>显示“Ireland 爱尔兰”,“Iceland 冰岛”,“Denmark 丹麦”的国家名称和人口。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Ireland'</span><span class="token punctuation">,</span> <span class="token string">'Iceland'</span><span class="token punctuation">,</span> <span class="token string">'Denmark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单词IN可以用来检查一个项目是否在列表里面。</p><h4 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h4><p>哪些国家是不是太小,又不是太大?</p><p>BETWEEN 允许范围检查 - 注意,这是包含性的。 此例子显示面积为 250,000 及 300,000 之间的国家名称和该国面积。</p><p>修改此例子,以显示面积为 200,000 及 250,000 之间的国家名称和该国面积。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> area <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> area <span class="token operator">BETWEEN</span> <span class="token number">200000</span> <span class="token operator">AND</span> <span class="token number">250000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>BETWEEN代表区间，而且是闭区间。</p><p>NOT BETWEEN是开区间。</p><h3 id="第二节：SELECT-names"><a href="#第二节：SELECT-names" class="headerlink" title="第二节：SELECT names"></a><strong>第二节：SELECT names</strong></h3><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-899676daa7fb0d4aefaae6e32fd8b801_720w.jpg"></p><h4 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h4><p>可以用WHERE name LIKE ‘B%’来找出以 B 为开首的国家。</p><p>%是通配符,可以用代表任何字符。</p><p>找出以 Y 为开首的国家。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'Y%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>%作用是通配符，匹配0到任意长度的字符。</p><h4 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h4><p>找出以 Y 为结尾的国家。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%Y'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h4><p>“Luxembourg 卢森堡”中有一个x字母,还有一个国家的名字中有x。列出这两个国家。</p><p>找出所有国家,其名字包括字母x。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%x%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h4><p>“Iceland 冰岛”和“Switzerland 瑞士”的名字都是以”land”作结束的。还有其他吗?找出所有国家,其名字以 land 作结尾。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%land'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h4><p>找出所有国家,其名字以 C 作开头，以 ia 作结尾。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'C%ia'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h4><p>“Greece 希腊”中有双 e 字。哪个国家有双 o 字呢?</p><p>找出所有国家,其名字包括字母oo。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%oo%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h4><p>“Bahamas 巴哈马”中有三个 a,还有吗?</p><p>找出所有国家,其名字包括三个或以上的a。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%a%a%a%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a>2.8</h4><p>“India 印度”和”Angola 安哥拉”的第二个字母都是 n。</p><p>你可以用底线符_当作单一个字母的通配符。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'_n%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找出所有国家,其名字以t作第二个字母。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'_t%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>%代表不定数目的任意字符，而下划线则指定了数目，有多少下划线就表示间隔了多少字符。</p><h4 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a>2.9</h4><p>“Lesotho 莱索托”和”Moldova 摩尔多瓦”都有两个字母 o,被另外两个字母相隔着。</p><p>找出所有国家,其名字都有两个字母 o,被另外两个字母相隔着。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%o__o%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a>2.10</h4><p>“Cuba古巴”和”Togo 多哥”都是 4 个字母。</p><p>找出所有国家,其名字都是 4 个字母的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'____'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a>2.11</h4><p>“Luxembourg 卢森堡”的首都 capital 都同样叫“Luxembourg”。</p><p>显示所有国家名字,其首都和国家名字是相同的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name  <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> capital<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h4><p>“Mexico 墨西哥”的首都是”Mexico City”。</p><p>显示所有国家名字,其首都是国家名字加上”City”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name  <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> capital <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">' City'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意字符串拼接函数concat</p><h4 id="2-13"><a href="#2-13" class="headerlink" title="2.13"></a>2.13</h4><p>找出所有首都和其国家名字,而首都要有国家名字中出现。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> capital<span class="token punctuation">,</span>name  <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> capital <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-14"><a href="#2-14" class="headerlink" title="2.14"></a>2.14</h4><p>找出所有首都和其国家名字,而首都是国家名字的延伸。</p><p>显示 Mexico City,因它比其国家名字 Mexico 长。</p><p>不显示 Luxembourg,因它的首都和国家名相是相同的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>capital  <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> capital <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'_%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-15"><a href="#2-15" class="headerlink" title="2.15"></a>2.15</h4><p>“Monaco-Ville”是合并国家名字 “Monaco” 和延伸词”-Ville”.</p><p>显示国家名字，及其延伸词，如首都是国家名字的延伸。</p><p>可以使用SQL函数 REPLACE 或 MID.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span><span class="token keyword">REPLACE</span><span class="token punctuation">(</span>capital<span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> capital <span class="token operator">LIKE</span> concat<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'_%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那个MID函数，只有SQL Server里面有，MySQL里面没有。</p><h2 id="二、第二章"><a href="#二、第二章" class="headerlink" title="二、第二章"></a><strong>二、第二章</strong></h2><h3 id="第一节：SELECT-from-WORLD-Tutorial"><a href="#第一节：SELECT-from-WORLD-Tutorial" class="headerlink" title="第一节：SELECT from WORLD Tutorial"></a><strong>第一节：SELECT from WORLD Tutorial</strong></h3><h4 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1"></a>1.1</h4><p>简单查找国家名，洲名，人口</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> population <span class="token keyword">FROM</span> world<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1.2"></a>1.2</h4><p>如何使用WHERE来筛选记录。 显示具有至少2亿人口的国家名称。 2亿是200000000，有八个零。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> population<span class="token operator">></span><span class="token number">200000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-1"><a href="#1-3-1" class="headerlink" title="1.3"></a>1.3</h4><p>找出有至少200百万(2亿)人口的国家名称，及人均国内生产总值。</p><p>求助：如何人均国内生产总值计算</p><p>人均国内生产总值，即是国内生产总值除以人口(GDP/population)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>GDP<span class="token operator">/</span>population<span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> population<span class="token operator">></span><span class="token number">200000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-4-1"><a href="#1-4-1" class="headerlink" title="1.4"></a>1.4</h4><p>显示’South America’南美洲大陆的国家名字和以百万为单位人口数。 将人口population 除以一百万(1000000)得可得到以百万为单位人口数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>population<span class="token operator">/</span><span class="token number">1000000</span><span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> continent <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'South America'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h4><p>显示法国，德国，意大利(France, Germany, Italy)的国家名称和人口。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>population<span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'France'</span><span class="token punctuation">,</span><span class="token string">'Germany'</span><span class="token punctuation">,</span><span class="token string">'Italy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h4><p>显示包含单词“United”为名称的国家。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%United%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h4><p>成为大国的两种方式：如果它有3百万平方公里以上的面积，或拥有250百万(2.5亿)以上人口。展示大国的名称，人口和面积。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>population<span class="token punctuation">,</span>area<span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> area<span class="token operator">></span><span class="token number">3</span><span class="token operator">*</span><span class="token number">1000000</span> <span class="token operator">OR</span> population<span class="token operator">></span><span class="token number">250</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h4><p>美国、印度和中国(USA, India, China)是人口又大，同时面积又大的国家。排除这些国家。显示以人口或面积为大国的国家，但不能同时两者。显示国家名称，人口和面积。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>population<span class="token punctuation">,</span>area<span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>area<span class="token operator">></span><span class="token number">3</span><span class="token operator">*</span><span class="token number">1000000</span> <span class="token operator">OR</span> population<span class="token operator">></span><span class="token number">250</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">AND</span> name <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span>area<span class="token operator">></span><span class="token number">3</span><span class="token operator">*</span><span class="token number">1000000</span> <span class="token operator">AND</span> population<span class="token operator">></span><span class="token number">250</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a>1.9</h4><p>除以为1000000（6个零）是以百万计。除以1000000000（9个零）是以十亿计。使用 ROUND 函数来显示的数值到小数点后两位。</p><p>对于南美显示以百万计人口，以十亿计2位小数GDP。</p><p>除以为1000000（6个零）是以百万计。除以1000000000（9个零）是以十亿计。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span>population<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span>GDP<span class="token operator">/</span><span class="token number">1000000000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> continent <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'South America'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ROUND用法示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">7253.86</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">7254</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">7253.86</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">7253.9</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">7253.86</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token number">7000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-10"><a href="#1-10" class="headerlink" title="1.10"></a>1.10</h4><p>显示国家有至少一个万亿元国内生产总值（万亿，也就是12个零）的人均国内生产总值。四舍五入这个值到最接近1000。</p><p>显示万亿元国家的人均国内生产总值，四舍五入到最近的$ 1000。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span>GDP<span class="token operator">/</span>population<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> GDP<span class="token operator">></span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a>1.11</h4><p>The CASE statement shown is used to substitute North America for Caribbean in the third column.</p><p>Show the name - but substitute Australasia for Oceania - for countries beginning with N.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>       <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> continent<span class="token operator">=</span><span class="token string">'Oceania'</span> <span class="token keyword">THEN</span> <span class="token string">'Australasia'</span>            <span class="token keyword">ELSE</span> continent <span class="token keyword">END</span><span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'N%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CASE在此处把Oceania替换成了Australasia。</p><h4 id="1-12"><a href="#1-12" class="headerlink" title="1.12"></a>1.12</h4><p>Show the name and the continent - but substitute Eurasia for Europe and Asia; substitute America - for each country in North America or South America or Caribbean. Show countries beginning with A or B</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>       <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token punctuation">(</span>continent<span class="token operator">=</span><span class="token string">'Europe'</span> <span class="token operator">or</span> continent<span class="token operator">=</span><span class="token string">'Asia'</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span> <span class="token string">'Eurasia'</span>            <span class="token keyword">WHEN</span> <span class="token punctuation">(</span>continent<span class="token operator">=</span><span class="token string">'North America'</span> <span class="token operator">or</span>            continent<span class="token operator">=</span><span class="token string">'South America'</span> <span class="token operator">or</span>            continent<span class="token operator">=</span><span class="token string">'Caribbean'</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span> <span class="token string">'America'</span>            <span class="token keyword">ELSE</span> continent <span class="token keyword">END</span><span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'A%'</span> <span class="token operator">OR</span> name <span class="token operator">LIKE</span> <span class="token string">'B%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-13"><a href="#1-13" class="headerlink" title="1.13"></a>1.13</h4><p>Put the continents right…</p><p>Oceania becomes Australasia</p><p>Countries in Eurasia and Turkey go to Europe/Asia</p><p>Caribbean islands starting with ‘B’ go to North America, other Caribbean islands go to South America</p><p>Show the name, the original continent and the new continent of all countries.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> continent<span class="token punctuation">,</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> continent<span class="token operator">=</span><span class="token string">'Oceania'</span> <span class="token keyword">THEN</span> <span class="token string">'Australasia'</span><span class="token keyword">WHEN</span> continent<span class="token operator">=</span><span class="token string">'Eurasia'</span> <span class="token operator">or</span> name<span class="token operator">=</span><span class="token string">'Turkey'</span> <span class="token keyword">THEN</span> <span class="token string">'Europe/Asia'</span><span class="token keyword">WHEN</span> continent<span class="token operator">=</span><span class="token string">'Caribbean'</span> <span class="token operator">AND</span> name <span class="token operator">LIKE</span> <span class="token string">'B%'</span> <span class="token keyword">THEN</span> <span class="token string">'North America'</span><span class="token keyword">WHEN</span> continent<span class="token operator">=</span><span class="token string">'Caribbean'</span> <span class="token operator">AND</span> name <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'B%'</span> <span class="token keyword">THEN</span> <span class="token string">'South America'</span><span class="token keyword">ELSE</span> continent <span class="token keyword">END</span><span class="token keyword">FROM</span> world<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意SQLZOO里面结果较多的查询需要加个ORDER BY name;才能被判定为正确的。</p><h2 id="三、第三章"><a href="#三、第三章" class="headerlink" title="三、第三章"></a><strong>三、第三章</strong></h2><h3 id="第一节：SELECT-from-Nobel-Tutorial"><a href="#第一节：SELECT-from-Nobel-Tutorial" class="headerlink" title="第一节：SELECT from Nobel Tutorial"></a><strong>第一节：SELECT from Nobel Tutorial</strong></h3><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-e42b03ff8ed39b0457801ac4e41556bf_720w.jpg"></p><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-0d32a15220ab191c34e017f71a132be0_720w.jpg" alt="img"></p><h4 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1"></a>1.1</h4><p>查询以显示1950年诺贝尔奖的奖项资料。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> winner  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr <span class="token operator">=</span> <span class="token number">1950</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2"><a href="#1-2-2" class="headerlink" title="1.2"></a>1.2</h4><p>显示谁赢得了1962年文学奖(Literature)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr <span class="token operator">=</span> <span class="token number">1962</span>   <span class="token operator">AND</span> subject <span class="token operator">=</span> <span class="token string">'Literature'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2"><a href="#1-3-2" class="headerlink" title="1.3"></a>1.3</h4><p>显示“爱因斯坦”(‘Albert Einstein’) 的获奖年份和奖项。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span>subject  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> winner <span class="token operator">=</span> <span class="token string">'Albert Einstein'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-4-2"><a href="#1-4-2" class="headerlink" title="1.4"></a>1.4</h4><p>显示2000年及以后的和平奖(‘Peace’)得奖者。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr <span class="token operator">>=</span> <span class="token number">2000</span>   <span class="token operator">AND</span> subject <span class="token operator">=</span> <span class="token string">'Peace'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-1"><a href="#1-5-1" class="headerlink" title="1.5"></a>1.5</h4><p>显示1980年至1989年(包含首尾)的文学奖(Literature)获奖者所有细节（年，主题，获奖者）。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>winner  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr <span class="token operator">BETWEEN</span> <span class="token number">1980</span> <span class="token operator">AND</span> <span class="token number">1989</span>   <span class="token operator">AND</span> subject <span class="token operator">=</span> <span class="token string">'Literature'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-6-1"><a href="#1-6-1" class="headerlink" title="1.6"></a>1.6</h4><p>显示总统获胜者的所有细节：</p><p>西奥多•罗斯福 Theodore Roosevelt</p><p>伍德罗•威尔逊 Woodrow Wilson</p><p>吉米•卡特 Jimmy Carter</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> winner <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Theodore Roosevelt'</span><span class="token punctuation">,</span>                  <span class="token string">'Woodrow Wilson'</span><span class="token punctuation">,</span>                  <span class="token string">'Jimmy Carter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-1"><a href="#1-7-1" class="headerlink" title="1.7"></a>1.7</h4><p>显示名字为John 的得奖者。 (注意:外国人名字(First name)在前，姓氏(Last name)在后)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> winner <span class="token operator">LIKE</span> <span class="token string">'John%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-8-1"><a href="#1-8-1" class="headerlink" title="1.8"></a>1.8</h4><p>显示1980年物理学(physics)获奖者，及1984年化学奖(chemistry)获得者。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>winner <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>yr<span class="token operator">=</span><span class="token number">1980</span> <span class="token operator">AND</span> subject<span class="token operator">=</span><span class="token string">'physics'</span><span class="token punctuation">)</span><span class="token operator">OR</span> <span class="token punctuation">(</span>yr<span class="token operator">=</span><span class="token number">1984</span> <span class="token operator">AND</span> subject<span class="token operator">=</span><span class="token string">'chemistry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-9-1"><a href="#1-9-1" class="headerlink" title="1.9"></a>1.9</h4><p>查看1980年获奖者，但不包括化学奖(Chemistry)和医学奖(Medicine)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>winner <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> yr<span class="token operator">=</span><span class="token number">1980</span> <span class="token operator">AND</span> subject <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Chemistry'</span><span class="token punctuation">,</span><span class="token string">'Medicine'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-10-1"><a href="#1-10-1" class="headerlink" title="1.10"></a>1.10</h4><p>显示早期的医学奖(Medicine)得奖者（1910之前，不包括1910），及近年文学奖(Literature)得奖者（2004年以后，包括2004年）。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>yr<span class="token operator">&lt;</span><span class="token number">1910</span> <span class="token operator">AND</span> subject<span class="token operator">=</span><span class="token string">'Medicine'</span><span class="token punctuation">)</span><span class="token operator">OR</span> <span class="token punctuation">(</span>yr<span class="token operator">>=</span><span class="token number">2004</span> <span class="token operator">AND</span> subject<span class="token operator">=</span><span class="token string">'Literature'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-11-1"><a href="#1-11-1" class="headerlink" title="1.11"></a>1.11</h4><p>Find all details of the prize won by PETER GRÜNBERG</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> winner <span class="token operator">LIKE</span> <span class="token string">'PETER GR%NBERG'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>模糊匹配非ASCII字符</p><h4 id="1-12-1"><a href="#1-12-1" class="headerlink" title="1.12"></a>1.12</h4><p>查找尤金•奥尼尔EUGENE O’NEILL得奖的所有细节 Find all details of the prize won by EUGENE O’NEILL</p><p>跳脱字符:单引号</p><p>你不能把一个单引号直接的放在字符串中。但您可连续使用两个单引号在字符串中当作一个单引号。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> winner<span class="token operator">=</span><span class="token string">'EUGENE O''NEILL'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>转义字符，两个单引号代表一个单引号。</p><h4 id="1-13-1"><a href="#1-13-1" class="headerlink" title="1.13"></a>1.13</h4><p>列出爵士的获奖者、年份、奖页(爵士的名字以Sir开始)。先显示最新获奖者，然后同年再按名称顺序排列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner<span class="token punctuation">,</span>yr<span class="token punctuation">,</span>subject <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> winner <span class="token operator">LIKE</span> <span class="token string">'Sir%'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> yr <span class="token keyword">DESC</span><span class="token punctuation">,</span>winner<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用逗号分隔开多个排序条件。</p><h4 id="1-14"><a href="#1-14" class="headerlink" title="1.14"></a>1.14</h4><p>The expression subject IN (‘Chemistry’,’Physics’) can be used as a value - it will be 0 or 1.</p><p>Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner<span class="token punctuation">,</span> subject  <span class="token keyword">FROM</span> nobel <span class="token keyword">WHERE</span> yr<span class="token operator">=</span><span class="token number">1984</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> subject <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'Physics'</span><span class="token punctuation">,</span><span class="token string">'Chemistry'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>subject<span class="token punctuation">,</span>winner<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>利用类似布尔值的0和1返还结果来排序。</p><h2 id="四、第四章"><a href="#四、第四章" class="headerlink" title="四、第四章"></a><strong>四、第四章</strong></h2><h3 id="第一节：SELECT-within-SELECT-Tutorial"><a href="#第一节：SELECT-within-SELECT-Tutorial" class="headerlink" title="第一节：SELECT within SELECT Tutorial"></a><strong>第一节：SELECT within SELECT Tutorial</strong></h3><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-7af55e9d1665e48276f03fa42ba0b3a9_720w.jpg"></p><h4 id="1-1-3"><a href="#1-1-3" class="headerlink" title="1.1"></a>1.1</h4><p>列出每个国家的名字 name，当中人口 population 是高于俄罗斯’Russia’的人口。world(name, continent, area, population, gdp)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> population <span class="token operator">></span>     <span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world      <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Russia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3"><a href="#1-2-3" class="headerlink" title="1.2"></a>1.2</h4><p>列出欧州每国家的人均GDP，当中人均GDP要高于英国’United Kingdom’的数值。</p><p>人均GDP即是 gdp除以population</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span> <span class="token operator">AND</span> gdp<span class="token operator">/</span>population <span class="token operator">></span>     <span class="token punctuation">(</span><span class="token keyword">SELECT</span> gdp<span class="token operator">/</span>population <span class="token keyword">FROM</span> world      <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'United Kingdom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-3"><a href="#1-3-3" class="headerlink" title="1.3"></a>1.3</h4><p>在阿根廷Argentina 及 澳大利亚 Australia所在的洲份中，列出当中的国家名字 name 及洲分 continent 。按国字名字顺序排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>continent <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> continent <span class="token operator">IN</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> continent <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Argentina'</span> <span class="token operator">OR</span> name<span class="token operator">=</span><span class="token string">'Australia'</span><span class="token punctuation">)</span>  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-3"><a href="#1-4-3" class="headerlink" title="1.4"></a>1.4</h4><p>哪一个国家的人口比加拿大Canada的多，但比波兰Poland的少?列出国家名字name和人口population 。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>population <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> population <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Canada'</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> population <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Poland'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-5-2"><a href="#1-5-2" class="headerlink" title="1.5"></a>1.5</h4><p>Germany德国（人口8000万），在Europe欧洲国家的人口最多。Austria奥地利（人口850万）拥有德国总人口的11％。</p><p>显示欧洲的国家名称name和每个国家的人口population。以德国的人口的百分比作人口显示。</p><p>小数位数：可以使用函数ROUND 删除小数。</p><p>百分号 %：可以使用函数 CONCAT 增加的百分比符号。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span>population<span class="token operator">/</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'Germany'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意括号的使用，查询德国人口的那句SELECT必须用括号括起来，否则会出错。</p><h4 id="1-6-2"><a href="#1-6-2" class="headerlink" title="1.6"></a>1.6</h4><p>哪些国家的GDP比Europe欧洲的全部国家都要高呢? [只需列出 name 。] (有些国家的记录中，GDP是NULL，没有填入资料的。)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name  <span class="token keyword">FROM</span> world  <span class="token keyword">WHERE</span> gdp <span class="token operator">></span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> gdp <span class="token keyword">FROM</span> world                  <span class="token keyword">WHERE</span> gdp<span class="token operator">></span><span class="token number">0</span> <span class="token operator">AND</span> continent<span class="token operator">=</span><span class="token string">'Europe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有些国家的记录中，GDP是NULL，所以查找欧洲国家的GDP的时候需要加上限制条件gdp&gt;0，否则报错。</p><h4 id="1-7-2"><a href="#1-7-2" class="headerlink" title="1.7"></a>1.7</h4><p>在每一个州中找出最大面积的国家，列出洲份 continent, 国家名字 name 及面积 area。 (有些国家的记录中，AREA是NULL，没有填入资料的。)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent<span class="token punctuation">,</span> name<span class="token punctuation">,</span> area <span class="token keyword">FROM</span> world x  <span class="token keyword">WHERE</span> area <span class="token operator">>=</span> <span class="token keyword">ALL</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> area <span class="token keyword">FROM</span> world y    <span class="token keyword">WHERE</span> y<span class="token punctuation">.</span>continent<span class="token operator">=</span>x<span class="token punctuation">.</span>continent    <span class="token operator">AND</span> area<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的x和y都是变量名，代表从数据库里面查出的当前元素。</p><p>可以这样理解x和y：</p><p>从world里面找出一行的continent, name, area三个字段，视为一个元素x，这三个字段相当于x的参数值。</p><p>后面那个SELECT语句，相当于在world里面找出一行的area字段，视为一个元素y，并且提供了限定条件：让y的continent字段和x的continent值相等。</p><p>x和y相当于变量名，用来引用当下语句查找出的单个元素的。</p><h4 id="1-8-2"><a href="#1-8-2" class="headerlink" title="1.8"></a>1.8</h4><p>列出洲份名称，和每个洲份中国家名字按子母顺序是排首位的国家名。(即每洲只有列一国)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent<span class="token punctuation">,</span>name <span class="token keyword">FROM</span> world x  <span class="token keyword">WHERE</span> name <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> name <span class="token keyword">from</span> world y   <span class="token keyword">WHERE</span> x<span class="token punctuation">.</span>continent<span class="token operator">=</span>y<span class="token punctuation">.</span>continent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;=之类的符号不但能比较数字，也能按照字典顺序来比较字符串。</p><h4 id="1-9-2"><a href="#1-9-2" class="headerlink" title="1.9"></a>1.9</h4><p>找出洲份，当中全部国家都有少于或等于 25000000 人口. 在这些洲份中，列出国家名字name，continent 洲份和population人口。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>continent<span class="token punctuation">,</span>population <span class="token keyword">FROM</span> world x  <span class="token keyword">WHERE</span> <span class="token number">25000000</span> <span class="token operator">>=</span> <span class="token keyword">ALL</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> population <span class="token keyword">FROM</span> world y  <span class="token keyword">WHERE</span> x<span class="token punctuation">.</span>continent<span class="token operator">=</span>y<span class="token punctuation">.</span>continent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-10-2"><a href="#1-10-2" class="headerlink" title="1.10"></a>1.10</h4><p>有些国家的人口是同洲份的所有其他国的3倍或以上。列出 国家名字name 和 洲份 continent。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>continent <span class="token keyword">FROM</span> world x  <span class="token keyword">WHERE</span> x<span class="token punctuation">.</span>population <span class="token operator">>=</span> <span class="token keyword">ALL</span>  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">3</span><span class="token operator">*</span>population <span class="token keyword">FROM</span> world y  <span class="token keyword">WHERE</span> x<span class="token punctuation">.</span>continent<span class="token operator">=</span>y<span class="token punctuation">.</span>continent <span class="token operator">and</span> x<span class="token punctuation">.</span>name<span class="token operator">&lt;></span>y<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-第五章"><a href="#五-第五章" class="headerlink" title="五. 第五章"></a><strong>五. 第五章</strong></h2><h3 id="第一节：SUM-and-COUNT"><a href="#第一节：SUM-and-COUNT" class="headerlink" title="第一节：SUM and COUNT"></a><strong>第一节：SUM and COUNT</strong></h3><p><img src="/2022/08/09/sqlzoo-shua-ti-shang-pian/v2-7d7b1652d32365336c215e188034bb74_720w.jpg"></p><h4 id="1-1-4"><a href="#1-1-4" class="headerlink" title="1.1"></a>1.1</h4><p>展示世界的总人口。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2"></a>1.2</h4><p>列出所有的洲份, 每个只有一次。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">(</span>continent<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-4"><a href="#1-3-4" class="headerlink" title="1.3"></a>1.3</h4><p>找出非洲(Africa)的GDP总和。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>gdp<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> continent<span class="token operator">=</span><span class="token string">'Africa'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-4"><a href="#1-4-4" class="headerlink" title="1.4"></a>1.4</h4><p>有多少个国家具有至少百万(1000000)的面积。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> area<span class="token operator">>=</span><span class="token number">1000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-5-3"><a href="#1-5-3" class="headerlink" title="1.5"></a>1.5</h4><p>(‘France’,’Germany’,’Spain’)（“法国”，“德国”，“西班牙”）的总人口是多少？</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world <span class="token keyword">WHERE</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'France'</span><span class="token punctuation">,</span><span class="token string">'Germany'</span><span class="token punctuation">,</span><span class="token string">'Spain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6-3"><a href="#1-6-3" class="headerlink" title="1.6"></a>1.6</h4><p>对于每一个洲份，显示洲份和国家的数量。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> select_list<span class="token punctuation">[</span> <span class="token keyword">INTO</span> new_table <span class="token punctuation">]</span> <span class="token keyword">FROM</span> table_source <span class="token punctuation">[</span> <span class="token keyword">WHERE</span> search_condition <span class="token punctuation">]</span>        <span class="token comment">// WHERE进行分组前过滤，过滤条件里面不能有聚合函数</span>                                     使用<span class="token keyword">where</span>条件显示特定的行<span class="token punctuation">[</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression <span class="token punctuation">]</span>  <span class="token comment">// GROUP BY必须配合聚合函数来使用</span><span class="token punctuation">[</span> <span class="token keyword">HAVING</span> search_condition <span class="token punctuation">]</span>       <span class="token comment">// HAVING进行分组后过滤，过滤条件里面可以有聚合函数</span>                                     使用<span class="token keyword">having</span> 条件显示特定的组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> continent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-7-3"><a href="#1-7-3" class="headerlink" title="1.7"></a>1.7</h4><p>对于每一个洲份，显示洲份和至少有1000万人(10,000,000)口国家的数目。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> world<span class="token keyword">WHERE</span> population <span class="token operator">>=</span> <span class="token number">10000000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> continent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-8-3"><a href="#1-8-3" class="headerlink" title="1.8"></a>1.8</h4><p>列出有至少100百万(1亿)(100,000,000)人口的洲份。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> continent <span class="token keyword">FROM</span> world<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> continent<span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">100000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-1"><a href="#2-1-1" class="headerlink" title="2.1"></a>2.1</h4><p>找出总共有多少个奖颁发了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2.2"></a>2.2</h4><p>列出每一个奖项(subject), 只列一次</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-1"><a href="#2-3-1" class="headerlink" title="2.3"></a>2.3</h4><p>找出物理奖的总颁发次数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> subject<span class="token operator">=</span><span class="token string">'Physics'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-4-1"><a href="#2-4-1" class="headerlink" title="2.4"></a>2.4</h4><p>对每一个奖项(Subject),列出颁发数目。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5-1"><a href="#2-5-1" class="headerlink" title="2.5"></a>2.5</h4><p>对每一个奖项(Subject),列出首次颁发的年份。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>yr<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-6-1"><a href="#2-6-1" class="headerlink" title="2.6"></a>2.6</h4><p>对每一个奖项(Subject),列出2000年颁发的数目。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> yr<span class="token operator">=</span><span class="token number">2000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-7-1"><a href="#2-7-1" class="headerlink" title="2.7"></a>2.7</h4><p>对每一个奖项(Subject),列出有多少个不同的得奖者。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> winner<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-8-1"><a href="#2-8-1" class="headerlink" title="2.8"></a>2.8</h4><p>对每一个奖项(Subject),列出有多少年曾颁发过。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> yr<span class="token punctuation">)</span> <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-9-1"><a href="#2-9-1" class="headerlink" title="2.9"></a>2.9</h4><p>列出哪年曾同年有3个物理奖Physics得奖者。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> subject<span class="token operator">=</span><span class="token string">'Physics'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> yr<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> winner<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-10-1"><a href="#2-10-1" class="headerlink" title="2.10"></a>2.10</h4><p>列出谁得奖多于一次。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> winner<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-11-1"><a href="#2-11-1" class="headerlink" title="2.11"></a>2.11</h4><p>列出谁获得多于一个奖项(Subject)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> winner <span class="token keyword">FROM</span> nobel<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> winner<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> subject<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-12-1"><a href="#2-12-1" class="headerlink" title="2.12"></a>2.12</h4><p>哪年哪奖项，是同一奖项(subject)颁发给3个人。只列出2000年及之后的数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> yr<span class="token punctuation">,</span>subject <span class="token keyword">FROM</span> nobel<span class="token keyword">WHERE</span> yr<span class="token operator">>=</span><span class="token number">2000</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> yr<span class="token punctuation">,</span>subject<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之nacos篇</title>
      <link href="/2022/08/08/springcloud-zhi-nacos-pian/"/>
      <url>/2022/08/08/springcloud-zhi-nacos-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring-Cloud-Alibaba"><a href="#一、Spring-Cloud-Alibaba" class="headerlink" title="一、Spring Cloud Alibaba"></a>一、Spring Cloud Alibaba</h2><p><strong>简单说一下Spring Cloud Alibaba</strong></p><p>Spring Cloud Alibaba致力于提供微服务开发的一站式解决方案。包含开发式应用微服务的必需组件，方便开发者通过Spring Cloud编程模型轻松使用组件来开发分布式应用服务</p><p>依托Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将Spring Cloud应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808190348570.png"></p><p><strong>对应组件的版本关系</strong></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808190523455.png"></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808190534516.png"></p><h2 id="二、Nacos"><a href="#二、Nacos" class="headerlink" title="二、Nacos"></a>二、Nacos</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>Nacos 致力于<strong>发现、配置和管理微服务</strong>。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。 </p><p>Nacos 帮助程序员更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><h3 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h3><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808190843375.png"></p><ul><li><p><strong>服务</strong> <strong>(Service)</strong> </p><p>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。</p></li><li><p><strong>服务注册中心</strong> <strong>(Service Registry)</strong> </p><p>服务注册中心是服务实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。 </p></li><li><p><strong>服务元数据</strong> <strong>(Service Metadata)</strong> </p><p>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据 </p></li><li><p> <strong>服务提供方</strong> <strong>(Service Provider)</strong> </p></li></ul><p>  是指提供可复用和可调用服务的应用方</p><ul><li> <strong>服务消费方</strong> <strong>(Service Consumer)</strong> </li></ul><p>  是指会发起对某个服务调用的应用方 </p><ul><li><p><strong>配置</strong> <strong>(Configuration)—配置文件中心</strong> </p><p>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。 </p></li><li><p><strong>配置管理</strong> <strong>(Configuration Management)</strong> </p><p>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动统称为配置管理。 </p></li><li><p> <strong>名字服务</strong> <strong>(Naming Service)</strong> </p></li></ul><p>  提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务</p><ul><li><p><strong>配置服务</strong> <strong>(Configuration Service)</strong> </p><p>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p></li></ul><h3 id="3、安装和启动"><a href="#3、安装和启动" class="headerlink" title="3、安装和启动"></a>3、安装和启动</h3><p>一般官网下对应的版本就好</p><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>解压后目录如下</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808191401371.png"></p><ul><li><strong>bin：可执行文件夹目录，包含：启动、停止命令等等</strong> </li><li><strong>conf：配置文件目录</strong> </li><li>target：存放 naocs-server.jar </li><li>LICENSE：授权信息，Nacos 使用 Apache License Version 2.0 授权 </li><li>NOTICE：公告信息</li></ul><p>之后就要修改对应的一些配置文件，找到conf目录里面的application.properties文件</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808191518128.png"></p><p><strong>打开后，在文件末尾添加配置：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">spring.datasource.platform<span class="token operator">=</span>mysql db.num<span class="token operator">=</span><span class="token number">1</span> // mysql地址db.url.0<span class="token operator">=</span>jdbc:mysql://localhost:3306/nacos?characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span><span class="token assign-left variable">connectTimeout</span><span class="token operator">=</span><span class="token number">1</span> 000<span class="token operator">&amp;</span><span class="token assign-left variable">socketTimeout</span><span class="token operator">=</span><span class="token number">3000</span><span class="token operator">&amp;</span><span class="token assign-left variable">autoReconnect</span><span class="token operator">=</span>true db.user<span class="token operator">=</span>root db.password<span class="token operator">=</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nacos 默认使用嵌入式数据库实现数据的存储，并不方便观察数据存储的基本情况，这里面修改为使用 Mysql 数据库做数据的存储，方便观察数据的结构</p><p><strong>添加配置后，导入mysql表</strong>，在 config 目录下找到对应的 sql 脚本</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808191944968.png"></p><p><strong>创建数据库，运行 sql 脚本</strong></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808192004274.png"></p><p>这样就可以<strong>启动</strong>了，可以直接 <code>startup.cmd -m standalone</code> <strong>启动单机版本</strong> </p><p>如果懒的话，进入到${Nacos}/bin 目录里面，右键用笔记本或者其他编辑文件打开<strong>startup.cmd</strong> <strong>修改默认参数</strong></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808192215688.png" alt="image-2022080819221568"></p><p><strong>将</strong> <strong>set MODE=”cluster”修改为 standalone</strong></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808192243531.png"></p><p><strong>将</strong> <strong>set MODE=”cluster”修改为</strong> <strong>standalone</strong></p><p>打开<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ，即可访问启动 Nacos 实例。 </p><p><strong>Nacos</strong> <strong>默认用户名和密码都是</strong> <strong>nacos</strong>。</p><p><strong>如果想修改密码，可以直接修改数据库的</strong> <strong>user</strong> <strong>表，密码可以使用</strong> <strong>BcryptPasswordEncoder加密</strong></p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/image-20220808192410904.png"></p><h2 id="三、Nacos注册中心"><a href="#三、Nacos注册中心" class="headerlink" title="三、Nacos注册中心"></a>三、Nacos注册中心</h2><h3 id="1、工程案例"><a href="#1、工程案例" class="headerlink" title="1、工程案例"></a>1、工程案例</h3><p>本小节工单案例包括2个，一个服务提供者provider 、服务消费者consumer。</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/a162004303c62eeaa5e88980b0523f3d.png"></p><p>在父pom文件引入相关的依赖，如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">></span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>2020.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2020.0.RC1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- spring boot 依赖 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- spring cloud 依赖 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- spring cloud alibaba 依赖 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud-alibaba.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务提供者provider</strong></p><p>在provider的pom文件引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件application.yml：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8762spring:  application:    name: provider  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ProviderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"forezp"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", i'm provider ,my port:"</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务消费者consumer</strong></p><p>在pom文件引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件application.yml：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8763spring:  application:    name: consumer  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在工程的启动文件开启FeignClient的功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个FeignClient，去调用provider服务的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"provider"</span> <span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProviderClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"forezp"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个接口，让consumer去调用provider服务的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ProviderClient</span> providerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hi-feign"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hiFeign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> providerClient<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token string">"feign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动两个工程，在nacos页面查看，可见2个服务都已经注册成功：</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/5556f6ff6609ad6c73d7b15d93902583.png"></p><p><strong>服务调用</strong></p><p>在浏览器上输入<a href="http://localhost:8763/hi-[feign](https://so.csdn.net/so/search?q=feign&amp;spm=1001.2101.3001.7020)%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%EF%BC%9A">http://localhost:8763/hi-[feign](https://so.csdn.net/so/search?q=feign&amp;spm=1001.2101.3001.7020)，浏览器返回响应：</a></p><pre class="line-numbers language-none"><code class="language-none">hello feign, i&#39;m provider ,my port:8762<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可见浏览器的请求成功调用了consumer服务的接口，consumer服务也成功地通过feign成功的调用了provider服务的接口。</p><h3 id="2、使用sc-loadbanlancer作为负载均衡"><a href="#2、使用sc-loadbanlancer作为负载均衡" class="headerlink" title="2、使用sc loadbanlancer作为负载均衡"></a>2、<strong>使用sc loadbanlancer作为负载均衡</strong></h3><p>其实feign使用了spring cloud loadbanlancer作为负载均衡器。</p><p>可以通过修改provider的端口，再在本地启动一个新的provider服务，那么本地有2个provider 服务，端口分别为8761 和8762。在浏览</p><p>器上多次调用<a href="http://localhost:8763/hi-feign%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E4%BA%A4%E6%9B%BF%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:8763/hi-feign，浏览器会交替显示：</a></p><pre class="line-numbers language-none"><code class="language-none">hello feign, i&#39;m provider ,my port:8762hello feign, i&#39;m provider ,my port:8761<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、Nacos配置中心"><a href="#四、Nacos配置中心" class="headerlink" title="四、Nacos配置中心"></a>四、Nacos配置中心</h2><p>Nacos除了可以作为服务注册中心，它还有服务配置中心的功能。类似于consul config，Nacos 是支持热加载的。</p><p>本案例是在第三节（Nacos作为服务注册与发现）的nacos-provider工程上改造的，在工程的pom文件引入nacos-config的Spring cloud依赖，版本为0.9.0. RELEASE，代码如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在bootstrap.yml(一定是bootstrap.yml文件，不是application.yml文件)文件配置以下内容：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  application:    name: nacos-provider  cloud:    nacos:      config:        server-addr: 127.0.0.1:8848        file-extension: yaml        prefix: nacos-provider  profiles:    active: dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的配置中，配置了nacos config server的地址，配置的扩展名是ymal（目前仅支持ymal和properties）。注意是没有配置server.port的，sever.port的属性在nacos中配置。上面的配置是和Nacos中的dataId 的格式是对应的，nacos的完整格式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</li><li>spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</li><li>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</li></ul><p>启动nacos，登陆localhost:8848/nacos，创建一个data id ，完整的配置如图所示：</p><p><img src="/2022/08/08/springcloud-zhi-nacos-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9mb3JlenAuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70.png"></p><p>写一个RestController,在Controller上添加 @RefreshScope 实现配置的热加载。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;username:lily&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/username"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动工程nacos-provider，在浏览器上访问localhost:8761/username，可以返回在nacos控制台上配置的username。在nacos 网页上更改username的配置，在不重启nacos-provider工程的情况下，重新访问localhost:8761/username，返回的事修改后的值，可见nacos作为配置中心实现了热加载功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Springcloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之进阶篇</title>
      <link href="/2022/07/13/mysql-zhi-jin-jie-pian/"/>
      <url>/2022/07/13/mysql-zhi-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h2><h3 id="1、MySQL体系结构"><a href="#1、MySQL体系结构" class="headerlink" title="1、MySQL体系结构"></a>1、MySQL体系结构</h3><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Y-255-l5rGC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center.png"></p><p><strong>连接层（Client Connectors）</strong></p><ul><li>连接层又称为客户端连接器（Client Connectors）：提供与MySQL服务器建立的支持。<br>目前几乎支持所有主流的服务端编程技术，主要完成一些类似于<strong>连接处理、授权认证、及相关的安全方案</strong>。</li><li>在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接，并且在这里服务器也会为接入的客户验证他所具备的权限。</li><li><strong>注意：</strong>连接用户权限修改后，不会立即生效，就是因为在这里将用户认证后的权限信息保存了下来，需要用户断开并重新连接，重新进行校验，修改后的权限才会生效。</li></ul><p><strong>服务层（MySQL Server）</strong></p><ul><li><p>服务层是MySQL Server的核心，主要包含系统管理和控制工具、SQL接口、解析器、查询优化器。</p></li><li><p>实际上，连接层中的连接认证，校验流程，也可以归属在服务层中。<br>数据库连接成功后，在服务层完成大多数核心功能，如<strong>Sql接口，查询缓存，Sql分析和优化，以及一些内置函数的执行</strong>。<br>它的主要流程是这样的：</p><ul><li>第一步，查看当前查询是否存在缓存，有则直接返回，没有则进行服务器解析，并生成对应的内部解析树。</li><li>第二步，完成相应的优化，确定表的查询顺序，是否使用索引</li><li>第三步，生成对应的操作。</li></ul></li></ul><p><strong>存储引擎层（Pluggable Storage Engines）</strong></p><ul><li><p>存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是<strong>插件式</strong>的，不同的存储引擎具备不同的功能，可以根据自己的需要进行选择，最常见的是<strong>MyISAM</strong>和<strong>InnoDB</strong>。</p></li><li><p><strong>注意：</strong>数据库的<strong>索引就是在引擎层实现的</strong></p></li></ul><p><strong>系统文件层/存储层（File System）</strong></p><ul><li>文件层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件（redolog,undo.log），数据文件，索引文件，二进制日志，错误日志，配置文件，pid 文件，socket 文件等。</li></ul><p><strong>MySQL运行机制</strong></p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5Y-255-l5rGC,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center-16570300224542.png"></p><ul><li><strong>建立连接（Connectors&amp;Connection Pool）</strong>，通过客户端/服务器通信协议与MySQL建立连接。MySQL 客户端与服务端的通信方式是 “ 半双工通信 ”。</li><li><strong>查询缓存（Cache&amp;Buffer）</strong>，存在则直接返回，不存在则进行查询，不过需要注意的是，它默认是关闭的，并且，在8.0以后版本，不再支持查询缓存，因为它需要SQL完全相同才能匹配缓存，命中率极低，如果表进行DDL或者DML操作，缓存就会被清空。</li><li><strong>解析器（Parser）</strong>，将客户端发送的SQL进行语法解析，生成”解析树”。预处理器根据一些MySQL规则进一步检查“解析树”是否合法，例如这里将检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义，最后生成新的“解析树”。</li><li><strong>优化器（Optimizer）</strong>，根据“解析树”生成最优的执行计划。MySQL使用很多优化策略生成最优的执行计划，分为两类：静态优化（编译时优化）、动态优化（运行时优化）。</li><li><strong>查询执行引擎负责执行 SQL 语句，得到查询结果并返回给客户端</strong>。若开启用查询缓存，这时会将SQL 语句和结果完整地保存到查询缓存（Cache&amp;Buffer）中，以后如果有相同的 SQL 语句执行则直接返回结果。</li></ul><h3 id="2、存储引擎简介"><a href="#2、存储引擎简介" class="headerlink" title="2、存储引擎简介"></a>2、存储引擎简介</h3><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。<strong>存储引擎是基于表的</strong>，而不是基于库的，所以<strong>存储引擎也可被称为表类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建表时，指定存储引擎(默认为innodb)CREATE TABLE 表名(...) ENGINE &#x3D; INNODB [COMMENT 表注释];-- 查看当前数据库支持的存储引擎SHOW ENGINES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、存储引擎特点"><a href="#3、存储引擎特点" class="headerlink" title="3、存储引擎特点"></a>3、存储引擎特点</h3><p><strong>InnoDB</strong></p><ul><li>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎</li><li><strong>特点：</strong><ul><li>DML操作遵循ACID模型，支持事务</li><li>行级锁，提高并发访问性能</li><li>支持外键约束，保证数据的完整性和正确性</li></ul></li><li><strong>文件：</strong><ul><li>xxx.ibd：xxx代表的是表名，innoDB的每张表都会对应这样的表空间文件，<strong>存储该表的表结构（frm、sdi）、数据和索引</strong></li></ul></li><li><strong>逻辑结构：</strong>InnoDB的所有数据都被逻辑地存放在一个空间中，称之为<strong>表空间（tablespace）</strong>。表空间又由<strong>段（segment）</strong>、<strong>区（extent）</strong>、<strong>页（page）</strong>组成，页又由<strong>行（row）</strong>组成<ul><li><strong>段，</strong>常见的段有<strong>数据段、索引段、回滚段</strong>等。InnoDB存储引擎表是索引组织的（index organized），因此数据即索引，索引即数据。那么<strong>数据段即为B+树的叶节点</strong>（leaf node segment），<strong>索引段即为B+树的非索引节点</strong>（non-leaf node segment）。需要注意的是，并不是每个对象都有段。因此更准确地说，<strong>表空间是由分散的页和段组成</strong>。</li><li><strong>区，区是由64个连续的页组成的，每个页大小为16KB，即每个区的大小为1MB</strong>。对于大的数据段，InnoDB存储引擎最多每次可以申请<strong>4个区</strong>，以此来保证数据的顺序性能。</li><li><strong>页，InnoDB有页（page）的概念（也可以称为块），页是InnoDB磁盘管理的最小单位</strong>。与Oracle类似的是，Microsoft SQL Server数据库默认每页大小为8KB，<strong>而InnoDB页的大小（16KB）</strong>，且不可以更改（也许通过更改源码可以）。</li><li><strong>行，</strong>InnoDB存储引擎是面向行的（row-oriented），也就是说数据的存放按行进行存放</li></ul></li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6bit5qKo5bGx5aSn5ZOO,size_20,color_FFFFFF,t_70,g_se,x_16.png"></p><p><strong>MyISAM</strong></p><ul><li>MyISAM是MySQL早期的默认存储引擎</li><li><strong>特点：</strong><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul></li><li><strong>文件：</strong><ul><li>xxx.sdi：存储表结构信息</li><li>xxx.MYD：存储数据</li><li>xxx.MYI：存储索引</li></ul></li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220705224010234.png"></p><h3 id="4、存储引擎选择"><a href="#4、存储引擎选择" class="headerlink" title="4、存储引擎选择"></a>4、存储引擎选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合</p><ul><li><strong>InnoDB：</strong>是MySQL的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包括很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择</li><li><strong>MyISAM：</strong>如果应用时以读操作和插入操作为主，只有很少的更新和删除操作，且对事务的完整性、并发性要求不是很高，那么选择它</li><li><strong>MENORY：</strong>将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MENORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，且无法保障数据的安全性</li></ul><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><h3 id="1、索引概述"><a href="#1、索引概述" class="headerlink" title="1、索引概述"></a>1、索引概述</h3><p><strong>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。</strong>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><ul><li><strong>优点</strong><ul><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul></li><li><strong>劣势</strong><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，同时缺降低了更新表的速度，如对表进行增删改时，效率降低</li></ul></li></ul><h3 id="2、索引结构"><a href="#2、索引结构" class="headerlink" title="2、索引结构"></a>2、索引结构</h3><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的机构，主要包含以下几种：</p><ul><li><strong>B+Tree索引：最常见的索引类型，大部分引擎都支持B+树索引</strong></li><li><strong>Hash索引：</strong>底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li><li><strong>R-tree（空间索引）：</strong>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li><li><strong>Full-text（全文索引）：</strong>是一种通过建立倒排索引，快速匹配文档的方式，类似于Lucene，Solr，ES</li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706222334834.png"></p><p><strong>结构对比</strong></p><ul><li><p><strong>二叉树缺点：</strong>顺序插入时，会形成一个链表，查询性能大大降低。大数据量情况下，层级较深，检索速度慢</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706222847887.png"></p></li><li><p><strong>红黑树缺点：</strong>通过红黑树（自平衡）解决树的平衡问题，但大数据量情况下，层级较深，检索速度慢</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706223207461.png"></p></li><li><p><strong>BTree（多路平衡查找树）</strong></p><ul><li><p>以一棵最大度数为5的BTree为例（最多4个key，5个指针）</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706223516955.png"></p></li><li><p>树的度数指的是一个节点的子节点个数</p></li></ul></li><li><p><strong>B+Tree</strong></p><ul><li><p>以一棵最大度数为4的b+tree为例</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706224153054.png"></p></li><li><p><strong>所有数据都会出现在叶子节点；叶子节点形成一个单向链表</strong></p></li></ul></li></ul><p><strong>B+Tree</strong></p><p>MySQL索引数据结构对经典的B+Tree进行了优化，在原B+Tree的基础上，<strong>增加一个指向相邻叶子节点的链表指针</strong>，就形成了带有顺序指针的B+Tree，提高区间访问的性能</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706224752381.png"></p><p><strong>Hash</strong></p><ul><li>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</li><li>如果两个（或多个）键值，映射到一个相同的槽位上，就产生了hash冲突（也称为hash碰撞），可以通过链表来解决</li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706225207265.png"></p><ul><li><strong>特点</strong><ol><li>Hash索引只能用于对等比较（=，in），不支持范围查询（between，&gt;，&lt;…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于B+Tree索引</li></ol></li><li>存储引擎支持，在MySQL中支持hash索引的是Memory引擎，而InnoDB中具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的。</li></ul><p><strong>为什么InnoDB存储引擎选择使用B+Tree索引结构？</strong></p><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于B-Tree，无论是叶子节点，还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对Hash索引，B+Tree支持范围匹配及排序操作</li></ul><h3 id="3、索引分类"><a href="#3、索引分类" class="headerlink" title="3、索引分类"></a>3、索引分类</h3><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706230203697.png"></p><p>在InnoDB存储引擎中，根据索引的存储方式，又可以分为以下两种：</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706230402611.png"></p><p><strong>聚集索引选取规则：</strong></p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一索引作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706230805141.png"></p><p><strong>回表查询</strong></p><p>先到二级索引找数据，再到聚集索引找数据</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220706231000310.png"></p><h3 id="4、索引语法"><a href="#4、索引语法" class="headerlink" title="4、索引语法"></a>4、索引语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建索引CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name (index_col_name,...);-- 查看索引SHOW INDEX FROM table_name;-- 删除索引DROP INDEX index_name ON table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、SQL性能分析"><a href="#5、SQL性能分析" class="headerlink" title="5、SQL性能分析"></a>5、SQL性能分析</h3><p><strong>SQL执行频率</strong></p><p>MySQL客户端连接成功后，可以通过命令提供服务器状态信息。通过如下指令，可以查看当前数据库增删查改的访问频次</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>慢查询日志</strong></p><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志</p><p>MySQL的<strong>慢查询日志默认没有开启</strong>，需要在MySQL的<strong>配置文件（/etc/my.cnf）</strong>配置信息：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启慢查询日志开关slow_query_log &#x3D; 1# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志long_query_time &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更改后，记得重启MySQL，Linux中慢查询日志文件在**/var/lib/mysql/localhost-slow.log**</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看慢查询日志开关状态：show variables like &#39;slow_query_log&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>profile详情</strong></p><p>show profiles 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT @@have_profiling;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET profiling &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行一系列的SQL操作后，可以通过如下指令查看指令的执行耗时</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看所有语句的耗时show profiles;# 查看指定query_id的SQL语句各个阶段的耗时show profile for query query_id;# 查看指定query_id的SQL语句CPU的使用情况show profile cpu for query query_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>explain执行计划</strong></p><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 直接在select语句之前加上关键字 explain &#x2F; descEXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220707095601380.png"></p><p><strong>EXPLAIN 各字段含义：</strong></p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（<strong>id相同，执行顺序从上到下；id不同，值越大越先执行</strong>）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const（用主键和唯一索引）、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h3 id="6、索引使用"><a href="#6、索引使用" class="headerlink" title="6、索引使用"></a>6、索引使用</h3><p><strong>最左前缀法则</strong></p><ul><li>如果索引关联了多列（<strong>联合索引</strong>），要<strong>遵守最左前缀法则</strong>，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。</li><li><strong>如果跳跃某一列，索引将部分失效（后面的字段索引失效）</strong>。</li><li>语句中有就可以，没有特别强调顺序</li></ul><p><strong>范围查询</strong></p><ul><li>联合索引中，出现范围查询（&lt;, &gt;），<strong>范围查询右侧的列索引失效</strong>。可以<strong>用&gt;=或者&lt;=来规避索引失效问题</strong>。</li></ul><p><strong>索引失效情况</strong></p><ol><li><p>在索引列上进行运算操作，索引将失效。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from tb_user where substring(phone, 10, 2) &#x3D; &#39;15&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串类型字段使用时，不加引号，索引将失效。如：phone的值没有加引号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from tb_user where phone &#x3D; 17799990015;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from tb_user where profession like &#39;%工程&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>前后都有 % 也会失效</strong></p></li><li><p>用 or 分割开的条件，如果 <strong>or 其中一个条件的列没有索引</strong>，那么涉及的索引都不会被用到。</p></li><li><p>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</p></li></ol><p><strong>SQL提示</strong></p><p>SQL提示是优化数据库的一个重要手段，简单来说，就是<strong>在SQL语句中加入一些人为的提示来达到优化操作的目的</strong>。如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用索引explain select * from tb_user use index(idx_user_pro) where profession&#x3D;&quot;软件工程&quot;;# 不使用哪个索引explain select * from tb_user ignore index(idx_user_pro) where profession&#x3D;&quot;软件工程&quot;;# 必须使用哪个索引explain select * from tb_user force index(idx_user_pro) where profession&#x3D;&quot;软件工程&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>use 是建议</strong>，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，<strong>force就是无论如何都强制使用该索引</strong>。</p><p><strong>覆盖索引</strong></p><p>尽量使用覆盖索引（<strong>查询使用了索引，并且需要返回的列，在该索引中已经全部能找到</strong>），减少 select *。</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是<code>select *</code>；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p><strong>PS：</strong>在EXPLAIN执行计划表中，extra中</p><ul><li>using index condition：查找使用了索引，但需要回表查询数据</li><li>using where；using index：查找使用了索引，但需要的数据在索引列中能找到，所以不需要回表查询数据</li></ul><p><strong>面试题：</strong>一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p><strong>解：</strong>给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><p><strong>前缀索引</strong></p><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index idx_xxxx on table_name(columnn(n));-- n为前缀长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前缀长度：可以根据索引的选择性来决定，而<strong>选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高</strong>，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct email) &#x2F; count(*) from tb_user;select count(distinct substring(email, 1, 5)) &#x2F; count(*) from tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>show index 里面的sub_part可以看到接取的长度</p><p><strong>单列索引&amp;联合索引</strong></p><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引</p><p><strong>注意事项</strong></p><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="7、索引设计原则"><a href="#7、索引设计原则" class="headerlink" title="7、索引设计原则"></a>7、索引设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li><strong>尽量使用联合索引，减少单列索引</strong>，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li><strong>要控制索引的数量</strong>，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="三、SQL优化"><a href="#三、SQL优化" class="headerlink" title="三、SQL优化"></a>三、SQL优化</h2><h3 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h3><p><strong>普通插入优化：</strong></p><ol><li><p>采用批量插入（一次插入的数据不建议超过1000条）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 values (数据),(数据),(数据)..;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>手动提交事务</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction;insert into 表名 values (数据),(数据),(数据)..;insert into 表名 values (数据),(数据),(数据)..;commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主键顺序插入</p></li></ol><p><strong>大批量插入：</strong><br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的<strong>load指令插入</strong>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash&#x2F;cmd界面输入）mysql --local-infile -u root -p# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关set global local_infile &#x3D; 1;# 执行load指令将准备好的数据，加载到表结构中load data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into table &#39;tb_user&#39; fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、主键优化"><a href="#2、主键优化" class="headerlink" title="2、主键优化"></a>2、主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为<strong>索引组织表</strong>（Index organized table, IOT）</p><p><strong>页分裂</strong>：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），<strong>根据主键排列</strong>。<br><strong>页合并</strong>：当删除一行记录时，实际上<strong>记录并没有被物理删除</strong>，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p><strong>MERGE_THRESHOLD：</strong>合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><p><strong>主键设计原则：</strong></p><ul><li>满足业务需求的情况下，<strong>尽量降低主键的长度</strong></li><li>插入数据时，尽量选择<strong>顺序插入</strong>，选择使用 <strong>AUTO_INCREMENT 自增主键</strong></li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，<strong>避免对主键的修改</strong></li></ul><h3 id="3、order-by优化"><a href="#3、order-by优化" class="headerlink" title="3、order by优化"></a>3、order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段<strong>全部使用升序排序或者降序排序，则都会走索引</strong>，但是如果<strong>一个字段升序排序，另一个字段降序排序，则不会走索引</strong>，这时explain的extra信息显示的是<code>Using index, Using filesort</code>如果要优化掉Using filesort，则需要另外再创建一个索引，如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 增加升降序规则create index idx_user_age_phone_ad on tb_user(age asc, phone desc);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select id, age, phone from tb_user order by age asc, phone desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会全部走索引</p><p><strong>总结：</strong></p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以<strong>适当增大排序缓冲区大小 sort_buffer_size</strong>（默认256k）</li></ul><h3 id="4、group-by优化"><a href="#4、group-by优化" class="headerlink" title="4、group by优化"></a>4、group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code></p><p>则句式可以是<code>select ... where profession order by age</code></p><p>这样也符合最左前缀法则</p><h3 id="5、limit优化"><a href="#5、limit优化" class="headerlink" title="5、limit优化"></a>5、limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br><strong>优化方案：</strong>一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过<strong>覆盖索引加子查询形式进行优化</strong></p><p>例如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 此语句耗时很长select * from tb_sku limit 9000000, 10;-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询select id from tb_sku order by id limit 9000000, 10;-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度select s.* from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id &#x3D; a.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、count优化"><a href="#6、count优化" class="headerlink" title="6、count优化"></a>6、count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br><strong>优化方案：</strong>自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p><strong>count的几种用法：</strong></p><ul><li><p>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</p></li><li><p>用法：count(*)、count(主键)、count(字段)、count(1)</p><ul><li><p>count(主键)跟count(*)一样，因为主键不能为空</p></li><li><p>count(字段)只计算字段值不为NULL的行</p></li><li><p>count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样</p></li><li><p>count(null)返回0</p></li></ul></li></ul><p><strong>各种用法的性能：</strong></p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：<ul><li><strong>没有not null约束的话</strong>，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加</li><li><strong>有not null约束的话</strong>，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li></ul></li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p><strong>按效率排序：</strong>count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="7、update优化（避免行锁升级为表锁）"><a href="#7、update优化（避免行锁升级为表锁）" class="headerlink" title="7、update优化（避免行锁升级为表锁）"></a>7、update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update student set no &#x3D; &#39;123&#39; where id &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句由于id有主键索引，所以只会锁这一行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update student set no &#x3D; &#39;123&#39; where name &#x3D; &#39;test&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句由于name没有索引，所以会把整张表都锁住进行数据更新，<strong>解决方法是给name字段添加索引</strong></p><h2 id="四、视图-存储过程-触发器"><a href="#四、视图-存储过程-触发器" class="headerlink" title="四、视图/存储过程/触发器"></a>四、视图/存储过程/触发器</h2><h3 id="1、视图"><a href="#1、视图" class="headerlink" title="1、视图"></a>1、视图</h3><p>视图（View）是一种虚拟存在的表。视图中的数据并<strong>不在数据库中实际存在</strong>，行和列数据来自定义视图的查询中使用的表，并且在使用视图时动态生成的</p><p>通俗的讲，视图值保存了查询的SQL逻辑，不保存查询结果，所以在创建视图时，主要工作就落在创建这条SQL查询语句上</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION]# 查询-- 查询创建视图语句SHOW CREATE VIEW 视图名称;-- 查询视图数据SELECT * FROM 视图名称...;# 修改-- 方式一CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION]-- 方式二ALTER VIEW 视图名称[(列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION]# 删除DROP VIEW [IF EXISTS] 视图名称,[视图名称]...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>视图的检查选项</strong></p><p>当使用<code>WITH CHECK OPTION</code>子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如增删改，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，还会<strong>检查依赖视图中的规则以保持一致性</strong>。为了确定检查的范围，MySQL提供了两个选项：<code>CASCADED | LOCAL</code>，默认值为<code>CASCADED</code></p><p><strong>CASCADED</strong></p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220707232802050.png"></p><p>如上图，stu_v_2是基于stu_v_1创建的，而stu_v_2使用了<code>WITH CHECK OPTION</code>子句创建，所以，最后两句都运行失败，最后一句失败的原因是，它不满足stu_v_1中的条件。</p><p>统一说，v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 cascaded，<strong>但是v1视图创建时未指定检查选项</strong>。 则在执行检查时，不仅会检查v2，<strong>还会级联检查v2的关联视图v1</strong></p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220707233235094.png"></p><p><strong>LOCAL</strong></p><p>v2视图是基于v1视图的，如果在v2视图创建的时候指定了检查选项为 local ，<strong>但是v1视图创建时未指定检查选项</strong>。 则在执行检查时，<strong>只会检查v2</strong>，不会检查v2的关联视图v1</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220707233658366.png"></p><p><strong>视图的更新</strong></p><p>要使视图可更新，<strong>视图中的行与基础表中的行之间必须存在一对一的关系</strong>。如果视图包含以下任何一项，则该视图不可更新：</p><ol><li>聚合函数或窗口函数（SUM()、MIN()、MAX()、COUNT()等）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION或者UNION ALL</li></ol><p><strong>作用</strong></p><ul><li><strong>简单</strong>：视图不仅可以简化用户对数据的理解，也可以简化操作。被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部条件</li><li><strong>安全</strong>：数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</li><li><strong>数据独立</strong>：视图可帮助用户屏蔽真实表结构变化带来的影响</li></ul><h3 id="2、存储过程"><a href="#2、存储过程" class="headerlink" title="2、存储过程"></a>2、存储过程</h3><p> 存储过程是实现经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用</p><p><strong>特点</strong></p><ul><li>封装，复用</li><li>可以接受参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建CREATE PROCEDURE 存储过程名称([参数列表])BEGINSQL语句END;-- 调用CALL 名称([参数]);-- 查看# 查询指定数据库的存储过程及状态SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA&#x3D;&#39;xxx&#39;;# 查询某个存储过程的定义SHOW CREATE PROCEDURE 存储过程名称;-- 删除DROP PROCEDURE [IF EXISTS] 存储过程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：在命令行中</strong>，执行创建存储过程的SQL时，需要通过关键字<code>delimiter</code>指定SQL语句的结束符</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 标准格式# 指定结束符delimiter $$# 创建存储过程create procedure p1()beginselect count(*) from student;end$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量</strong></p><ul><li><p><strong>系统变量：</strong>是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量（SESSION）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查看系统变量（没有指定。默认session级别）# 查看全部变量show [session|global] variables;# 模糊查看show [session|global] variables like &#39;auto%&#39;;# 准确查看(autocommit是变量名)select @@[session|global]autocommit;-- 设置系统变量set [session|global] 系统变量名 &#x3D; 值;set [session|global]系统变量名 &#x3D; 值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>用户定义变量：</strong>是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用<code>&quot;@变量名&quot;</code>使用就可以。其作用域为当前连接</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 赋值(推荐使用:&#x3D;)set @var_name &#x3D; expr[, @var_name &#x3D; expr]..;set @var_name :&#x3D; expr[, @var_name :&#x3D; expr]..;select @var_name :&#x3D; expr[, @var_name :&#x3D; expr]..;select 字段名 into @var_name from 表名;-- 使用select @var_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>局部变量：</strong>是根据需要定义的在局部生效的变量，访问之前，需要<code>DECLARE</code>声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的<code>BEGIN...END</code>块</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 声明declare 变量名 变量类型[default...];# 变量类型就是数据库字段类型：int、bigint、char、date、time等-- 赋值set 变量名 &#x3D; 值;set 变量名 :&#x3D; 值;select 字段名 into 变量名 from 表名...;-- 例子create procedure p2()begindeclare stu_count int default 0;select count(*) into stu_count from student;select stu_count;end;call p2();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>if</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">if 条件1 then...elseif 条件2 then# 可选...else # 可选...end if;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数</strong></p><table><thead><tr><th align="center">类型</th><th align="center">含义</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">该类参数作为输入，也就是需要调用时传入值</td><td align="center">默认</td></tr><tr><td align="center">out</td><td align="center">该类参数作为输出，也就是该参数可以作为返回值</td><td align="center"></td></tr><tr><td align="center">inout</td><td align="center">既可以作为输入参数，也可以作为输出参数</td><td align="center"></td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE PROCEDURE 存储过程名称([in&#x2F;out&#x2F;inout 参数名 参数类型])BEGINSQL语句END;-- 例子create procedure p3(in score int, out result varchar(10));beginif score &gt;&#x3D; 85 thenset result :&#x3D; &#39;优秀&#39;;elseif score &gt;&#x3D; 60 thenset result :&#x3D; &#39;及格&#39;;else set result :&#x3D; &#39;不及格&#39;;end if;end;call p3(68, @result);select @result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>case</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法一case case_valuewhen when_value1 then statement_list1[when when_value2 then statement_list2..][else statement_list]end case;-- 语法二case when search_contion1 then statement_list1[when search_contion2 then statement_list2..][else statement_list]end case;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>while</strong></p><p>while循环是有条件的循环控制语句。满足条件后，再执行循环体重的SQL语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 先判定条件，如果条件为true，则执行逻辑，否则不执行逻辑while 条件 dosql逻辑..end while;-- 例子create procedure p(in n int)begindeclare total int default 0;while n&gt;0 doset total :&#x3D; total+n;set n :&#x3D; n-1;end while;select total;end;call p(10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>repeat</strong></p><p>repeat是有条件的循环控制语句，当满足条件的时候退出循环</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出，如果不满足，则继续循环repeatsql逻辑...until 条件end repeat;-- 例子create procedure p(in n int)begindeclare total int default 0;repeatset total :&#x3D; total+n;set n :&#x3D; n-1;until n&lt;&#x3D;0end while;select total;end;call p(10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>loop</strong></p><p>loop实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。loop可以配合以下两个语句使用</p><ul><li>leave：配合循环使用，退出循环</li><li>iterate：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下次循环</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[begin_label] loopsql逻辑..end loop [end_label];leave label; # 退出指定标记的循环体iterate label; # 直接进入下一次循环-- 例子，只累加奇数create procedure p(in n int)begindeclare total int default 0;sum:loopif n&lt;&#x3D;0 thenleave sum;end if;if n%2 &#x3D; 1 thenset n :&#x3D; n-1;iterate sum;end if;set total :&#x3D; total+n;set n :&#x3D; n-1;end loop sum;select total;end;call p(10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>游标（cursor）</strong></p><p>游标是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、open、fetch和close</p><p><strong>条件处理程序</strong></p><p><strong>条件处理程序（Handler）</strong>可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 声明游标declare 游标名称 cursor for 查询语句;# 打开游标open 游标名称;# 获取游标记录fetch 游标名称 into 变量[,变量];# 关闭游标close 游标名称;# 声明条件处理declare hander_action handler for condition_value[,condition_value].. statement;hander_action1、continue：继续执行当前程序2、exit：终止执行当前程序condition_value1、sqlstate sqlstate_value：状态码，如020002、sqlwarning：所有以01开头的sqlstate代码的简写3、not found：所有以02开头的sqlstate代码的简写4、sqlexception：所有没有被2和3捕获的sqlstate代码的简写-- 例子create procedure p(in uage int)begin# 游标声明需要变量后declare uname varchar(100);declare upro varchar(100);declare u_cursor cursor for select name,profession for tb_user where age &lt;&#x3D; uage;declare exit handler for sqlstate &#39;02000&#39; close u_cursor;create table if not exists tb_user_pro(    id int primary key auto_increment,        name varchar(100),        profession varchar(100)    );        open u_cursor;    while true do    fetch u_cursor into uname,uprol    insert into tb_user_pro values(null, uname, upro);    end while;close u_cursor;end;call p(40);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、存储函数"><a href="#3、存储函数" class="headerlink" title="3、存储函数"></a>3、存储函数</h3><p>存储函数是有返回值的存储过程，存储函数的参数只能是in类型</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE FUNCTION 函数([参数类型 数据类型[,….]]) RETURNS type [characteristic...]BEGINSQL语句.....  RETURN (返回的数据)END;-- 1-n的累加create function fun(n int)returns int deterministicbegindeclare total int default 0;while n&gt;0 doset total :&#x3D; total+n;set n :&#x3D; n-1;end while;return total;end;select fun(100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>characteristic说明</strong></p><ul><li>deterministic：相同的输入参数总是产生相同的结果</li><li>no sql：不包含sql语句</li><li>reads sql data：包含读取数据的语句，但不包含写入数据的语句</li></ul><h3 id="4、触发器"><a href="#4、触发器" class="headerlink" title="4、触发器"></a>4、触发器</h3><p><strong>介绍</strong></p><p>触发器是与表有关的数据库对象，指<strong>在insert/update/delete之前或之后</strong>，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名<code>OLD</code>和<code>NEW</code>来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th align="center">触发器类型</th><th align="center">NEW和OLD</th></tr></thead><tbody><tr><td align="center">INSERT型触发器</td><td align="center">NEW表示将要或者已经新增的数据</td></tr><tr><td align="center">UPDATE型触发器</td><td align="center">OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</td></tr><tr><td align="center">DELETE型触发器</td><td align="center">OLD表示将要或已经删除的数据</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建create trigger trigger_namebefore|after insert|update|deleteon tbl_name for each row -- 行级触发器begintrigger_stmt;end;# 查看show triggers;# 删除drop trigger [schema_name.]trigger_name;-- 如果没有指定schema_name，默认为当前数据库-- 需求：通过触发器记录tb_user表的数据变更日志，将变更日志插入到日志表user_log中，包含增加、修改、删除# 插入触发器create trigger tb_user_insert_triggerafter insert on tb_user for each rowbegininsert into user_log(id, operation, op_time, op_id, op_params) values (null, &#39;insert&#39;, now(), new.id, concat(&#39;插入：id&#x3D;&#39;, new.id, &#39;,name&#x3D;&#39;, new.name));end;# 更新触发器create trigger tb_user_update_triggerafter update on tb_user for each rowbegininsert into user_log(id, operation, op_time, op_id, op_params) values (null, &#39;update&#39;, now(), new.id,      concat(&#39;更新前：id&#x3D;&#39;, old.id, &#39;,name&#x3D;&#39;, old.name,             &#39;| 更新后：id&#x3D;&#39;, new.id, &#39;,name&#x3D;&#39;, new.name));end;# 删除触发器create trigger tb_user_delete_triggerafter delete on tb_user for each rowbegininsert into user_log(id, operation, op_time, op_id, op_params) values (null, &#39;delete&#39;, now(), old.id, concat(&#39;删除：id&#x3D;&#39;, old.id, &#39;,name&#x3D;&#39;, old.name));end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、锁"><a href="#五、锁" class="headerlink" title="五、锁"></a>五、锁</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤为重要，也更加复杂。</p><h3 id="1、全局锁"><a href="#1、全局锁" class="headerlink" title="1、全局锁"></a>1、全局锁</h3><p><strong>全局锁</strong>：锁定数据库中的所有表，对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，以及更新操作的事务提交语句都将被阻塞。</p><p>典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 加全局锁flush tables with read lock;# 数据备份(要到win的命令行写，mysql命令行会报错)mysqldump -h 远程电脑ip -u 用户名 -p 用户密码 原数据库名 &gt; 存储的sql文件名.sql# 解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><p>数据库中加全局锁，是个比较重的操作，存在以下问题：</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟</li></ol><p>在InnoDB引擎中，可以在备份时加上参数 <code>--single-transaction</code>参数来完成不加锁的一致性数据备份</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqldump --single-transaction -h 远程电脑ip -u 用户名 -p 用户密码 原数据库名 <span class="token operator">></span> 存储的sql文件名.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、表级锁"><a href="#2、表级锁" class="headerlink" title="2、表级锁"></a>2、表级锁</h3><p><strong>表级锁</strong>：每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中</p><p><strong>分类</strong></p><ul><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ul><p><strong>表锁</strong></p><ol><li>表共享读锁（read lock），加锁后，当前客户端只能读不能写，其他客户端也可以读，但不能写</li><li>表独占写锁（write lock），加锁后，只允许当前客户端读写，其他客户端不能读写</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 加锁lock tables 表名.. read|write;# 释放锁unlock tables;     # 或者客户端连接关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>元数据锁</strong></p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与DDL冲突，保证读写的正确性</strong></p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁（共享）；当对表结构进行变更操作的时候，加MDL写锁（排他）</p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220713104135843.png" alt="3"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看元数据锁select * from performance_schema.metadata_locks;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>意向锁</strong></p><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，<strong>使用意向锁来减少表锁的检查</strong></p><ol><li>意向共享锁（IS）：由语句<code>select ... lock in share mode</code> 添加，与表锁共享锁兼容，与表锁排它锁互斥</li><li>意向排他锁（IX）：由insert、update、delete、select … for update添加，与表锁都互斥。<strong>意向锁之间不会互斥</strong></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 同样也可以看意向锁select * from performance_schema.metadata_locks;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、行级锁"><a href="#3、行级锁" class="headerlink" title="3、行级锁"></a>3、行级锁</h3><p><strong>行级锁</strong>：每次操作锁住对应的行数据，锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，<strong>行锁是通过对索引是哪个的索引项加锁实现的</strong>，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ol><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持</li><li>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下支持</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持</li></ol><p><strong>行锁</strong></p><p>InnoDB实现两种类型的行锁</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获取相同数据集的排它锁</li><li>排它锁（X）：允许获取排它锁的事务更新数据，阻止其他事务获得同样的数据集的共享锁和排它锁</li></ul><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220713111027555.png"></p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220713111107344.png"></p><p>默认情况下，InnoDB在RR事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读</p><ol><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</li><li>InnoDB的行锁是针对索引加的锁，不通过索引条件检索数据，那InnoDB将对表中的所有记录加锁，此时会升级为表锁</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 同样也可以看行级锁select * from performance_schema.metadata_locks;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>间隙锁&amp;临键锁</strong></p><p>默认情况下，InnoDB在RR事务隔离级别运行，InnoDB使用next-key锁进行搜索和索引扫描，以防止幻读</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock退化为间隙锁</li><li>索引上的范围查询（唯一索引）–会访问到不满足条件的第一个值为止</li></ol><p><strong>注意：</strong>间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁</p><h2 id="六、InnoDB引擎"><a href="#六、InnoDB引擎" class="headerlink" title="六、InnoDB引擎"></a>六、InnoDB引擎</h2><h3 id="1、逻辑存储结构"><a href="#1、逻辑存储结构" class="headerlink" title="1、逻辑存储结构"></a>1、逻辑存储结构</h3><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220713164548684.png"></p><p>重点讲行中的元素</p><p><strong>Trx_id：</strong>每次对某条记录进行改动时，都会把对应的事务id复制给trx_id隐藏列</p><p><strong>Roll_pointer：</strong>每次对某条记录进行改动时，都会把旧的版本写入undo日志红中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息</p><h3 id="2、架构"><a href="#2、架构" class="headerlink" title="2、架构"></a>2、架构</h3><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Vhcmx5X29yX2xhdGVy,size_16,color_FFFFFF,t_70.png"></p><p><strong>内存架构</strong></p><ul><li><p><strong>Buffer Pool：</strong>缓冲池是主内存这种的一个区域，可以缓存磁盘中经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘中加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</p><p>缓冲池以Page页为单位，底层采用链表数据结构管理Page，根据状态，分三类：</p><ul><li>free page：空闲page，未被使用</li><li>clean page：被使用page，数据没有被修改过</li><li>dirty page：脏页，被使用page，数据被修改过，页中数据与磁盘的数据发生不一致</li></ul><blockquote><p><strong>mysql的LRU算法:</strong></p><p> 普通的LRU：</p><p>1、新数据插入到链表头部;<br>2、每当缓存命中（即缓存数据被访问），则将数据移到链表头部；<br>3、当链表满的时候，将链表尾部的数据丢弃。<br> <strong>mysql改进的LRU：</strong></p><p>  1、buffer pool 分为了young（5/8）和old（5/3）两个部分<br>  2、数据会在用户的sql用到了页中的数据，或者mysql猜测你很可能会用到的数据-预读，这两种情况加载到buffer pool<br>  3、数据优先进入old，old满了会移出队列尾部。young区呢？ 用户sql使用的页，会被移入young（且需要在old中待满配置的秒数）。而预读的数据，没被使用则会一直在old区，直到被清除<br><strong>问题： 当一次大表扫描，会导致大量数进入young？</strong> </p><p><strong>解决：</strong>mysql防止一次扫描数据过大，替换了大量热数据，有参数控制 innodb_old_blocks_time(需要在old区待满多少秒，且再被用户sql调用时，才会进入young)。</p></blockquote></li><li><p><strong>Change Buffer：</strong>更改缓冲区（针对与<strong>非唯一二级索引页</strong>），在执行DML语句时，如果这些数据page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更存在更改缓冲区中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到表盘中</p></li><li><p><strong>Adaptive Hash Index：</strong>自适应hash索引，用于优化对Buffer Pool数据的查询。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到hash索引可以提升速度，则建立hash索引，称之谓自适应hash索引。</p><p><strong>自适应哈希索引，无需人工干预，是系统根据情况自动完成</strong></p></li><li><p><strong>Log Buffer：</strong>日志缓冲区，用来保存要写入到磁盘中的log日志数据（redo log、undo log），默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除多行的事务，增加日志缓冲区的大小可以节省磁盘I/O</p><p><strong>参数：</strong></p><ul><li>innodb_log_buffer_size：缓冲区大小</li><li>innodb_flush_log_at_trx_commit：日志刷新到磁盘的时机</li></ul></li></ul><p><strong>磁盘结构</strong></p><ul><li><p><strong>System Tablespace：</strong>系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。（在MySQL5.x版本中还包含InnoDB数据字典，undolog等）</p><p>参数：innodb_data_file_path</p></li><li><p><strong>File-Per-Table Tablespaces：</strong>每个表的文件表空间包含单个InnoDB表的数据和索引，并存储在文件系统上的单个数据文件中</p><p>参数：innodb_file_per_table</p></li><li><p><strong>General Tablespaces：</strong>通用表空间，需要通过<code>create tablespace</code>语法创建通用表空间，在创建表时，可以指定该表空间</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create tablespace xxxx add datafile &#39;file_name&#39; engine &#x3D; engine_name;# 一般engine_name指定为innodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>Undo Tablespaces：</strong>撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储undo log日志</p></li><li><p><strong>Temporary Tablespaces：</strong>InnoDB使用会话临时表空间和全局临时表空间。存储用户创建的临时表等数据</p></li><li><p><strong>Doublewrite Buffer Files：</strong>双写缓冲区，innoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据</p></li><li><p><strong>Redo Log：</strong>重做日志，是用来实现事务的持久性。该日志文件又两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log），前者是在内存中，后者在磁盘中。当事务提交会把所有修改信息都存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复使用</p></li></ul><p><strong>后台线程</strong></p><ol><li><p><strong>Master Thread：</strong>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中，保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收</p></li><li><p><strong>IO Thread：</strong>在InnoDB存储引擎中大量使用AIO来处理IO请求，而IO Thread主要负责这些IO请求的回调</p><table><thead><tr><th align="center">线程类型</th><th align="center">默认个数</th><th align="center">职责</th></tr></thead><tbody><tr><td align="center">Read thread</td><td align="center">4</td><td align="center">负责读操作</td></tr><tr><td align="center">Write thread</td><td align="center">4</td><td align="center">负责写操作</td></tr><tr><td align="center">Log thread</td><td align="center">1</td><td align="center">负责将日志缓冲区刷新到磁盘</td></tr><tr><td align="center">Insert buffer thread</td><td align="center">1</td><td align="center">负责将写缓冲区内容刷新到磁盘</td></tr></tbody></table></li><li><p><strong>Purge Thread：</strong>主要用于回收事务已经提交了的undo  log，在事务提交之后，undo log可能不用了，就用它来回收</p></li><li><p><strong>Page Cleaner Thread：</strong>协助Master Thread刷新脏页到磁盘的线程，可以减轻Master Thread的工作压力，减少阻塞 </p></li></ol><h3 id="3、事务原理"><a href="#3、事务原理" class="headerlink" title="3、事务原理"></a>3、事务原理</h3><p>事务是一组操作的集合，是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p><p><strong>原子性、一致性、持久性由两个日志redo log（持久性）和undo log（原子性）实现</strong></p><p><strong>隔离性由锁和MVCC机制来实现</strong></p><p><strong>Redo Log</strong></p><p>重做日志，是用来实现事务的持久性。该日志文件又两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log），前者是在内存中，后者在磁盘中。当事务提交会把所有修改信息都存到该日志中，用于在刷新脏页到磁盘时，发生错误时，进行数据恢复使用</p><p><strong>Undo Log</strong></p><p>回滚日志，用于记录数据被修改前的信息，<strong>作用包含两个：提供回滚和MVCC(多版本并发控制)</strong></p><p>undo log和redo log记录物理入职不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚</p><p><strong>Undo log销毁：</strong>undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC</p><p><strong>Undo log存储：</strong>undo log采用段的方式进行管理和记录，存放在前面介绍的rollback segment回滚段中，内部包含1024个undo log segment</p><h3 id="4、MVCC"><a href="#4、MVCC" class="headerlink" title="4、MVCC"></a>4、MVCC</h3><p><strong>基本概念</strong></p><ul><li><strong>当前读：</strong>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于日常操作，如select…lock in share mode（共享锁）、select…for update、update、insert、delete（排它锁）都是一种当前读</li><li><strong>快照读：</strong>简单的select（不加锁）就是快照读。快照读，读取的是记录数据的可见版本，可能是历史数据，不加锁是非阻塞读<ul><li>RC：每次select都会生成一个快照读</li><li>RR：开启事务后第一个select语句才是快照读的地方</li><li>Ser：快照读会退化为当前读</li></ul></li><li><strong>MVCC：</strong>全称Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现还需要依赖于数据库记录中的<strong>三个隐式字段、undo log日志、readView</strong>。</li></ul><p><strong>隐藏字段</strong></p><table><thead><tr><th align="center">隐藏字段</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">DB_TRX_ID</td><td align="center">最近修改事务ID，记录插入这条数据或最后一次修改该记录的事务ID</td></tr><tr><td align="center">DB_ROLL_PTR</td><td align="center">回滚指针，指向这条记录的上个版本，用于配合undo log，指向上一个版本</td></tr><tr><td align="center">DB_ROW_ID</td><td align="center">隐藏主键，如果表结构没有指定主键，会生成该隐藏字段</td></tr></tbody></table><p><strong>Undo Log</strong></p><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p><ul><li><p><strong>当insert的时候</strong>，产生的undo log日志只在回滚时需要，在事务提交后可被<strong>立即删除</strong></p></li><li><p>而<strong>update、delete的时候</strong>，产生的undo log日志不仅在回滚时需要，<strong>在快照读时也需要</strong>，不会立即被删除 </p></li><li><p><strong>undo log版本链</strong></p><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220714093923083.png"></p><p>不同事务或相同事务对同一条记录进行修改，会导致该记录的undo log生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录</p></li></ul><p><strong>ReadView</strong></p><p>ReadView（读视图），是快照读SQL执行时MVCC提取数据额依据，记录并维护系统当前活跃的事务（未提交的）id。</p><p>ReadView中包含了四个核心字段：</p><table><thead><tr><th align="center">字段</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">m_ids</td><td align="center">当前活跃的事务ID集合</td></tr><tr><td align="center">min_trx_id</td><td align="center">最小活跃事务ID</td></tr><tr><td align="center">max_trx_id</td><td align="center">预分配事务ID，当前最大事务ID+1（因为事务是自增的）</td></tr><tr><td align="center">creator_trx_id</td><td align="center">ReadView创建者的事务ID</td></tr></tbody></table><p><img src="/2022/07/13/mysql-zhi-jin-jie-pian/image-20220714095342537.png"></p><p>不同隔离级别，生成的ReadView的时机不同：</p><ul><li>RC：在事务中每一次执行快照读时生成ReadView</li><li>RR：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView</li></ul><h2 id="七、MySQL管理"><a href="#七、MySQL管理" class="headerlink" title="七、MySQL管理"></a>七、MySQL管理</h2><h3 id="1、系统数据库"><a href="#1、系统数据库" class="headerlink" title="1、系统数据库"></a>1、系统数据库</h3><p>MySQL数据库安装完成后，自带了四个数据库</p><table><thead><tr><th align="center">数据库</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">mysql</td><td align="center">存储MySQL服务器正常运行所需要的各种信息（时区，主从、用户、权限等）</td></tr><tr><td align="center">information_schema</td><td align="center">提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td></tr><tr><td align="center">performance_schema</td><td align="center">为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务性能参数</td></tr><tr><td align="center">sys</td><td align="center">包含了一系列方便DBA和开发人员利用performance_schema性能数据库进行性能调优和诊断的视图</td></tr></tbody></table><h3 id="2、常用工具"><a href="#2、常用工具" class="headerlink" title="2、常用工具"></a>2、常用工具</h3><p><strong>mysql</strong></p><p>该mysql不是指mysql服务，而是指mysql的客户端工具</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 语法</span>mysql <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>database<span class="token punctuation">]</span><span class="token comment"># 参数</span>-u, --user<span class="token operator">=</span>name 指定用户名-p, --password<span class="token punctuation">[</span><span class="token operator">=</span>name<span class="token punctuation">]</span> 指定密码-h, --host<span class="token operator">=</span>name 指定服务器IP或域名-P, --port<span class="token operator">=</span><span class="token comment"># 指定连接端口</span><span class="token comment"># 示例</span>mysql - h <span class="token number">127</span>. <span class="token number">0</span>. <span class="token number">0</span>. <span class="token number">1</span> - P <span class="token number">3306</span> - u root - pmysql - h <span class="token number">127</span>. <span class="token number">0</span>. <span class="token number">0</span>. <span class="token number">1</span> - P <span class="token number">3306</span> - uroot - p <span class="token number">2143</span>-e, --execute<span class="token operator">=</span>name  <span class="token comment"># 执行SQL语句并退出</span><span class="token comment"># 此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便</span><span class="token comment"># 示例</span>mysql -uroot -p <span class="token number">2143</span> db01 -e <span class="token string">"select * from tb_book"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqladmin</strong></p><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p><p>可以通过 ： mysqladmin –help 指令查看帮助文档</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 示例</span>mysqladmin -uroot -p <span class="token number">2143</span> create <span class="token string">'test 01 '</span><span class="token punctuation">;</span>mysqladmin -uroot -p <span class="token number">2143</span> drop <span class="token string">'test 01 '</span><span class="token punctuation">;</span>mysqladmin -uroot -p <span class="token number">2143</span> version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqlbinlog</strong></p><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqlbinlog <span class="token punctuation">[</span>options<span class="token punctuation">]</span> log-files1 log-files2 <span class="token punctuation">..</span>.<span class="token comment"># 选项</span>-d, --database<span class="token operator">=</span>name <span class="token builtin class-name">:</span> 指定数据库名称，只列出指定的数据库相关操作。-o, --offset<span class="token operator">=</span><span class="token comment"># : 忽略掉日志中的前n行命令。</span>-r,--result-file<span class="token operator">=</span>name <span class="token builtin class-name">:</span> 将输出的文本格式日志输出到指定文件。-s, --short-form <span class="token builtin class-name">:</span> 显示简单格式， 省略掉一些信息。--start-datatime<span class="token operator">=</span>date1 --stop-datetime<span class="token operator">=</span>date2 <span class="token builtin class-name">:</span> 指定日期间隔内的所有日志。--start-position<span class="token operator">=</span>pos1 --stop-position<span class="token operator">=</span>pos2 <span class="token builtin class-name">:</span> 指定位置间隔内的所有日志。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqldump</strong></p><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 语法</span>mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> db_name <span class="token punctuation">[</span>tables<span class="token punctuation">]</span>mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> --database/-B db1 <span class="token punctuation">[</span>db2 db3<span class="token punctuation">..</span>.<span class="token punctuation">]</span>mysqldump <span class="token punctuation">[</span>options<span class="token punctuation">]</span> --all-databases/-A<span class="token comment"># 连接选项</span><span class="token comment"># 参数</span>-u, --user<span class="token operator">=</span>name 指定用户名-p, --password<span class="token punctuation">[</span><span class="token operator">=</span>name<span class="token punctuation">]</span> 指定密码-h, --host<span class="token operator">=</span>name 指定服务器IP或域名-P, --port<span class="token operator">=</span><span class="token comment"># 指定连接端口</span><span class="token comment"># 输出内容选项</span><span class="token comment"># 参数</span>--add-drop-database 在每个数据库创建语句前加上 Drop database 语句--add-drop-table 在每个表创建语句前加上 Drop table 语句 , 默认开启 <span class="token punctuation">;</span> 不开启 <span class="token punctuation">(</span>--skip-add-drop-table<span class="token punctuation">)</span>-n, --no-create-db 不包含数据库的创建语句-t, --no-create-info 不包含数据表的创建语句-d --no-data 不包含数据-T, --tab<span class="token operator">=</span>name 自动生成两个文件：一个.sql文件，创建表结构的语句；一个.txt文件，数据文件，相当于select into outfile<span class="token comment"># 示例</span>mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table <span class="token operator">></span> amysqldump -uroot -p2143 -T /tmp <span class="token builtin class-name">test</span> city<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqlimport/source</strong></p><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 语法</span>mysqlimport <span class="token punctuation">[</span>options<span class="token punctuation">]</span> db_name textfile1 <span class="token punctuation">[</span>textfile2<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 示例</span>mysqlimport -uroot -p2143 <span class="token builtin class-name">test</span> /tmp/city.txt<span class="token comment"># 如果需要导入sql文件,可以使用mysql中的source 指令</span><span class="token builtin class-name">source</span> /root/tb_book.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mysqlshow</strong></p><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 语法</span>mysqlshow <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>db_name <span class="token punctuation">[</span>table_name <span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 参数</span>--count 显示数据库及表的统计信息（数据库，表 均可以不指定）-i 显示指定数据库或者指定表的状态信息<span class="token comment"># 示例</span><span class="token comment">#查询每个数据库的表的数量及表中记录的数量</span>mysqlshow -uroot -p2143 --count<span class="token comment">#查询test库中每个表中的字段书，及行数</span>mysqlshow -uroot -p2143 <span class="token builtin class-name">test</span> --count<span class="token comment">#查询test库中book表的详细情况</span>mysqlshow -uroot -p2143 <span class="token builtin class-name">test</span> book --count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为机考刷题日常</title>
      <link href="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/"/>
      <url>/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p>本文用来记录华为机考一些练习题刷题经验</p><h2 id="1、滑动窗口的平均值"><a href="#1、滑动窗口的平均值" class="headerlink" title="1、滑动窗口的平均值"></a>1、滑动窗口的平均值</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220701191032804.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MovingAverage</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 总数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token comment">// 元素个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> elementSize<span class="token punctuation">;</span>    <span class="token comment">// 数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 根据 size 新建数组</span>    <span class="token keyword">public</span> <span class="token class-name">MovingAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 每一次 next，+1</span>        elementSize<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 计算和</span>        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>        <span class="token comment">// 如果传入的值多于窗口值，那么将前面的值去除</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>elementSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>elementSize <span class="token operator">></span> temp<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">-=</span> temp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 多出的值代替</span>        temp<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span>elementSize <span class="token operator">></span> temp<span class="token punctuation">.</span>length <span class="token operator">?</span> temp<span class="token punctuation">.</span>length <span class="token operator">:</span> elementSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、分糖果"><a href="#2、分糖果" class="headerlink" title="2、分糖果"></a>2、分糖果</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220701202932284.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 暴力解法</span><span class="token comment">// 有两个限制，一个是若独特的糖果多于n/2，那么最后Alice拿到的的糖的个数就是n/2，如果没有，那么就是独特的糖果的数量</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candyType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candyType<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> candyType<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> candyType<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>candyType<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> candyType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    candyType<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用set集合，不能重复元素</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candyType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> candy <span class="token operator">:</span> candyType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> candyType<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、正则表达式匹配"><a href="#3、正则表达式匹配" class="headerlink" title="3、正则表达式匹配"></a>3、正则表达式匹配</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220701204805897.png"></p><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220701214851710.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化首行</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">;</span>    <span class="token comment">// 状态转移</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                            <span class="token comment">// 1.</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 2.</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment">// 3.</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 1.</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment">// 2.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、最长递增子序列"><a href="#4、最长递增子序列" class="headerlink" title="4、最长递增子序列"></a>4、最长递增子序列</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220701221420603.png"></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public int lengthOfLIS(int[] nums) &#123;    &#x2F;&#x2F; 另起一个数组int[] tails &#x3D; new int[nums.length];    &#x2F;&#x2F; 记录结果    int res &#x3D; 0;        for(int num : nums)&#123;        int i &#x3D; 0, j &#x3D; res;        while(i &lt; j)&#123;            &#x2F;&#x2F; 二分查找，查找是否有数小于新进来的num            int m &#x3D; (i+j)&#x2F;2;            &#x2F;&#x2F; 有的话，找到第一个满足的数            if(tails[m] &lt; num) i &#x3D; m + 1;            &#x2F;&#x2F; 没有的话，继续找，直至i&lt;j            else j &#x3D; m;        &#125;        &#x2F;&#x2F;如果没有到达j&#x3D;&#x3D;res这个条件 就说明tail数组里只有部分比这个num要小 那么就把num插入到tail数组合适的位置即可 但是由于这样的子序列长度肯定是没有res长的 因此res不需要更新        tails[i] &#x3D; num;        &#x2F;&#x2F;j&#x3D;&#x3D;res 说明目前tail数组的元素都比当前的num要小 因此最长子序列的长度可以增加了        if(res &#x3D;&#x3D; j) res++;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、整数转罗马数字"><a href="#5、整数转罗马数字" class="headerlink" title="5、整数转罗马数字"></a>5、整数转罗马数字</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702141513929.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">40.</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> romans <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"CM"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"CD"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"XC"</span><span class="token punctuation">,</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"XL"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"IX"</span><span class="token punctuation">,</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"IV"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">>=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>romans<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">-=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、有效的数独"><a href="#6、有效的数独" class="headerlink" title="6、有效的数独"></a>6、有效的数独</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702144919056.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// [][]，第一个[]表示哪个位置，第二个[]表示某个数</span><span class="token comment">// 记录行是否被摆放</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 记录列是否被摆放</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 记录某3*3宫格是否被摆放</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 字符转数字</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'1'</span><span class="token punctuation">;</span>                <span class="token comment">// 计算宫格索引</span>                <span class="token keyword">int</span> blockIndex <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">||</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">||</span> block<span class="token punctuation">[</span>blockIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    block<span class="token punctuation">[</span>blockIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、三数之和"><a href="#7、三数之和" class="headerlink" title="7、三数之和"></a>7、三数之和</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702150432557.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 新建一个数组</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 如果数组小于3，那无法组三元组，返回无</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token comment">// 先排序</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 因为已经排序，如果当前数字大于0，则三数之和一定小于0，结束循环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">&lt;</span><span class="token class-name">R</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">&lt;</span><span class="token class-name">R</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>                <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702160613693.png"></p><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702160625348.png"></p><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702160552382.png"></p><h2 id="8、买股票的最佳时机"><a href="#8、买股票的最佳时机" class="headerlink" title="8、买股票的最佳时机"></a>8、买股票的最佳时机</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702160712350.png"></p><p>延续这个问题，拓展添加一个限制交易数k，即只允许k笔交易。</p><p>采用动态规划，其本质上就是穷举「状态」，然后在「选择」中选择最优解。</p><p>那针对这个问题，<strong>每天有三种「选择」</strong>：买入、卖出、无操作，用 <code>buy</code>, <code>sell</code>, <code>rest</code> 表示这三种选择。但问题是，并不是每天都可以任意选择这三种选择的，因为 <code>sell</code> 必须在 <code>buy</code> 之后，<code>buy</code> 必须在 <code>sell</code> 之后。那么 <code>rest</code> 操作还应该分两种状态，一种是 <code>buy</code> 之后的 <code>rest</code>（持有了股票），一种是 <code>sell</code> 之后的 <code>rest</code>（没有持有股票）。而且别忘了，还有交易次数 <code>k</code> 的限制，就是说 <code>buy</code> 还只能在 <code>k &gt; 0</code> 的前提下操作。</p><p><strong>这个问题的「状态」有三个</strong>，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 <code>rest</code> 的状态，不妨<strong>用 1 表示持有，0 表示没有持有</strong>）。然后用一个三维数组就可以装下这几种状态的全部组合</p><p>用自然语言描述出每一个状态的含义，比如说 <code>dp[3][2][1]</code> 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。再比如 <code>dp[2][3][0]</code> 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易。</p><p><strong>思考每种「状态」有哪些「选择」，应该如何更新「状态」。</strong></p><p>只看「持有状态」，可以画个<strong>状态转移图</strong>：</p><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/1.png"></p><p>通过这个图可以很清楚地看到，每种状态（0 和 1）是如何转移而来的。根据这个图，来写一下状态转移方程：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token builtin">max</span><span class="token punctuation">(</span> 今天选择 rest<span class="token punctuation">,</span>        今天选择 sell       <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解释：</strong>今天我没有持有股票，有两种可能，我从这两种可能中求最大利润：</p><p>1、我昨天就没有持有，且截至昨天最大交易次数限制为 <code>k</code>；然后我今天选择 <code>rest</code>，所以我今天还是没有持有，最大交易次数限制依然为 <code>k</code>。</p><p>2、我昨天持有股票，且截至昨天最大交易次数限制为 <code>k</code>；但是今天我 <code>sell</code> 了，所以我今天没有持有股票了，最大交易次数限制依然为 <code>k</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token builtin">max</span><span class="token punctuation">(</span> 今天选择 rest<span class="token punctuation">,</span>         今天选择 buy         <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解释：今天我持有着股票，最大交易次数限制为 <code>k</code>，那么对于昨天来说，有两种可能，我从这两种可能中求最大利润：</p><p>1、我昨天就持有着股票，且截至昨天最大交易次数限制为 <code>k</code>；然后今天选择 <code>rest</code>，所以我今天还持有着股票，最大交易次数限制依然为 <code>k</code>。</p><p>2、我昨天本没有持有，且截至昨天最大交易次数限制为 <code>k - 1</code>；但今天我选择 <code>buy</code>，所以今天我就持有股票了，最大交易次数限制为 <code>k</code>。</p><blockquote><p>这里着重提醒一下，<strong>时刻牢记「状态」的定义</strong>，状态 <code>k</code> 的定义并不是「已进行的交易次数」，而是「最大交易次数的上限限制」。如果确定今天进行一次交易，且要保证截至今天最大交易次数上限为 <code>k</code>，那么昨天的最大交易次数上限必须是 <code>k - 1</code>。</p></blockquote><p>这个解释应该很清楚了，如果 <code>buy</code>，就要从利润中减去 <code>prices[i]</code>，如果 <code>sell</code>，就要给利润增加 <code>prices[i]</code>。今天的最大利润就是这两种可能选择中较大的那个。</p><p>注意 <code>k</code> 的限制，在选择 <code>buy</code> 的时候相当于开启了一次交易，那么对于昨天来说，交易次数的上限 <code>k</code> 应该减小 1。</p><p>还差最后一点点，就是<strong>定义 base case</strong>，即最简单的情况。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>解释：因为 i 是从 <span class="token number">0</span> 开始的，所以 i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> 意味着还没有开始，这时候的利润当然是 <span class="token number">0</span>。dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>infinity解释：还没开始的时候，是不可能持有股票的。因为我们的算法要求一个最大值，所以初始值设为一个最小值，方便取最大值。dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>解释：因为 k 是从 <span class="token number">1</span> 开始的，所以 k <span class="token operator">=</span> <span class="token number">0</span> 意味着根本不允许交易，这时候利润当然是 <span class="token number">0</span>。dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>infinity解释：不允许交易的情况下，是不可能持有股票的。因为我们的算法要求一个最大值，所以初始值设为一个最小值，方便取最大值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的状态转移方程总结一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">base <span class="token keyword">case</span>：dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>infinity状态转移方程：dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ok，在确认了上述的问题后，来解决最初的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// base case</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拓展，增加条件</strong></p><p>输入股票价格数组 <code>prices</code>，你最多进行 <code>max_k</code> 次交易，每次交易需要额外消耗 <code>fee</code> 的手续费，而且每次交易之后需要经过 <code>cooldown</code> 天的冷冻期才能进行下一次交易，请你计算并返回可以获得的最大利润。</p><p>只要<strong>在 base case 和状态转移方程中同时加上 <code>cooldown</code> 和 <code>fee</code> 的约束就行了</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 同时考虑交易次数的限制、冷冻期和手续费</span><span class="token keyword">int</span> <span class="token function">maxProfit_all_in_one</span><span class="token punctuation">(</span><span class="token keyword">int</span> max_k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> cooldown<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max_k <span class="token operator">></span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 交易次数 k 没有限制的情况</span>        <span class="token keyword">return</span> <span class="token function">maxProfit_k_inf</span><span class="token punctuation">(</span>prices<span class="token punctuation">,</span> cooldown<span class="token punctuation">,</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>max_k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// k = 0 时的 base case</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> max_k<span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// base case 1</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 包含 cooldown 的 base case</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> cooldown <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// base case 2</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 别忘了减 fee</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 同时考虑 cooldown 和 fee</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>cooldown<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>max_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// k 无限制，包含手续费和冷冻期</span><span class="token keyword">int</span> <span class="token function">maxProfit_k_inf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> cooldown<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// base case 1</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 包含 cooldown 的 base case</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> cooldown <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// base case 2</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 别忘了减 fee</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 同时考虑 cooldown 和 fee</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> cooldown <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、盛最多水的容器"><a href="#9、盛最多水的容器" class="headerlink" title="9、盛最多水的容器"></a>9、盛最多水的容器</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220702165446678.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以暴力解决，两个for循环，但容易超时</span><span class="token comment">// 采用双指针技巧，两边靠中间</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">.</span> height<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 移动低边</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="以下开始增加输入输出的练习"><a href="#以下开始增加输入输出的练习" class="headerlink" title="以下开始增加输入输出的练习"></a><strong>以下开始增加输入输出的练习</strong></h2><h2 id="10、进制转换"><a href="#10、进制转换" class="headerlink" title="10、进制转换"></a>10、进制转换</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220704103224069.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 目的是导入Scanner类，但干脆全导入得了</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// Math类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hasNext空格就结束，hasNextLine空行就结束</span>        <span class="token comment">// 前面用hasNextLine()，那么后面要用 nextLine() 来处理输入;</span>        <span class="token comment">// 后面用 nextInt() 方法的话,那么前面要使用 hasNext()方法去判断.</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> tc <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tc <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> tc <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> tc <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tc <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> tc <span class="token operator">&lt;=</span> <span class="token char">'F'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> tc <span class="token operator">-</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                count <span class="token operator">+=</span> t <span class="token operator">*</span>  <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、两数之和"><a href="#11、两数之和" class="headerlink" title="11、两数之和"></a>11、两数之和</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220704110242265.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 暴力解法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 利用hashmap</span>    <span class="token comment">/*    用 HashMap 存储数组元素和索引的映射，在访问到 nums[i] 时，判断 HashMap 中是否存在 target - nums[i]    如果存在说明 target - nums[i] 所在的索引和 i 就是要找的两个数。     该方法的时间复杂度为 O(N)，空间复杂度为 O(N)，使用空间来换取时间。    */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、明明的随机数"><a href="#12、明明的随机数" class="headerlink" title="12、明明的随机数"></a>12、明明的随机数</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220706092054431.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 去重 + 排序，考虑treeset结构</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TreeSet</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 迭代器输出</span>            <span class="token class-name">Iterator</span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 或者用数据，但输出时避免重复数字输出，暴力解法吧</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 或者桶排序</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设计桶的大小</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13、字符个数统计"><a href="#13、字符个数统计" class="headerlink" title="13、字符个数统计"></a>13、字符个数统计</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220706094527891.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 或者使用位图</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用位图</span>        <span class="token class-name">BitSet</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 判断是否小于127</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">127</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 判断是否已经出现</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>bs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 未出现就设置</span>                bs<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span><span class="token function">cardinality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14、跳台阶"><a href="#14、跳台阶" class="headerlink" title="14、跳台阶"></a>14、跳台阶</h2><p><img src="/2022/07/11/hua-wei-ji-kao-zhi-shi-dian/image-20220706095751704.png"></p><p>对于本题,前提只有 一次 1阶或者2阶的跳法。  </p><p>   a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);  </p><p>   b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)  </p><p>   c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)  </p><p>   d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2  </p><p>   e.可以发现最终得出的是一个<strong>斐波那契数列</strong>：  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>  <span class="token function">jumpFloor</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">jumpFloor</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 递归往往超时，使用动态规划的方法</span>    <span class="token comment">/*    动态规划，转移方程：dp[i] = dp[i-1] + dp[i-2]到达当前台阶i的跳法=到前一个台阶i-1的跳法+到前两个i-2的台阶的跳法    */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> f<span class="token punctuation">;</span>            <span class="token comment">// 10000007类指很大的数</span>            f <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下面的在机考的时候遇到的题目"><a href="#下面的在机考的时候遇到的题目" class="headerlink" title="下面的在机考的时候遇到的题目"></a>下面的在机考的时候遇到的题目</h2><h2 id="1、九宫格输入法模拟"><a href="#1、九宫格输入法模拟" class="headerlink" title="1、九宫格输入法模拟"></a>1、九宫格输入法模拟</h2><p><strong>模拟九宫格输入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> one <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> two <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> thr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fou <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fiv <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> six <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sev <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ent <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nig <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span> zer <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">StringBuffer</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">get</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> re<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> a <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> ch<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>one<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> one<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>two<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> two<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>two<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>thr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> thr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>thr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>fou<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> fou<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fou<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>fiv<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> fiv<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fiv<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>six<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> six<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>six<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>sev<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> sev<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sev<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>ent<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> ent<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> ch<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>nig<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x <span class="token operator">=</span> x <span class="token operator">%</span> nig<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                            re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nig<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        re<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>zer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> re<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、关联子串"><a href="#2、关联子串" class="headerlink" title="2、关联子串"></a>2、关联子串</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        关联子串:        示例1：输入：str1="abc",str2="efghicabiii" 输出：5              解释：str2包含str1的一种排列组合（"cab")，此组合在str2的字符串起始位置为5（从0开始计数）        示例2：str1="abc",str2="efghicaibii" 输出：-1         */</span>        <span class="token comment">// abc acb bac bca cab cba</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"cab"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"efghicabiii"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">permutation</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> strList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>strList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>strList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">permutation</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputStr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">==</span> inputStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>inputStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*将第一个字符和后面的字符依次交换*/</span>            <span class="token function">swap</span><span class="token punctuation">(</span>inputStr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*对于第一个字符后面的字符，依次和后面的字符进行交换*/</span>            <span class="token function">permutation</span><span class="token punctuation">(</span>inputStr<span class="token punctuation">,</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> stringList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*由于还要交换其他位到该位，因此要将字符串恢复到未交换的时候的样子*/</span>            <span class="token function">swap</span><span class="token punctuation">(</span>inputStr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputStr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> inputStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        inputStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inputStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        inputStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、第k长的子串"><a href="#3、第k长的子串" class="headerlink" title="3、第k长的子串"></a>3、第k长的子串</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*例子：输入AABAAA2输出1同一字母连续出现最多的A 3次第二多2次 但A出现连续3次输入AAAAHHHBBCDHHHH3输出2//如果子串中只包含同一字母的子串数小于k，则输出-1*/</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findWord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> currentChar <span class="token operator">=</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> currentCharLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChar <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 因为都是大写字母，所以可以直接用 == 判断，如果相等 直接累加，计算该字符长度</span>            currentCharLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> lastLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lastLength <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>currentCharLength<span class="token punctuation">,</span> lastLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果不等，就给currentChar 重新赋值，且将长度记录到集合中</span>            currentChar <span class="token operator">=</span> content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            currentCharLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> o1<span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之基础篇</title>
      <link href="/2022/07/05/mysql-zhi-ji-chu-pian/"/>
      <url>/2022/07/05/mysql-zhi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MySQL概述"><a href="#一、MySQL概述" class="headerlink" title="一、MySQL概述"></a>一、MySQL概述</h2><h3 id="1、数据库的相关概念"><a href="#1、数据库的相关概念" class="headerlink" title="1、数据库的相关概念"></a>1、数据库的相关概念</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704171905480.png"></p><h3 id="2、启动和关闭MySQL"><a href="#2、启动和关闭MySQL" class="headerlink" title="2、启动和关闭MySQL"></a>2、启动和关闭MySQL</h3><p><code>win + R</code>调出运行，输入<code>SERVICES.MSC</code>进入服务窗口，找到MySQL进行操作</p><p>或者打开命令行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 启动net start mysql# 停止net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、客户端连接"><a href="#3、客户端连接" class="headerlink" title="3、客户端连接"></a>3、客户端连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 命令行mysql [-h 127.0.0.1] [-P 3306] -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、数据模型"><a href="#4、数据模型" class="headerlink" title="4、数据模型"></a>4、数据模型</h3><ul><li><strong>关系型数据库</strong></li><li>建立在关系模型基础上，由多张相互连接的二维表组成的数据库</li><li>特点：<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便</li><li>可以这样认为：<strong>通过表结构存储</strong>的数据库称为<strong>关系数据库</strong>，<strong>不通过表结构存储</strong>的数据库称为<strong>非关系数据库</strong></li></ul></li></ul><h2 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h2><h3 id="1、SQL通用语法"><a href="#1、SQL通用语法" class="headerlink" title="1、SQL通用语法"></a>1、SQL通用语法</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格/缩进来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</li><li>注释：<ul><li>单行注释： <code>--</code> 注释内容或<code>#</code>注释内容</li><li>多行注释：<code>/*</code>注释内容<code>*/</code></li></ul></li></ol><h3 id="2、SQL分类"><a href="#2、SQL分类" class="headerlink" title="2、SQL分类"></a>2、SQL分类</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704174621808.png"></p><h3 id="3、DDL"><a href="#3、DDL" class="headerlink" title="3、DDL"></a>3、DDL</h3><p><strong>数据定义语言，用来定义数据库对象（数据库，表，字段）</strong></p><ul><li><strong>数据库操作</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询# 查询所有数据库SHOW DATABASES;# 查询当前数据库SELECT DATABASE();# 创建CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];# 删除DROP DATABASE [IF EXISTS] 数据库名;# 使用USE 数据库名; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>表操作</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询# 查询当前数据库的所有表SHOW TABLES;# 查询表结构DESC 表名;# 查询指定表的建表语句SHOW CREATE TABLE 表名;# 创建CREATE TABLE 表名( 字段1 字段1类型[COMMENT 字段1注释], 字段2 字段2类型[COMMENT 字段2注释], ... 字段n 字段n类型[COMMENT 字段n注释])[COMMENT 表注释];# 例子create table tb_userid int comment &#39;编号&#39;,name varchar(50) comment &#39;姓名&#39;,age int comment &#39;年龄&#39;,gender varchar(1) comment &#39;性别&#39;)comment &#39;用户表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 添加字段ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];# 修改# 修改数据类型ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);# 修改字段名和字段类型ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];# 修改表名ALTER TABLE 表名 RENAME TO 新表名;# 删除# 删除字段ALTER TABLE 表名 DROP 字段名;# 删除表DROP TABLE [IF EXISTS] 表名;# 删除指定表，并重新创建该表TRUNCATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704181115308.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 年龄一般不大，且为正数age tinyint unsigned# 成绩，一般要浮点数，那如果要求是99.5这样的数字，整体长度为4，保留小数点后一位，即精度为4，标度为1sorce double(4, 1) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704181426839.png"></p><p><strong>varchar和char的区别</strong></p><ul><li><strong>区别一：定长和变长</strong><br>char 表示定长，长度固定，varchar表示变长，即长度可变。char如果插入的长度小于定义长度时，则用空格填充；varchar小于定义长度时，还是按实际长度存储，插入多长就存多长。因为其长度固定，char的存取速度还是要比varchar要快得多，方便程序的存储与查找；但是<strong>char</strong>也为此付出的是空间的代价，因为其长度固定，所以会占据多余的空间，可谓是<strong>以空间换取时间效率</strong>。<strong>varchar</strong>则刚好相反，<strong>以时间换空间</strong>。</li><li><strong>区别之二：存储的容量不同</strong><br><strong>对 char 来说，最多能存放的字符个数 255</strong>，和编码无关。<br>而 <strong>varchar 呢，最多能存放 65532 个字符</strong>。varchar的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是 65,532字节。</li></ul><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704182252855.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">birthday date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>案例</strong></p><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704182506881.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table emp(id int comment &#39;编号&#39;,    workno varchar(10) comment &#39;员工工号&#39;,    name varchar(10) comment &#39;姓名&#39;,    gender char(1) comment &#39;性别&#39;,    age tinyint unsigned comment &#39;年龄&#39;,    idcard char(18) commint &#39;身份证&#39;,    time date commint &#39;入职时间&#39;)commint &#39;员工信息表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、DML"><a href="#5、DML" class="headerlink" title="5、DML"></a>5、DML</h3><p><strong>数据库操作语言，用来对数据库中表的数据记录进行增删改操作</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 添加数据# 指定字段添加数据INSERT INTO 表名 (字段名1, 字段名2...) VALUES (值1, 值2...);# 全部字段添加数据INSERT INTO 表名 VALUES (值1, 值2...);# 批量添加数据INSERT INTO 表名 (字段名1, 字段名2...) VALUES (值1, 值2...), (值1, 值2...), (值1, 值2...);INSERT INTO 表名 VALUES (值1, 值2...), (值1, 值2...), (值1, 值2...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ul><li>插入数据时，指定字段顺序需要与值的顺序一一对应</li><li>字符串和日期型数据应包含在引号中</li><li>插入的数据大小应在字段的规定范围内</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 修改UPDATE 表名 SET 字段名1 &#x3D; 值1, 字段名2 &#x3D; 值2... [WHERE 条件];# 删除DELETE FROM 表名 [WHERE 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li><code>UPDATE</code>语句中，如果没有条件，会修改整张表的所有数据</li><li><code>DELETE</code>语句中，如果没有条件，会删除整张表的所有数据</li><li><code>DELETE</code>语句不能删除某个字段的值（但可以使用<code>UPDATE</code>实现这功能，将字段值改为<code>NULL</code>即可）</li></ul><h3 id="6、DQL"><a href="#6、DQL" class="headerlink" title="6、DQL"></a>6、DQL</h3><p><strong>数据查询语言，用来查询数据库中表的记录</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 语法SELECT字段列表FROM表名列表WHERE条件列表GROUP BY分组字段列表HAVING分组后条件列表ORDER BY排序字段列表LIMIT分页参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 基础查询# 查询多个字段SELECT 字段1, 字段2,... FROM 表名;SELECT * FROM 表名;# 设置别名SELECT 字段1 [AS 别名1], 字段2 [AS 别名2],... FROM 表名;# 去除重复记录SELECT DISTINCT 字段列表 FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 条件查询SELECT 字段列表 FROM 表名列表 WHERE 条件列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704195055208.png"></p><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220704200002702.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 聚合函数用法SELECT 聚合函数(字段列表) FROM 表名;# 例子select count(*) from user;-- 所有的null不参与聚合函数运算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 分组查询SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];# 例子，查询年龄小于45的员工，并根据工作地址进行分组，获取员工数量大于等于3的地址select workaddress, count(*) address_count from emp where age &lt; 45 group by workaddress having address_count &gt;&#x3D; 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WHERE 与 HAVING 的区别</strong></p><ul><li>执行实际不同：<code>where</code>是在分组前进行过滤，不满足<code>where</code>条件，不参与分组；而<code>having</code>是分组后对结果进行过滤</li><li>判断条件不同：<code>where</code>不能对聚合函数进行判断，而<code>having</code>可以</li></ul><p><strong>注意：</strong></p><ul><li>执行顺序：<code>where</code> &gt; 聚合函数 &gt; <code>having</code></li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 排序查询SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;-- 排序方式ASC: 升序（默认值）DESC: 降序# 多字段排序，当第一个字段值相同时，才会根据第二个字段排序# 案例，根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序select * from emp order by age asc, time desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 分页查询SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1）*每页显示记录数；</li><li>分页查询是数据库的方言，不同数据库有不同实现</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为<code>limit 10</code></li></ul><h3 id="7、DQL执行顺序"><a href="#7、DQL执行顺序" class="headerlink" title="7、DQL执行顺序"></a>7、DQL执行顺序</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8、DCL"><a href="#8、DCL" class="headerlink" title="8、DCL"></a>8、DCL</h3><p><strong>数据控制语言，用来管理数据库用户，控制数据库的访问权限</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 用户管理# 查询用户USE mysql;SELECT * FROM user;# 创建用户CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;# 修改用户密码ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;# 删除用户DROP USER &#39;用户名&#39;@&#39;主机名&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 权限控制# 查询权限SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;# 授予权限GRANT 权限列表 ON 数据库.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;# 撤销权限REVOKE 权限列表 ON 数据库.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>具体见下面链接：</p><p><strong><a href="https://blog.csdn.net/m0_68850571/article/details/124272173">https://blog.csdn.net/m0_68850571/article/details/124272173</a></strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 字符串函数# 大小写转换LOWER(str)UPPER(str)# 拼接CONCAT(S1, S2,...Sn)# 左右填充，用pad对str的左（右）填充达到n的长度LPAD(str, n, pad)RPAD(str, n, pad)-- 数值函数# 向上向下取整CEIL(x)FLOOD(x)# 返回x&#x2F;y的模MOD(x, y)# 返回0-1的随机数RAND()# 求x四舍五入的值，保留y位小数ROUND(x, y)# 随机生成六位数的随机验证码select lpad(round(rand()*1000000, 0), 6, &#39;0&#39;);-- 日期函数# 返回当前日期和时间curdate()NOW()# 获取指定date的日期YEAR(date)DAY(date)# 返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值DATE_ADD(date, INTERVAL expr type)# 返回date1和date2之间的天数DATEDIFF(date1, date2)-- 流程函数# 如果表达式expr成立，返回结果v1；否则，返回结果v2IF(expr,v1,v2)# 如果v1的值不为NULL，则返回v1，否则返回v2IFNULL(v1,v2)# CASE表示函数开始，END表示函数结束。如果e1成立，则返回v1,如果e2成立，则返回v2，当全部不成立则返回vn，而当有一个成立之后，后面的就不执行了CASE 　　WHEN e1　　THEN v1　　WHEN e2　　THEN e2　　...　　ELSE vnEND# 如果表达式expr的值等于e1，返回v1；如果等于e2,则返回e2。否则返回vnCASE expr 　　WHEN e1 THEN v1　　WHEN e2 THEN v2　　...　　ELSE vnEND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、约束"><a href="#四、约束" class="headerlink" title="四、约束"></a>四、约束</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><ol><li><strong>概念</strong>：约束是作用域表中字段上的规则，用于限制存储在表中的数据，作用于表中字段上，可以在创建/修改表的时候添加约束</li><li><strong>目的</strong>：保证数据库中数据的正确、有效性和完整性</li><li><strong>分类</strong><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220705001116979.png"></li></ol><h3 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220705001509783.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user(id int primary key auto_increment comment &#39;主键&#39;,    name varchar(10) not null unique comment &#39;姓名&#39;,    age int check ( age &gt; 0 &amp;&amp; age &lt;&#x3D; 120 ) comment &#39;年龄&#39;,    status char(1) default 1 comment &#39;状态&#39;,    gender char(1) comment &#39;性别&#39;)comment &#39;用户表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、外键约束"><a href="#3、外键约束" class="headerlink" title="3、外键约束"></a>3、外键约束</h3><p><strong>外键约束用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 添加外键CREATE TABLE 表名(字段名 数据类型,    ....    [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名));ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);# 例子alter table emp add constraint fk_emp_id foreign key (dept_id) references dept(id);# 删除外键ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220705003118071.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名) ON UPDATE CASCADE ON DELETE CASCADE;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、多表查询"><a href="#五、多表查询" class="headerlink" title="五、多表查询"></a>五、多表查询</h2><h3 id="1、多表关系"><a href="#1、多表关系" class="headerlink" title="1、多表关系"></a>1、多表关系</h3><p><strong>一对多（多对一）</strong></p><ul><li>在多的一方建立外键，指向一的一方的主键</li></ul><p><strong>多对多</strong></p><ul><li>建立第三张中间表，中间表至少包含两个外键，分别关联两方的主键</li></ul><p><strong>一对一</strong></p><ul><li>多用于单表拆分</li><li>在任意一方加入外键，关联另外一方的主键，<strong>并设置外键唯一（UNIQUE）</strong></li></ul><h3 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h3><ul><li>笛卡尔积：笛卡尔乘积是指在数学中，两个集合A集合和B集合的所有组合情况。<strong>（多表查询时，需要消除无效的笛卡尔积）</strong></li></ul><p><strong>分类</strong></p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：查询左/右所有数据，以及两张表交集部分数据</li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h3 id="3、内连接"><a href="#3、内连接" class="headerlink" title="3、内连接"></a>3、内连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 隐式内连接SELECT 字段列表 FROM 表1, 表2 WHERE 条件...;# 显式内连接SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内连接查询的是两张表交集的部分</strong></p><h3 id="4、外连接"><a href="#4、外连接" class="headerlink" title="4、外连接"></a>4、外连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 左外连接SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...;-- 相当于查询表1（左表）的所有数据包含表1和表2交集部分的数据# 右外连接SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件...;-- 相当于查询表2（右表）的所有数据包含表1和表2交集部分的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、自连接"><a href="#5、自连接" class="headerlink" title="5、自连接"></a>5、自连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件...;-- 自连接查询可以是内连接查询，也可以是外连接查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6、联合查询"><a href="#6、联合查询" class="headerlink" title="6、联合查询"></a>6、联合查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 把多次查询的结果合并起来，形成一个新的查询结果集SELECT 字段列表 FROM 表AUNION [ALL]SELECT 字段列表 FROM 表B...;-- 只写UNION，可以对查询结果进行去重<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</strong></p><h3 id="7、子查询"><a href="#7、子查询" class="headerlink" title="7、子查询"></a>7、子查询</h3><ul><li>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</li></ul><pre class="line-numbers language-MYSQL" data-language="MYSQL"><code class="language-MYSQL">SELECT * FROM t1 WHERE column1 &#x3D; (SELECT column1 FROM t2); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据子查询结果不同分类<ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul></li></ul><h2 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<strong>要么同时成功，要么同时失败</strong></p><p><strong>默认MySQL的事务是自动提交的，当执行一条DML语句，MySQL会立即隐式的提交事务</strong></p><h3 id="2、事务操作"><a href="#2、事务操作" class="headerlink" title="2、事务操作"></a>2、事务操作</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看&#x2F;设置事务提交方式SELECT @@autocommit;# 默认为1-- 改为手动提交SET @@autocommit &#x3D; 0;# 提交事务COMMIT;# 回滚事务ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、事务的四大特性"><a href="#3、事务的四大特性" class="headerlink" title="3、事务的四大特性"></a>3、事务的四大特性</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/image-20220705111930104.png"></p><h3 id="4、并发事务问题"><a href="#4、并发事务问题" class="headerlink" title="4、并发事务问题"></a>4、并发事务问题</h3><ol><li><strong>脏读</strong>：一个事务读到另外一个事务还没有提交的数据</li><li><strong>不可重复读</strong>：一个事务先后读取同一条记录，但两次读取的数据不同</li><li><strong>幻读</strong>：一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，又发现这行数据存在</li></ol><h3 id="5、事务的隔离级别"><a href="#5、事务的隔离级别" class="headerlink" title="5、事务的隔离级别"></a>5、事务的隔离级别</h3><p><img src="/2022/07/05/mysql-zhi-ji-chu-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob3V5bV8=,size_16,color_FFFFFF,t_70.png"></p><p>在MYSQL数据库中查看当前事务的隔离级别</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT @@tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在MYSQL数据库中设置事务的隔离级别：<br><img src="/2022/07/05/mysql-zhi-ji-chu-pian/20190520200627266.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot之实用篇</title>
      <link href="/2022/06/18/springboot-zhi-shi-yong-pian/"/>
      <url>/2022/06/18/springboot-zhi-shi-yong-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot之实用篇"><a href="#Springboot之实用篇" class="headerlink" title="Springboot之实用篇"></a>Springboot之实用篇</h1><h2 id="一、热部署"><a href="#一、热部署" class="headerlink" title="一、热部署"></a>一、热部署</h2><h3 id="1、手动启动热部署"><a href="#1、手动启动热部署" class="headerlink" title="1、手动启动热部署"></a>1、手动启动热部署</h3><p><strong>步骤①</strong>：导入开发者工具对应的坐标</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;    &lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：构建项目，可以使用快捷键激活此功能</p><p><img src="/2022/06/18/springboot-zhi-shi-yong-pian/image-20220222121257218.png"></p><p>​        对应的快捷键一定要记得</p><pre class="line-numbers language-CMD" data-language="CMD"><code class="language-CMD">&lt;CTRL&gt;+&lt;F9&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        以上过程就实现了springboot工程的热部署。不过这里需要把底层的工作工程给普及一下。</p><p><strong>重启与重载</strong></p><p>​        一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。</p><ul><li><strong>base类加载器</strong>：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化</li><li><strong>restart类加载器</strong>：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><p>​        当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说<strong>热部署的过程实际上是重新加载restart类加载器中的信息</strong>。</p><p><strong>总结</strong></p><ol><li>使用开发者工具可以为当前项目开启热部署功能</li><li>使用构建项目操作对工程进行热部署</li></ol><h3 id="2、自动启动热部署"><a href="#2、自动启动热部署" class="headerlink" title="2、自动启动热部署"></a>2、自动启动热部署</h3><p>自动热部署其实就是设计一个开关，打开这个开关后，IDE工具就可以自动热部署。因此这个操作和IDE工具有关，以下以idea为例设置idea中启动热部署</p><p><strong>步骤①</strong>：设置自动构建项目</p><p>​        打开【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】，意思是自动构建项目</p><p><img src="/2022/06/18/springboot-zhi-shi-yong-pian/image-20220222123543551.png"></p><p>​        自动构建项目选项勾选后</p><p><strong>步骤②</strong>：允许在程序运行时进行自动构建</p><p>​        使用快捷键【Ctrl】+【Alt】+【Shit】+【/】打开维护面板，选择第1项【Registry…】</p><p><img src="/2022/06/18/springboot-zhi-shi-yong-pian/image-20220222124006910.png"></p><p>​        在选项中搜索comple，然后勾选对应项即可</p><img src="image-20220222124240069.png" alt="" style="zoom:80%;" /><p>​        这样程序在运行的时候就可以进行自动构建了，实现了热部署的效果。</p><p><font color="#ff0000"><b>关注</b></font>：如果你每敲一个字母，服务器就重新构建一次，这未免有点太频繁了，所以idea设置当idea工具失去焦点5秒后进行热部署。其实就是你从idea工具中切换到其他工具时进行热部署，比如改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作。</p><p><strong>总结</strong></p><ol><li>自动热部署要开启自动构建项目</li><li>自动热部署要开启在程序运行时自动构建项目</li></ol><h3 id="3、热部署范围配置"><a href="#3、热部署范围配置" class="headerlink" title="3、热部署范围配置"></a>3、热部署范围配置</h3><p>​    通过修改项目中的文件，发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>​        以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过application.yml文件进行设定哪些文件不参与热部署操作</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token comment"># 设置不参与热部署的文件或文件夹</span>      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/<span class="token important">**</span><span class="token punctuation">,</span>public/<span class="token important">**</span><span class="token punctuation">,</span>config/application.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>通过配置可以修改不参与热部署的文件或目录</li></ol><h3 id="4、关闭热部署"><a href="#4、关闭热部署" class="headerlink" title="4、关闭热部署"></a>4、关闭热部署</h3><p>​    线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class SSMPApplication &#123;    public static void main(String[] args) &#123;        System.setProperty(&quot;spring.devtools.restart.enabled&quot;,&quot;false&quot;);        SpringApplication.run(SSMPApplication.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其实上述担心略微有点多余，因为线上环境的维护是不可能出现修改代码的操作的，这么做唯一的作用是降低资源消耗，毕竟那双盯着你项目是不是产生变化的眼睛只要闭上了，就不具有热部署功能了，这个开关的作用就是禁用对应功能。</p><p><strong>总结</strong></p><ol><li>通过配置可以关闭热部署功能降低线上程序的资源消耗</li></ol><h2 id="二、配置高级"><a href="#二、配置高级" class="headerlink" title="二、配置高级"></a>二、配置高级</h2><h3 id="1、-ConfigurationProperties"><a href="#1、-ConfigurationProperties" class="headerlink" title="1、@ConfigurationProperties"></a>1、@ConfigurationProperties</h3><p>​        在基础篇学习了@ConfigurationProperties注解，此注解的作用是用来为bean绑定属性的。开发者可以在yml配置文件中以对象的格式添加若干属性</p><pre class="line-numbers language-YML" data-language="YML"><code class="language-YML">servers:  ip-address: 192.168.0.1   port: 2345  timeout: -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后再开发一个用来封装数据的实体类，注意要提供属性对应的setter方法</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Datapublic class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        使用@ConfigurationProperties注解就可以将配置中的属性值关联到开发的模型类上</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix &#x3D; &quot;servers&quot;)public class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样加载对应bean的时候就可以直接加载配置属性值了。</p><p>​        同时使用@ConfigurationProperties注解其实可以为第三方bean加载属性，格式特殊一点而已。</p><p><strong>步骤①</strong>：使用@Bean注解定义第三方bean</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Beanpublic DruidDataSource datasource()&#123;    DruidDataSource ds &#x3D; new DruidDataSource();    return ds;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：在yml中定义要绑定的属性，注意datasource此时全小写</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">datasource:  driverClassName: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>步骤③</strong>：使用@ConfigurationProperties注解为第三方bean进行属性绑定，注意前缀是全小写的datasource</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Bean@ConfigurationProperties(prefix &#x3D; &quot;datasource&quot;)public DruidDataSource datasource()&#123;    DruidDataSource ds &#x3D; new DruidDataSource();    return ds;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        操作方式完全一样，只不过@ConfigurationProperties注解不仅能添加到类上，还可以添加到方法上，添加到类上是为spring容器管理的当前类的对象绑定属性，添加到方法上是为spring容器管理的当前方法的返回值对象绑定属性，其实本质上都一样。</p><p>​        做到这其实就出现了一个新的问题，目前定义bean不是通过类注解定义就是通过@Bean定义，使用@ConfigurationProperties注解可以为bean进行属性绑定，那在一个业务系统中，哪些bean通过注解@ConfigurationProperties去绑定属性了呢？因为这个注解不仅可以写在类上，还可以写在方法上，所以找起来就比较麻烦了。为了解决这个问题，spring给我们提供了一个全新的注解，专门标注使用@ConfigurationProperties注解绑定属性的bean是哪些。这个注解叫做@EnableConfigurationProperties。具体如何使用呢？</p><p><strong>步骤①</strong>：在配置类上开启@EnableConfigurationProperties注解，并标注要使用@ConfigurationProperties注解绑定属性的类</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">@SpringBootApplication@EnableConfigurationProperties(ServerConfig.class)public class Springboot13ConfigurationApplication &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：在对应的类上直接使用@ConfigurationProperties进行属性绑定</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Data@ConfigurationProperties(prefix &#x3D; &quot;servers&quot;)public class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        有人感觉这没区别啊？注意观察，现在绑定属性的ServerConfig类并没有声明@Component注解。当使用@EnableConfigurationProperties注解时，spring会默认将其标注的类定义为bean，因此无需再次声明@Component注解了。</p><p>​        最后再说一个小技巧，使用@ConfigurationProperties注解时，会出现一个提示信息</p><p><img src="/2022/06/18/springboot-zhi-shi-yong-pian/image-20220222145535749.png"></p><p>​        出现这个提示后只需要添加一个坐标此提醒就消失了</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties可以为使用@Bean声明的第三方bean绑定属性</li><li>当使用@EnableConfigurationProperties声明进行属性绑定的bean后，无需使用@Component注解再次进行bean声明</li></ol><h3 id="2、宽松绑定-松散绑定"><a href="#2、宽松绑定-松散绑定" class="headerlink" title="2、宽松绑定/松散绑定"></a>2、宽松绑定/松散绑定</h3><p>​        在进行属性绑定时，可能会遇到如下情况，为了进行标准命名，开发者会将属性名严格按照驼峰命名法书写，在yml配置文件中将datasource修改为dataSource，如下：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">dataSource:  driverClassName: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        此时程序可以正常运行，然后又将代码中的前缀datasource修改为dataSource，如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Bean@ConfigurationProperties(prefix &#x3D; &quot;dataSource&quot;)public DruidDataSource datasource()&#123;    DruidDataSource ds &#x3D; new DruidDataSource();    return ds;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        此时就发生了编译错误，而且并不是idea工具导致的，运行后依然会出现问题，配置属性名dataSource是无效的</p><pre class="line-numbers language-CMD" data-language="CMD"><code class="language-CMD">Configuration property name &#39;dataSource&#39; is not valid:    Invalid characters: &#39;S&#39;    Bean: datasource    Reason: Canonical names should be kebab-case (&#39;-&#39; separated), lowercase alpha-numeric characters and must start with a letterAction:Modify &#39;dataSource&#39; so that it conforms to the canonical names requirements.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        为什么会出现这种问题，这就要来说一说springboot进行属性绑定时的一个重要知识点了，有关属性名称的宽松绑定，也可以称为宽松绑定。</p><p>​        <strong>什么是宽松绑定</strong>？实际上是springboot进行编程时人性化设计的一种体现，即配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。兼容到什么程度呢？几乎主流的命名格式都支持，例如：</p><p>​        在ServerConfig中的ipAddress属性名</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix &#x3D; &quot;servers&quot;)public class ServerConfig &#123;    private String ipAddress;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以与下面的配置属性名规则全兼容</p><pre class="line-numbers language-YML" data-language="YML"><code class="language-YML">servers:  ipAddress: 192.168.0.2       # 驼峰模式  ip_address: 192.168.0.2      # 下划线模式  ip-address: 192.168.0.2      # 烤肉串模式  IP_ADDRESS: 192.168.0.2      # 常量模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        也可以说，以上4种模式最终都可以匹配到ipAddress这个属性名。为什么这样呢？原因就是在进行匹配时，配置中的名称要去掉中划线和下划线后，忽略大小写的情况下去与java代码中的属性名进行忽略大小写的等值匹配，以上4种命名去掉下划线中划线忽略大小写后都是一个词ipaddress，java代码中的属性名忽略大小写后也是ipaddress，这样就可以进行等值匹配了，这就是为什么这4种格式都能匹配成功的原因。不过<strong>springboot官方推荐使用烤肉串模式，也就是中划线模式。</strong></p><p>​        到这里掌握了一个知识点，就是命名的规范问题。再来看开始出现的编程错误信息</p><pre class="line-numbers language-CMD" data-language="CMD"><code class="language-CMD">Configuration property name &#39;dataSource&#39; is not valid:    Invalid characters: &#39;S&#39;    Bean: datasource    Reason: Canonical names should be kebab-case (&#39;-&#39; separated), lowercase alpha-numeric characters and must start with a letterAction:Modify &#39;dataSource&#39; so that it conforms to the canonical names requirements.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其中Reason描述了报错的原因，规范的名称应该是烤肉串(kebab)模式(case)，即使用-分隔，使用小写字母数字作为标准字符，且必须以字母开头。然后再看写的名称dataSource，就不满足上述要求。在书写前缀时，这个词不是随意支持的，必须使用上述标准。</p><p>​        最后说一句，以上规则仅针对springboot中@ConfigurationProperties注解进行属性绑定时有效，对@Value注解进行属性映射无效。</p><p><strong>总结</strong></p><ol><li>@ConfigurationProperties绑定属性时支持属性名宽松绑定，这个宽松体现在属性名的命名规则上</li><li><strong>@Value注解不支持松散绑定规则</strong></li><li>绑定前缀名推荐采用烤肉串命名规则，即使用中划线做分隔符，仅能使用纯小写字母、数字、下划线作为合法字符</li></ol><h3 id="3、常用计量单位绑定"><a href="#3、常用计量单位绑定" class="headerlink" title="3、常用计量单位绑定"></a>3、常用计量单位绑定</h3><p>​        在前面的配置中，书写了如下配置值，其中第三项超时时间timeout描述了服务器操作超时时间，当前值是-1表示永不超时。</p><pre class="line-numbers language-YML" data-language="YML"><code class="language-YML">servers:  ip-address: 192.168.0.1   port: 2345  timeout: -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        但是每个人都这个值的理解会产生不同，比如线上服务器完成一次主从备份，配置超时时间240，这个240如果单位是秒就是超时时间4分钟，如果单位是分钟就是超时时间4小时。面对一次线上服务器的主从备份，设置4分钟，简直是开玩笑，别说拷贝过程，备份之前的压缩过程4分钟也搞不定，这个时候问题就来了，怎么解决这个误会？</p><p>​        除了加强约定之外，springboot充分利用了JDK8中提供的全新的用来表示计量单位的新数据类型，从根本上解决这个问题。以下模型类中添加了两个JDK8中新增的类，分别是<strong>Duration和DataSize</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix &#x3D; &quot;servers&quot;)public class ServerConfig &#123;    @DurationUnit(ChronoUnit.HOURS)    private Duration serverTimeOut;    @DataSizeUnit(DataUnit.MEGABYTES)    private DataSize dataSize;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Duration</strong>：表示时间间隔，可以通过@DurationUnit注解描述时间单位，例如上例中描述的单位为小时（ChronoUnit.HOURS）</p><p><strong>DataSize</strong>：表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位，例如上例中描述的单位为MB（DataUnit.MEGABYTES）</p><p>​        使用上述两个单位就可以有效避免因沟通不同步或文档不健全导致的信息不对称问题，从根本上解决了问题，避免产生误读。</p><p>Druation常用单位如下：</p><img src="image-20220222173911102.png" alt="" style="zoom:50%;" /><p>DataSize常用单位如下：</p><img src="image-20220222174130102.png" alt="" style="zoom:67%;" /><h3 id="4、校验"><a href="#4、校验" class="headerlink" title="4、校验"></a>4、校验</h3><p>​        目前在进行属性绑定时可以通过松散绑定规则在书写时放飞自我了，但是在书写时由于无法感知模型类中的数据类型，就会出现类型不匹配的问题，比如代码中需要int类型，配置中给了非法的数值，例如写一个“a”，这种数据肯定无法有效的绑定，还会引发错误。        </p><p>​    SpringBoot给出了强大的数据校验功能，可以有效的避免此类问题的发生。在JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架，此处使用Hibernate提供的校验框架来作为实现进行数据校验。书写应用格式非常固定，话不多说，直接上步骤</p><p><strong>步骤①</strong>：开启校验框架</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--1.导入JSR303规范--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用hibernate框架提供的校验器做实现，否则会报错--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：在需要开启校验功能的类上使用注解@Validated开启校验功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token comment">//开启对当前bean的属性注入校验</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤③</strong>：对具体的字段设置校验规则</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix &#x3D; &quot;servers&quot;)&#x2F;&#x2F;开启对当前bean的属性注入校验@Validatedpublic class ServerConfig &#123;    &#x2F;&#x2F;设置具体的规则    @Max(value &#x3D; 8888,message &#x3D; &quot;最大值不能超过8888&quot;)    @Min(value &#x3D; 202,message &#x3D; &quot;最小值不能低于202&quot;)    private int port;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        通过设置数据格式校验，就可以有效避免非法数据加载，其实使用起来还是挺轻松的，基本上就是一个格式。</p><p><strong>总结</strong></p><ol><li>开启Bean属性校验功能一共3步：导入JSR303与Hibernate校验框架坐标、使用@Validated注解启用校验功能、使用具体校验规则规范数据校验格式</li></ol><h3 id="5、数据类型转换"><a href="#5、数据类型转换" class="headerlink" title="5、数据类型转换"></a>5、数据类型转换</h3><p>​        关于bean的属性注入的问题，报错如下</p><pre class="line-numbers language-CMD" data-language="CMD"><code class="language-CMD">java.sql.SQLException: Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        其实看到这个报错，这是用户名和密码不匹配，就是密码输入错了，但是问题就在于密码并没有输入错误。给的报错信息无法帮助你有效的分析问题，甚至会给你带到沟里。用户名密码的配置是这样写的：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm_db?serverTimezone&#x3D;UTC    username: root    password: 0127<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        密码使用0127，其实问题就出在这里。</p><p>​        在整数相关知识中有这么一句话，<strong>支持二进制，八进制，十六进制</strong></p><img src="image-20220222225748370.png" alt="" style="zoom:80%;" /><p>​        问题就处在这里了，0127在开发者眼中是一个字符串“0127”，但是在springboot看来，这就是一个数字，而且是一个八进制的数字。当后台使用String类型接收数据时，如果配置文件中配置了一个整数值，他是先安装整数进行处理，读取后再转换成字符串。巧了，0127撞上了八进制的格式，所以最终以十进制数字87的结果存在了。</p><p>​        这里提两个注意点，第一，字符串标准书写加上引号包裹，养成习惯，第二，遇到0开头的数据多注意吧。</p><p><strong>总结</strong></p><ol><li>yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</li></ol><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><h3 id="1、加载测试专用属性"><a href="#1、加载测试专用属性" class="headerlink" title="1、加载测试专用属性"></a>1、加载测试专用属性</h3><p>​        测试过程本身并不是一个复杂的过程，但是很多情况下测试时需要模拟一些线上情况，或者模拟一些特殊情况。如果当前环境按照线上环境已经设定好了，例如是下面的配置</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">env:  maxMemory: 32GB  minMemory: 16GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        但是现在想测试对应的兼容性，需要测试如下配置</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">env:  maxMemory: 16GB  minMemory: 8GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        在测试环境中创建一组临时属性，去覆盖源码中设定的属性，这样测试用例就相当于是一个独立的环境，能够独立测试，这样就方便多了。</p><p><strong>临时属性</strong></p><p>​        springboot已经为开发者早就想好了这种问题该如何解决，并且提供了对应的功能入口。在测试用例程序中，可以通过对注解@SpringBootTest添加属性来模拟临时属性，具体如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;properties属性可以为当前测试用例添加临时的属性配置@SpringBootTest(properties &#x3D; &#123;&quot;test.prop&#x3D;testValue1&quot;&#125;)public class PropertiesAndArgsTest &#123;    @Value(&quot;$&#123;test.prop&#125;&quot;)    private String msg;        @Test    void testProperties()&#123;        System.out.println(msg);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        使用注解@SpringBootTest的properties属性就可以为当前测试用例添加临时的属性，覆盖源码配置文件中对应的属性值进行测试。</p><p><strong>临时参数</strong></p><p>​        除了上述这种情况，在前面讲解使用命令行启动springboot程序时讲过，通过命令行参数也可以设置属性值。而且线上启动程序时，通常都会添加一些专用的配置信息。作为运维人员他们才不懂java，更不懂这些配置的信息具体格式该怎么写，那如果作为开发者提供了对应的书写内容后，能否提前测试一下这些配置信息是否有效呢？当时是可以的，还是通过注解@SpringBootTest的另一个属性来进行设定。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;args属性可以为当前测试用例添加临时的命令行参数@SpringBootTest(args&#x3D;&#123;&quot;--test.prop&#x3D;testValue2&quot;&#125;)public class PropertiesAndArgsTest &#123;        @Value(&quot;$&#123;test.prop&#125;&quot;)    private String msg;        @Test    void testProperties()&#123;        System.out.println(msg);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        使用注解@SpringBootTest的args属性就可以为当前测试用例模拟命令行参数并进行测试。</p><p>​        说到这里，如果两者共存呢？其实如果思考一下配置属性与命令行参数的加载优先级，这个结果就不言而喻了。在属性加载的优先级设定中，有明确的优先级设定顺序，还记得下面这个顺序吗？</p><img src="image-20211206100859236.png" alt="" style="zoom:67%;" /><p>​        在这个属性加载优先级的顺序中，明确规定了命令行参数的优先级排序是11，而配置属性的优先级是3，结果不言而喻了，args属性配置优先于properties属性配置加载。</p><p>​        到这里就掌握了如果在测试用例中去模拟临时属性的设定。</p><p><strong>总结</strong></p><ol><li>加载测试临时属性可以通过注解@SpringBootTest的properties和args属性进行设定，<strong>此设定应用范围仅适用于当前测试用例</strong></li></ol><h3 id="2、加载测试专用配置"><a href="#2、加载测试专用配置" class="headerlink" title="2、加载测试专用配置"></a>2、加载测试专用配置</h3><p>​        如果有临时配置一些专用于测试环境的bean的需求</p><p>​        一个spring环境中可以设置若干个配置文件或配置类，若干个配置信息可以同时生效。现在需求就是在测试环境中再添加一个配置类，然后启动测试环境时，生效此配置就行了。其实做法和spring环境中加载多个配置信息的方式完全一样。具体操作步骤如下：</p><p><strong>步骤①</strong>：在测试包test中创建专用的测试环境配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"bean msg"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        上述配置仅用于演示当前实验效果，实际开发可不能这么注入String类型的数据</p><p><strong>步骤②</strong>：在启动测试环境时，导入测试环境专用的配置类，使用@Import注解即可实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">MsgConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        到这里就通过@Import属性实现了基于开发环境的配置基础上，对配置进行测试环境的追加操作，实现了1+1的配置环境效果。这样就可以实现每一个不同的测试用例加载不同的bean的效果，丰富测试用例的编写，同时不影响开发环境的配置。</p><p><strong>总结</strong></p><ol><li>定义测试环境专用的配置类，然后通过@Import注解在具体的测试中导入临时的配置，例如测试用例，方便测试过程，且上述配置不影响其他的测试类环境</li></ol><h3 id="3、Web环境模拟测试"><a href="#3、Web环境模拟测试" class="headerlink" title="3、Web环境模拟测试"></a>3、Web环境模拟测试</h3><p>​        在测试中对表现层功能进行测试需要一个基础和一个功能。所谓的一个基础是运行测试程序时，必须启动web环境，不然没法测试web功能。一个功能是必须在测试程序中具备发送web请求的能力，不然无法实现web功能的测试。所以在测试用例中测试表现层接口这项工作就转换成了两件事，一，如何在测试类中启动web测试，二，如何在测试类中发送web请求。</p><p><strong>测试类中启动web环境</strong></p><p>​        每一个springboot的测试类上方都会标准@SpringBootTest注解，而注解带有一个属性，叫做webEnvironment。通过该属性就可以设置在测试用例中启动web环境，具体如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTest(webEnvironment &#x3D; SpringBootTest.WebEnvironment.RANDOM_PORT)public class WebTest &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        测试类中启动web环境时，可以指定启动的Web环境对应的端口，springboot提供了4种设置值，分别如下：</p><img src="image-20220223125453317.png" alt="" style="zoom:80%;" /><ul><li>MOCK：根据当前设置确认是否启动web环境，例如使用了Servlet的API就启动web环境，属于适配性的配置</li><li>DEFINED_PORT：使用自定义的端口作为web服务器端口</li><li>RANDOM_PORT：使用随机端口作为web服务器端口</li><li>NONE：不启动web环境</li></ul><p>​        通过上述配置，现在启动测试程序时就可以正常启用web环境了，<strong>建议测试时使用RANDOM_PORT</strong>，避免代码中因为写死设定引发线上功能打包测试时由于端口冲突导致意外现象的出现。就是说程序中写了用8080端口，结果线上环境8080端口被占用了，结果你代码中所有写的东西都要改，这就是写死代码的代价。现在用随机端口就可以测试出来有没有这种问题的隐患了。</p><p>​        测试环境中的web环境已经搭建好了，下面就可以来解决第二个问题了，如何在程序代码中发送web请求。</p><p><strong>测试类中发送请求</strong></p><p>​        对于测试类中发送请求，其实java的API就提供对应的功能，只不过平时各位小伙伴接触的比较少，所以较为陌生。springboot为了便于开发者进行对应的功能开发，对其又进行了包装，简化了开发步骤，具体操作如下：</p><p><strong>步骤①</strong>：在测试类中开启web虚拟调用功能，通过注解@AutoConfigureMockMvc实现此功能的开启</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：定义发起虚拟调用的对象MockMVC，通过自动装配的形式初始化对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤③</strong>：创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">MockMvc</span> mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//http://localhost:8080/books</span>        <span class="token comment">//创建虚拟请求，当前访问/books</span>        <span class="token class-name">MockHttpServletRequestBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行对应的请求</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        执行测试程序，现在就可以正常的发送/books对应的请求了，注意访问路径不要写<a href="http://localhost:8080/books%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%89%8D%E9%9D%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8IP%E5%9C%B0%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E5%BD%93%E5%89%8D%E8%99%9A%E6%8B%9F%E7%9A%84web%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%97%A0%E9%9C%80%E6%8C%87%E5%AE%9A%EF%BC%8C%E4%BB%85%E6%8C%87%E5%AE%9A%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B7%E4%BD%93%E8%B7%AF%E5%BE%84%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:8080/books，因为前面的服务器IP地址和端口使用的是当前虚拟的web环境，无需指定，仅指定请求的具体路径即可。</a></p><p><strong>总结</strong></p><ol><li>在测试类中测试web层接口要保障测试类启动时启动web容器，使用@SpringBootTest注解的webEnvironment属性可以虚拟web环境用于测试</li><li>为测试方法注入MockMvc对象，通过MockMvc对象可以发送虚拟请求，模拟web请求调用过程</li></ol><p><strong>web环境请求结果比对</strong></p><p>​        上面在测试用例中成功的模拟出了web环境，并成功的发送了web请求，现在解决发送请求后如何比对发送结果的问题。其实发完请求得到的信息只有一种，就是响应对象。至于响应对象中包含什么，就可以比对什么。常见的比对内容如下：</p><ul><li><p>响应状态匹配</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testStatus(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder &#x3D; MockMvcRequestBuilders.get(&quot;&#x2F;books&quot;);    ResultActions action &#x3D; mvc.perform(builder);    &#x2F;&#x2F;设定预期值 与真实值进行比较，成功测试通过，失败测试失败    &#x2F;&#x2F;定义本次调用的预期值    StatusResultMatchers status &#x3D; MockMvcResultMatchers.status();    &#x2F;&#x2F;预计本次调用时成功的：状态200    ResultMatcher ok &#x3D; status.isOk();    &#x2F;&#x2F;添加预计值到本次调用过程中进行匹配    action.andExpect(ok);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>响应体匹配（非json数据格式）</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testBody(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder &#x3D; MockMvcRequestBuilders.get(&quot;&#x2F;books&quot;);    ResultActions action &#x3D; mvc.perform(builder);    &#x2F;&#x2F;设定预期值 与真实值进行比较，成功测试通过，失败测试失败    &#x2F;&#x2F;定义本次调用的预期值    ContentResultMatchers content &#x3D; MockMvcResultMatchers.content();    ResultMatcher result &#x3D; content.string(&quot;springboot2&quot;);    &#x2F;&#x2F;添加预计值到本次调用过程中进行匹配    action.andExpect(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>响应体匹配（json数据格式，开发中的主流使用方式）</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testJson(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder &#x3D; MockMvcRequestBuilders.get(&quot;&#x2F;books&quot;);    ResultActions action &#x3D; mvc.perform(builder);    &#x2F;&#x2F;设定预期值 与真实值进行比较，成功测试通过，失败测试失败    &#x2F;&#x2F;定义本次调用的预期值    ContentResultMatchers content &#x3D; MockMvcResultMatchers.content();    ResultMatcher result &#x3D; content.json(&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;springboot2\&quot;,\&quot;type\&quot;:\&quot;springboot\&quot;&#125;&quot;);    &#x2F;&#x2F;添加预计值到本次调用过程中进行匹配    action.andExpect(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>响应头信息匹配</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testContentType(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder &#x3D; MockMvcRequestBuilders.get(&quot;&#x2F;books&quot;);    ResultActions action &#x3D; mvc.perform(builder);    &#x2F;&#x2F;设定预期值 与真实值进行比较，成功测试通过，失败测试失败    &#x2F;&#x2F;定义本次调用的预期值    HeaderResultMatchers header &#x3D; MockMvcResultMatchers.header();    ResultMatcher contentType &#x3D; header.string(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);    &#x2F;&#x2F;添加预计值到本次调用过程中进行匹配    action.andExpect(contentType);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​        基本上齐了，头信息，正文信息，状态信息都有了，就可以组合出一个完美的响应结果比对结果了。以下范例就是三种信息同时进行匹配校验，也是一个完整的信息匹配过程。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testGetById(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder &#x3D; MockMvcRequestBuilders.get(&quot;&#x2F;books&quot;);    ResultActions action &#x3D; mvc.perform(builder);    StatusResultMatchers status &#x3D; MockMvcResultMatchers.status();    ResultMatcher ok &#x3D; status.isOk();    action.andExpect(ok);    HeaderResultMatchers header &#x3D; MockMvcResultMatchers.header();    ResultMatcher contentType &#x3D; header.string(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;);    action.andExpect(contentType);    ContentResultMatchers content &#x3D; MockMvcResultMatchers.content();    ResultMatcher result &#x3D; content.json(&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;springboot\&quot;,\&quot;type\&quot;:\&quot;springboot\&quot;&#125;&quot;);    action.andExpect(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>web虚拟调用可以对本地虚拟请求的返回响应信息进行比对，分为响应头信息比对、响应体信息比对、响应状态信息比对</li></ol><h3 id="4、数据层测试回滚"><a href="#4、数据层测试回滚" class="headerlink" title="4、数据层测试回滚"></a>4、数据层测试回滚</h3><p>​        当前测试程序可以完美的进行表现层、业务层、数据层接口对应的功能测试了，但是测试用例开发完成后，在打包的阶段由于test生命周期属于必须被运行的生命周期，如果跳过会给系统带来极高的安全隐患，所以测试用例必须执行。但是新的问题就呈现了，测试用例如果测试时产生了事务提交就会在测试过程中对数据库数据产生影响，进而产生垃圾数据。这个过程不是希望发生的，作为开发者测试用例该运行运行，但是过程中产生的数据不要在我的系统中留痕，这样该如何处理呢？</p><p>​        springboot早就为开发者想到了这个问题，并且针对此问题给出了最简解决方案，在原始测试用例中添加注解@Transactional即可实现当前测试用例的事务不提交。当程序运行后，<strong>只要注解@Transactional出现的位置存在注解@SpringBootTest，springboot就会认为这是一个测试程序，无需提交事务，所以也就可以避免事务的提交。</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTest@Transactional@Rollback(true)public class DaoTest &#123;    @Autowired    private BookService bookService;    @Test    void testSave()&#123;        Book book &#x3D; new Book();        book.setName(&quot;springboot3&quot;);        book.setType(&quot;springboot3&quot;);        book.setDescription(&quot;springboot3&quot;);        bookService.save(book);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果开发者想提交事务，也可以，再添加一个@RollBack的注解，设置回滚状态为false即可正常提交事务。</p><p><strong>总结</strong></p><ol><li>在springboot的测试类中通过添加注解@Transactional来阻止测试用例提交事务</li><li>通过注解@Rollback控制springboot测试类执行结果是否提交事务，需要配合注解@Transactional使用</li></ol><h3 id="5、测试用例数据设定"><a href="#5、测试用例数据设定" class="headerlink" title="5、测试用例数据设定"></a>5、测试用例数据设定</h3><p>​        对于测试用例的数据固定书写肯定是不合理的，springboot提供了在配置中使用随机值的机制，确保每次运行程序加载的数据都是随机的。具体如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">testcase</span><span class="token punctuation">:</span>  <span class="token key atrule">book</span><span class="token punctuation">:</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token punctuation">&#125;</span>    <span class="token key atrule">id2</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int(10)<span class="token punctuation">&#125;</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token tag">!5</span><span class="token punctuation">,</span>10<span class="token tag">!</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.value<span class="token punctuation">&#125;</span>    <span class="token key atrule">uuid</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.uuid<span class="token punctuation">&#125;</span>    <span class="token key atrule">publishTime</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.long<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        当前配置就可以在每次运行程序时创建一组随机数据，避免每次运行时数据都是固定值的尴尬现象发生，有助于测试功能的进行。数据的加载按照之前加载数据的形式，使用@ConfigurationProperties注解即可</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix &#x3D; &quot;testcase.book&quot;)public class BookCase &#123;    private int id;    private int id2;    private int type;    private String name;    private String uuid;    private long publishTime;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于随机值的产生，还有一些小的限定规则，比如产生的数值性数据可以设置范围等，具体如下：</p><img src="image-20220223135454862.png" alt="" style="zoom:80%;" /><ul><li>${random.int}表示随机整数</li><li>${random.int(10)}表示10以内的随机数</li><li>${random.int(10,20)}表示10到20的随机数</li><li>其中()可以是任意字符，例如[]，!!均可</li></ul><p><strong>总结</strong></p><ol><li>使用随机数据可以替换测试用例中书写的固定数据，提高测试用例中的测试数据有效性</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot之运维篇</title>
      <link href="/2022/06/09/springboot-zhi-yun-wei-pian/"/>
      <url>/2022/06/09/springboot-zhi-yun-wei-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot之运维篇"><a href="#Springboot之运维篇" class="headerlink" title="Springboot之运维篇"></a>Springboot之运维篇</h1><h2 id="一、程序的打包与运行"><a href="#一、程序的打包与运行" class="headerlink" title="一、程序的打包与运行"></a>一、程序的打包与运行</h2><ol><li>SpringBoot工程可以基于java环境下独立运行jar文件启动服务</li><li>SpringBoot工程执行mvn命令package进行打包</li><li>执行jar命令：java –jar 工程名.jar</li><li>如有test环节，打包时应跳过test程序</li></ol><p>​    <font color="#ff0000"><b>特别关注</b></font>：在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这段配置不能删除，否则打包后无法正常执行程序。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;        &lt;&#x2F;plugin&gt;    &lt;&#x2F;plugins&gt;&lt;&#x2F;build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置的作用</strong></p><ol><li>SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包</li><li>首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类</li><li>JarLauncher类执行时会找到Start-Class属性，也就是启动类类名</li><li>运行启动类时会运行当前工程的内容</li><li>运行当前工程时会使用依赖的jar包，从lib目录中查找</li></ol><h2 id="二、命令行启动常见问题及解决方案"><a href="#二、命令行启动常见问题及解决方案" class="headerlink" title="二、命令行启动常见问题及解决方案"></a>二、命令行启动常见问题及解决方案</h2><p>在DOS环境下启动SpringBoot工程时，可能会遇到端口占用的问题。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA"># 查询端口netstat -ano    # 查询指定端口netstat -ano |findstr &quot;端口号&quot;    # 根据进程PID查询进程名称tasklist |findstr &quot;进程PID号&quot;    # 根据PID杀死任务taskkill &#x2F;F &#x2F;PID &quot;进程PID号&quot;    # 根据进程名称杀死任务taskkill -f -t -im &quot;进程名称&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、临时属性设置"><a href="#三、临时属性设置" class="headerlink" title="三、临时属性设置"></a>三、临时属性设置</h2><p>SpringBoot提供了灵活的配置方式，如果发现项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。在启动的时候添加上对应参数就可以。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">java –jar springboot.jar –-server.port&#x3D;80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        上面的命令是启动SpringBoot程序包的命令，在命令输入完毕后，空一格，然后输入两个-号。下面按照属性名=属性值的形式添加对应参数就可以了。记得，这里的格式不是yaml中的书写格式，当属性存在多级名称时，中间使用点分隔，和properties文件中的属性格式完全相同。</p><p>​        如果发现要修改的属性不止一个，可以按照上述格式继续写，属性与属性之间使用空格分隔。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">java –jar springboot.jar –-server.port&#x3D;80 --logging.level.root&#x3D;debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、配置文件分类"><a href="#四、配置文件分类" class="headerlink" title="四、配置文件分类"></a>四、配置文件分类</h2><p>SpringBoot提供了配置文件和临时属性的方式来对程序进行配置。配置文件一直在使用，只不过用的是SpringBoot提供的4级配置文件中的其中一个级别。4个级别分别是：</p><ul><li>类路径下配置文件（一直使用的是这个，也就是resources目录中的application.yml文件）</li><li>类路径下config目录下配置文件</li><li>程序包所在目录中配置文件</li><li>程序包所在目录中config目录下配置文件</li></ul><p>上面4个文件的加载优先顺序为</p><ol><li>file ：config/application.yml <strong>【最高】</strong></li><li>file ：application.yml</li><li>classpath：config/application.yml</li><li>classpath：application.yml  <strong>【最低】</strong></li></ol><p><strong>总结</strong></p><ol><li><p>配置文件分为4种</p><ul><li>项目类路径配置文件：服务于开发人员本机开发与测试</li><li>项目类路径config目录中配置文件：服务于项目经理整体调控</li><li>工程路径配置文件：服务于运维人员配置涉密线上环境</li><li>工程路径config目录中配置文件：服务于运维经理整体调控</li></ul></li><li><p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p></li></ol><h2 id="五、自定义配置文件"><a href="#五、自定义配置文件" class="headerlink" title="五、自定义配置文件"></a>五、自定义配置文件</h2><p>自定义配置文件方式有如下两种：</p><p><strong>方式一：使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名</strong></p><img src="image-20211206105548238.png" style="zoom:67%;" /><p><strong>方式二：使用临时属性设置配置文件路径，这个是全路径名</strong></p><img src="image-20211206105716450.png" style="zoom:67%;" /><p>也可以设置加载多个配置文件</p><img src="image-20211206105750285.png" style="zoom:67%;" /><p>​        使用的属性一个是spring.config.name，另一个是spring.config.location，这个一定要区别清楚。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        现在研究的都是SpringBoot单体项目，就是单服务器版本。其实企业开发现在更多的是使用基于SpringCloud技术的多服务器项目，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息。为了集中管理。</p><p><strong>总结</strong></p><ol><li>配置文件可以修改名称，通过启动参数设定</li><li>配置文件可以修改路径，通过启动参数设定</li><li>微服务开发中配置文件通过配置中心进行设置</li></ol><h2 id="六、多环境开发（yaml多文件版）"><a href="#六、多环境开发（yaml多文件版）" class="headerlink" title="六、多环境开发（yaml多文件版）"></a>六、多环境开发（yaml多文件版）</h2><p>​        将所有的配置都放在一个配置文件中，尤其是每一个配置应用场景都不一样，这显然不合理，于是就有了将一个配置文件拆分成多个配置文件的想法。拆分后，每个配置文件中写自己的配置，主配置文件中写清楚用哪一个配置文件就好了。</p><p><strong>主配置文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> pro<span class="token comment"># 启动pro</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>环境配置文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        环境配置文件因为每一个都是配置自己的项，所以连名字都不用写里面了。那问题是如何区分这是哪一组配置呢？使用文件名区分。</p><p><strong>application-pro.yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>application-dev.yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        文件的命名规则为：application-环境名.yml。</p><p>​        在配置文件中，如果某些配置项所有环境都一样，可以将这些项写入到主配置中，只有哪些有区别的项才写入到环境配置文件中。</p><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><p><strong>总结</strong></p><ol><li><p>可以使用独立配置文件定义环境属性</p></li><li><p>独立配置文件便于线上系统维护更新并保障系统安全性</p></li></ol><h2 id="七、多环境开发独立配置文件书写技巧"><a href="#七、多环境开发独立配置文件书写技巧" class="headerlink" title="七、多环境开发独立配置文件书写技巧"></a>七、多环境开发独立配置文件书写技巧</h2><p>​        作为程序员在搞配置的时候往往处于一种分久必合合久必分的局面。开始先写一起，后来为了方便维护就拆分。对于多环境开发也是如此，下面是如何基于多环境开发做配置独立管理。</p><p><strong>准备工作</strong></p><p>​        将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul><p><strong>使用</strong></p><p>​        使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">include</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        比较一下，现在相当于加载dev配置时，再加载对应的3组配置，从结构上就很清晰，用了什么，对应的名称是什么</p><p><strong>注意</strong></p><p>​        当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</p><p><strong>改良</strong></p><p>​        但上面的设置也有一个问题，比如要切换dev环境为pro时，include也要修改。因为include属性只能使用一次。SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。简单说就是我先写好，你爱用哪个用哪个。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token key atrule">"dev"</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC      <span class="token key atrule">"pro"</span><span class="token punctuation">:</span> proDB<span class="token punctuation">,</span>proRedis<span class="token punctuation">,</span>proMVC      <span class="token key atrule">"test"</span><span class="token punctuation">:</span> testDB<span class="token punctuation">,</span>testRedis<span class="token punctuation">,</span>testMVC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在再来看，如果切换dev到pro，只需要改一下。</p><p><strong>总结</strong></p><ol><li>多环境开发使用group属性设置配置文件分组，便于线上维护管理</li></ol><h2 id="八、多环境开发控制"><a href="#八、多环境开发控制" class="headerlink" title="八、多环境开发控制"></a>八、多环境开发控制</h2><p>​        maven和SpringBoot同时设置多环境的话怎么搞。</p><p>​        要想处理这个冲突问题，你要先理清一个关系，究竟谁在多环境开发中其主导地位。也就是说如果现在都设置了多环境，谁的应该是保留下来的，另一个应该遵从相同的设置。</p><p>​        maven是做什么的？项目构建管理的，最终生成代码包的，SpringBoot是干什么的？简化开发的。简化，又不是其主导作用。最终还是要靠maven来管理整个工程，所以SpringBoot应该听maven的。整个确认后下面就好做了。大体思想如下：</p><ul><li>先在maven环境中设置用什么具体的环境</li><li>在SpringBoot中读取maven设置的环境即可</li></ul><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--默认启动环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SpringBoot中读取maven设置值</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> @profile.active@<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><p><strong>总结</strong></p><ol><li>当Maven与SpringBoot同时对多环境进行控制时，以Mavn为主，SpringBoot使用@..@占位符读取Maven对应的配置属性值</li><li>基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</li></ol><h2 id="九、日志"><a href="#九、日志" class="headerlink" title="九、日志"></a>九、日志</h2><p>​        日志其实就是记录程序日常运行的信息，主要作用如下：</p><ul><li>编程期调试代码</li><li>运营期记录信息<ul><li>记录日常运营重要信息（峰值流量、平均响应时长……）</li><li>记录应用报错信息（错误堆栈）</li><li>记录运维过程数据（扩容、宕机、报警……）</li></ul></li></ul><h3 id="1、代码中使用日志工具记录日志"><a href="#1、代码中使用日志工具记录日志" class="headerlink" title="1、代码中使用日志工具记录日志"></a>1、代码中使用日志工具记录日志</h3><p>​        日志的使用格式非常固定，直接上操作步骤：</p><p><strong>步骤①</strong>：添加日志记录操作</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@RestController@RequestMapping(&quot;&#x2F;books&quot;)public class BookController extends BaseClass&#123;    private static final Logger log &#x3D; LoggerFactory.getLogger(BookController.class);    @GetMapping    public String getById()&#123;        log.debug(&quot;debug...&quot;);        log.info(&quot;info...&quot;);        log.warn(&quot;warn...&quot;);        log.error(&quot;error...&quot;);        return &quot;springboot is running...2&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        上述代码中log对象就是用来记录日志的对象，下面的log.debug，log.info这些操作就是写日志的API了。</p><p><strong>步骤②</strong>：设置日志输出级别</p><p>​        日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。日志的级别分为6种，分别是：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入ERROR</li></ul><p>​        一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。下面就设置一下日志级别：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        这么设置太简单粗暴了，日志系统通常都提供了细粒度的控制</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 设置日志级别，root表示根节点，即整体应用日志级别</span><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还可以再设置更细粒度的控制</p><p><strong>步骤③</strong>：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span><span class="token comment"># 设置日志组</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span>    <span class="token comment"># 自定义组名，设置当前组中所包含的包</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> com.itheima.controller    <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> warn        <span class="token comment"># 为对应组设置日志级别</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> debug    <span class="token comment"># 为对包设置日志级别</span>        <span class="token key atrule">com.itheima.controller</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        说白了就是总体设置一下，每个包设置一下，如果感觉设置的麻烦，就先把包分个组，对组设置，没了，就这些。</p><p><strong>总结</strong></p><ol><li>日志用于记录开发调试与运维过程消息</li><li>日志的级别共6种，通常使用4种即可，分别是DEBUG，INFO,WARN,ERROR</li><li>可以通过日志组或代码包的形式进行日志显示级别的控制</li></ol><h4 id="教你一招：优化日志对象创建代码"><a href="#教你一招：优化日志对象创建代码" class="headerlink" title="教你一招：优化日志对象创建代码"></a>教你一招：优化日志对象创建代码</h4><p>​        写代码的时候每个类都要写创建日志记录对象，这个可以优化一下，使用前面用过的lombok技术提供的工具类即可。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@RestController@RequestMapping(&quot;&#x2F;books&quot;)public class BookController extends BaseClass&#123;    private static final Logger log &#x3D; LoggerFactory.getLogger(BookController.class);&#x2F;&#x2F;这一句可以不写了&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        导入lombok后使用注解搞定，日志对象名为log</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Slf4j&#x2F;&#x2F;这个注解替代了下面那一行@RestController@RequestMapping(&quot;&#x2F;books&quot;)public class BookController extends BaseClass&#123;    private static final Logger log &#x3D; LoggerFactory.getLogger(BookController.class);&#x2F;&#x2F;这一句可以不写了&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>基于lombok提供的@Slf4j注解为类快速添加日志对象</li></ol><h3 id="2、日志文件"><a href="#2、日志文件" class="headerlink" title="2、日志文件"></a>2、日志文件</h3><p>​        日志信息显示，记录已经控制住了，下面就要说一下日志的转存了。日志不能仅显示在控制台上，要把日志记录到文件中，方便后期维护查阅。</p><p>​        对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。这里主要研究日志文件如何记录。</p><p>​        记录日志到文件中格式非常简单，设置日志文件名即可。</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">logging:file:    name: server.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        虽然使用上述格式可以将日志记录下来了，但是面对线上的复杂情况，一个文件记录肯定是不能够满足运维要求的，通常会每天记录日志文件，同时为了便于维护，还要限制每个日志文件的大小。下面给出日志文件的常用配置方式：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">logging:logback:    rollingpolicy:        max-file-size: 3KB            file-name-pattern: server.%d&#123;yyyy-MM-dd&#125;.%i.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        以上格式是基于logback日志技术设置每日日志文件的设置格式，要求容量到达3KB以后就转存信息到第二个文件中。文件命名规则中的%d标识日期，%i是一个递增变量，用于区分日志文件。</p><p><strong>总结</strong></p><ol><li>日志记录到文件</li><li>日志文件格式设置</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot之基础篇</title>
      <link href="/2022/06/01/springboot-zhi-ji-chu-pian/"/>
      <url>/2022/06/01/springboot-zhi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot之基础篇"><a href="#Springboot之基础篇" class="headerlink" title="Springboot之基础篇"></a>Springboot之基础篇</h1><h2 id="一、SpringBoot入门程序制作"><a href="#一、SpringBoot入门程序制作" class="headerlink" title="一、SpringBoot入门程序制作"></a>一、SpringBoot入门程序制作</h2><p><strong>步骤①</strong>：创建新模块，选择Spring Initializr，并配置模块相关基础信息</p><p><img src="/2022/06/01/springboot-zhi-ji-chu-pian/image-20211116125259385.png" alt="image-20211116125259385"></p><p>​    <font color="#ff0000"><b>特别关注</b></font>：第3步点击Next时，Idea需要联网状态才可以进入到后面那一页，如果不能正常联网，就无法正确到达右面那个设置页了，会一直<font color="#ff0000"><b>联网</b></font>转转转</p><p>​    <font color="#ff0000"><b>特别关注</b></font>：第5步选择java版本和计算机上安装的JDK版本匹配即可，但是最低要求为JDK8或以上版本，推荐使用8或11</p><p><strong>步骤②</strong>：选择当前模块需要使用的技术集</p><p><img src="/2022/06/01/springboot-zhi-ji-chu-pian/image-20211116125615728.png" alt="image-20211116125615728"></p><p>​    按照要求，左侧选择web，然后在中间选择Spring Web即可，选完右侧就出现了新的内容项，这就表示勾选成功了</p><p>​    <font color="#ff0000"><b>关注</b></font>：此处选择的SpringBoot的版本使用默认的就可，需要说一点，SpringBoot的版本升级速度很快，可能昨天创建工程的时候默认版本是2.5.4，今天再创建工程默认版本就变成2.5.5了，无需过于纠结，回头可以到配置文件中修改对应的版本</p><p><strong>步骤③</strong>：开发控制器类</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;Rest模式@RestController@RequestMapping(&quot;&#x2F;books&quot;)public class BookController &#123;    @GetMapping    public String getById()&#123;        System.out.println(&quot;springboot is running...&quot;);        return &quot;springboot is running...&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    SpringMVC的控制器基于Rest风格开发，当然此处使用原始格式制作SpringMVC的程序也是没有问题的，上例中的@RestController与@GetMapping注解是基于Restful开发的典型注解</p><p>​    <font color="#ff0000"><b>关注</b></font>：做到这里SpringBoot程序的最基础的开发已经做完了，现在就可以正常的运行Spring程序了。</p><p><strong>步骤④</strong>：运行自动生成的Application类</p><p><img src="/2022/06/01/springboot-zhi-ji-chu-pian/image-20211116130152452.png" alt="image-20211116130152452"></p><p>​    使用带main方法的java程序的运行形式来运行程序，运行完毕后，控制台输出上述信息。</p><p>​    通过浏览器访问请求的路径，测试功能是否工作正常了</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">访问路径：http:&#x2F;&#x2F;localhost:8080&#x2F;books<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    从开发者角度来看，目前只有两个文件展现到了开发者面前</p><ul><li><p>pom.xml</p><p>​    maven的配置文件，描述了当前工程构建时相应的配置信息</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;        &lt;version&gt;2.5.4&lt;&#x2F;version&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;springboot_01_01_quickstart&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置中有两个信息需要关注，一个是parent，也就是当前工程继承了另外一个工程，还有依赖坐标</p></li><li><p>Application类</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class Application &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Application.class, args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这个类功能很简单，就一句代码，前面运行程序就是运行的这个类</p></li></ul><p>​    Spring程序相比，SpringBoot程序在开发的过程中各个层面均具有优势</p><table><thead><tr><th><strong>类配置文件</strong></th><th><strong>Spring</strong></th><th><strong>SpringBoot</strong></th></tr></thead><tbody><tr><td>pom文件中的坐标</td><td><strong>手工添加</strong></td><td><strong>勾选添加</strong></td></tr><tr><td>web3.0配置类</td><td><strong>手工制作</strong></td><td><strong>无</strong></td></tr><tr><td>Spring/SpringMVC配置类</td><td><strong>手工制作</strong></td><td><strong>无</strong></td></tr><tr><td>控制器</td><td><strong>手工制作</strong></td><td><strong>手工制作</strong></td></tr></tbody></table><p>​    一句话总结一下就是<font color="#ff0000"><b>能少写就少写</b></font>，<font color="#ff0000"><b>能不写就不写</b></font></p><p><strong>总结</strong></p><ol><li><p>开发SpringBoot程序可以根据向导进行联网快速制作</p></li><li><p>SpringBoot程序需要基于JDK8以上版本进行制作</p></li><li><p>SpringBoot程序中需要使用何种功能通过勾选选择技术，也可以手工添加对应的要使用的技术（后期讲解）</p></li><li><p>运行SpringBoot程序通过运行Application程序入口进行</p></li><li><p>联网创建工程时，网站如果被限制访问，切换选择starter服务路径，然后手工输入阿里云提供的使用地址即可。地址：<a href="http://start.aliyun.com或https//start.aliyun.com">http://start.aliyun.com或https://start.aliyun.com</a></p><p><img src="/2022/06/01/springboot-zhi-ji-chu-pian/image-20211122163605950.png" alt="image-20211122163605950"></p></li></ol><h2 id="二、在Idea中隐藏指定文件-文件夹"><a href="#二、在Idea中隐藏指定文件-文件夹" class="headerlink" title="二、在Idea中隐藏指定文件/文件夹"></a>二、在Idea中隐藏指定文件/文件夹</h2><p><strong>步骤①</strong>：打开设置，【Files】→【Settings】</p><img src="image-20211122173835517.png" alt="image-20211122173835517" style="zoom:80%;" /><p><strong>步骤②</strong>：打开文件类型设置界面，【Editor】→【File Types】→【Ignored Files and Folders】，忽略文件或文件夹显示</p><img src="image-20211122174020028.png" alt="image-20211122174020028" style="zoom: 67%;" /><p><strong>步骤③</strong>：添加要隐藏的文件名称或文件夹名称，可以使用*号通配符，表示任意，设置完毕即可</p><p><strong>总结</strong></p><ol><li>Idea中隐藏指定文件或指定类型文件<ol><li>【Files】→【Settings】</li><li>【Editor】→【File Types】→【Ignored Files and Folders】</li><li>输入要隐藏的名称，支持*号通配符</li><li>回车确认添加</li></ol></li></ol><h2 id="三、SpringBoot简介"><a href="#三、SpringBoot简介" class="headerlink" title="三、SpringBoot简介"></a>三、SpringBoot简介</h2><p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</p><p><strong>Spring程序缺点</strong></p><ul><li>依赖设置繁琐</li><li>配置繁琐</li></ul><p><strong>SpringBoot程序优点</strong></p><ul><li>起步依赖（简化依赖配置）</li><li>自动配置（简化常用工程相关配置）</li><li>辅助功能（内置服务器，……）</li></ul><h2 id="四、REST风格"><a href="#四、REST风格" class="headerlink" title="四、REST风格"></a>四、REST风格</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p><strong>REST（Representational State Transfer）：表现形式状态转换</strong></p><ul><li><p><strong>传统风格资源描述形式</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://localhost/user/getById?id=1http://localhost/user/saveUser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>REST风格描述形式</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://localhost/user/1http://localhost/user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>优点</strong></p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li><li><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://localhost/users# 查询全部用户信息（GET）http://localhost/users/1# 查询指定用户信息（GET）http://localhost/users# 添加用户信息（POST）http://localhost/users# 修改用户信息（PUT）http://localhost/users/1# 删除用户信息（DELETE）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>描述模块名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源</p></li></ul><h3 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token comment">// 相当于@RestsponseBody和@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">IBookService</span> bookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>         <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;currentPage&#125;/&#123;pageSize&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> currentPage<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/06/01/springboot-zhi-ji-chu-pian/image-20220525171758568.png" alt="image-20220525171758568"></p><h2 id="五、基础配置"><a href="#五、基础配置" class="headerlink" title="五、基础配置"></a>五、基础配置</h2><h3 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h3><p>SpringBoot除了支持properties格式的配置文件，还支持另外两种格式的配置文件。分别如下:</p><ul><li><p>properties格式</p></li><li><p>yml格式</p></li><li><p>yaml格式</p></li><li><p>application.properties（properties格式）</p></li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>application.yml（yml格式）<strong>常用</strong></li></ul><pre class="line-numbers language-YML" data-language="YML"><code class="language-YML">server:  port: 81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>application.yaml（yaml格式）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>3个文件的加载优先顺序是</li></ul><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">application.properties  &gt;  application.yml  &gt;  application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留 </li></ul><h3 id="2、自动提示功能消失解决方案"><a href="#2、自动提示功能消失解决方案" class="headerlink" title="2、自动提示功能消失解决方案"></a>2、自动提示功能消失解决方案</h3><p>指定SpringBoot配置文件</p><ul><li>Setting → Project Structure → Facets</li><li>选中对应项目/工程</li><li>Customize Spring Boot</li><li>选择配置文件</li></ul><h3 id="3、yaml文件书写风格"><a href="#3、yaml文件书写风格" class="headerlink" title="3、yaml文件书写风格"></a>3、yaml文件书写风格</h3><p>对于yaml文件自身在书写时，具有严格的语法格式要求，具体如下：</p><ol><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ol><p>  上述规则不要死记硬背，按照书写习惯慢慢适应，并且在Idea下由于具有提示功能，慢慢适应着写格式就行了。核心的一条规则要记住，<font color="#ff0000"><b>数据前面要加空格与冒号隔开</b></font></p><p>​    下面列出常见的数据书写格式</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">boolean: TRUE  #TRUE,true,True,FALSE,false，False均可float: 3.14    #6.8523015e+5  #支持科学计数法int: 123       #0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制null: ~        #使用~表示nullstring: HelloWorld      #字符串可以直接书写string2: &quot;Hello World&quot;  #可以使用双引号包裹特殊字符date: 2018-02-17        #日期必须使用yyyy-MM-dd格式datetime: 2018-02-17T15:02:31+08:00  #时间和日期之间使用T连接，最后使用+代表时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此外，yaml格式中也可以表示数组，在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">subject:- Java- 前端- 大数据enterprise:name: itcast    age: 16    subject:    - Java        - 前端        - 大数据likes: [王者荣耀,刺激战场]#数组书写缩略格式users: #对象数组格式一  - name: Tom   age: 4  - name: Jerry    age: 5users: #对象数组格式二  -      name: Tom    age: 4  -       name: Jerry    age: 5    users2: [ &#123; name:Tom , age:4 &#125; , &#123; name:Jerry , age:5 &#125; ]#对象数组缩略格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、yaml数据读取"><a href="#4、yaml数据读取" class="headerlink" title="4、yaml数据读取"></a>4、yaml数据读取</h3><h4 id="①-读取单一数据"><a href="#①-读取单一数据" class="headerlink" title="① 读取单一数据"></a>① 读取单一数据</h4><p>​    yaml中保存的单个数据，可以使用Spring中的注解直接读取，使用@Value可以读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p><img src="image-20211126180433356.png" alt="image-20211126180433356" style="zoom:80%;" /><p>​    记得使用@Value注解时，要将该注入写在某一个指定的Spring管控的bean的属性名上方。现在就可以读取到对应的单一数据行了</p><p><strong>总结</strong></p><ol><li>使用@Value配合SpEL读取单个数据</li><li>如果数据存在多层级，依次书写层级名称即可</li></ol><h4 id="②-读取全部数据"><a href="#②-读取全部数据" class="headerlink" title="② 读取全部数据"></a>② 读取全部数据</h4><p>​    读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p><img src="image-20211126180738569.png" alt="image-20211126180738569" style="zoom:80%;" /><p>​    数据封装到了Environment对象中，获取属性时，通过Environment的接口操作进行，具体方法时getProperties（String），参数填写属性名即可</p><p><strong>总结</strong></p><ol><li>使用Environment对象封装全部配置信息</li><li>使用@Autowired自动装配数据到Environment对象中</li></ol><h4 id="③-读取对象数据"><a href="#③-读取对象数据" class="headerlink" title="③ 读取对象数据"></a>③ 读取对象数据</h4><p>​    单一数据读取书写比较繁琐，全数据封装又封装的太厉害了，每次拿数据还要一个一个的getProperties（）,总之用起来都不是很舒服。由于Java是一个面向对象的语言，很多情况下，我们会将一组数据封装成一个对象。SpringBoot也提供了可以将一组yaml对象数据封装一个Java对象的操作</p><p>​    首先定义一个对象，并将该对象纳入Spring管控的范围，也就是定义成一个bean，然后使用注解@ConfigurationProperties指定该对象加载哪一组yaml中配置的信息。</p><img src="image-20211126181126382.png" alt="image-20211126181126382" style="zoom:80%;" /><p>​    这个@ConfigurationProperties必须告诉他加载的数据前缀是什么，这样当前前缀下的所有属性就封装到这个对象中。记得数据属性名要与对象的变量名一一对应啊，不然没法封装。其实以后如果你要定义一组数据自己使用，就可以先写一个对象，然后定义好属性，下面到配置中根据这个格式书写即可。</p><p>​    <img src="image-20211126181423432.png" alt="image-20211126181423432" style="zoom:80%;" /></p><p>​    <font color="#f0f"><b>温馨提示</b></font></p><p>​        细心的小伙伴会发现一个问题，自定义的这种数据在yaml文件中书写时没有弹出提示，是这样的，咱们到原理篇再揭秘如何弹出提示。</p><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties注解绑定配置信息到封装类中</li><li>封装类需要定义为Spring管理的bean，否则无法进行属性注入</li></ol><h4 id="④-yaml文件中的数据引用"><a href="#④-yaml文件中的数据引用" class="headerlink" title="④ yaml文件中的数据引用"></a>④ yaml文件中的数据引用</h4><p>​    如果在书写yaml数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">center:dataDir: &#x2F;usr&#x2F;local&#x2F;fire&#x2F;data    tmpDir: &#x2F;usr&#x2F;local&#x2F;fire&#x2F;tmp    logDir: &#x2F;usr&#x2F;local&#x2F;fire&#x2F;log    msgDir: &#x2F;usr&#x2F;local&#x2F;fire&#x2F;msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">center:dataDir: D:&#x2F;usr&#x2F;local&#x2F;fire&#x2F;data    tmpDir: D:&#x2F;usr&#x2F;local&#x2F;fire&#x2F;tmp    logDir: D:&#x2F;usr&#x2F;local&#x2F;fire&#x2F;log    msgDir: D:&#x2F;usr&#x2F;local&#x2F;fire&#x2F;msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可以使用引用格式来定义数据，其实就是搞了个变量名，然后引用变量了，格式如下：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">baseDir: &#x2F;usr&#x2F;local&#x2F;firecenter:    dataDir: $&#123;baseDir&#125;&#x2F;data    tmpDir: $&#123;baseDir&#125;&#x2F;tmp    logDir: $&#123;baseDir&#125;&#x2F;log    msgDir: $&#123;baseDir&#125;&#x2F;msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    还有一个注意事项，在书写字符串时，如果需要使用转义字符，需要将数据字符串使用双引号包裹起来</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">lesson: &quot;Spring\tboot\nlesson&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>在配置文件中可以使用${属性名}方式引用属性值</li><li>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</li></ol><h2 id="六、整合"><a href="#六、整合" class="headerlink" title="六、整合"></a>六、整合</h2><p>代码见本地文件，可提出几个注意事项</p><h3 id="1、Lombok"><a href="#1、Lombok" class="headerlink" title="1、Lombok"></a>1、Lombok</h3><p>Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发，SpringBoot目前默认集成了lombok技术，并提供了对应的版本控制，所以只需要提供对应的坐标即可，在pom.xml中添加lombok的坐标。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;!--lombok--&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用lombok可以通过一个注解@Data完成一个实体类对应的getter，setter，toString，equals，hashCode等操作的快速添加</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">import lombok.Data;@Datapublic class Book &#123;    private Integer id;    private String type;    private String name;    private String description;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、MP"><a href="#2、MP" class="headerlink" title="2、MP"></a>2、MP</h3><p>用MP的标准通用接口BaseMapper加速开发，别忘了@Mapper和泛型的指定</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao extends BaseMapper&lt;Book&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color="#f0f"><b>温馨提示</b></font></p><p>​    MP技术默认的主键生成策略为雪花算法，生成的主键ID长度较大，和目前的数据库设定规则不相符，需要配置一下使MP使用数据库的主键生成策略，方式嘛还是老一套，做配置。在application.yml中添加对应配置即可，具体如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db<span class="token punctuation">?</span>serverTimezone=UTC      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> tbl_<span class="token comment">#设置表名通用前缀</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto<span class="token comment">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义MP拦截器并将其设置为Spring管控的bean</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Configurationpublic class MPConfig &#123;    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor()&#123;        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor());        return interceptor;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上述代码第一行是创建MP的拦截器栈，这个时候拦截器栈中没有具体的拦截器，第二行是初始化了分页拦截器，并添加到拦截器栈中。如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础篇</title>
      <link href="/2022/04/21/maven/"/>
      <url>/2022/04/21/maven/</url>
      
        <content type="html"><![CDATA[<p>毕业后要找实习，找工作了，趁这段时间复习了一波maven的知识</p><h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h3 id="1、Maven是什么"><a href="#1、Maven是什么" class="headerlink" title="1、Maven是什么"></a>1、Maven是什么</h3><ul><li>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）</li><li>POM（Project Object Model）：项目对象模型</li></ul><p><img src="/2022/04/21/maven/image-20220421125246213.png"></p><h3 id="2、Maven的作用"><a href="#2、Maven的作用" class="headerlink" title="2、Maven的作用"></a>2、Maven的作用</h3><ul><li>项目构建：提供标准的、跨平台的自动化项目构建方式</li><li>依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突问题</li><li>统一开发结构：提供标准的、统一的项目结构</li></ul><h2 id="二、Maven基础概念"><a href="#二、Maven基础概念" class="headerlink" title="二、Maven基础概念"></a>二、Maven基础概念</h2><h3 id="1、仓库"><a href="#1、仓库" class="headerlink" title="1、仓库"></a>1、仓库</h3><ul><li>仓库：用于存储资源，包含各种jar包</li><li>仓库分类：<ul><li>本地仓库：自己电脑上存储资源的仓库，连接远程仓库获取资源</li><li>远程仓库：非本机电脑上的仓库，为本地仓库提供资源<ul><li>中央仓库：Maven团队维护，存储所有资源的仓库</li><li>私服：部门/公司范围内存储资源的仓库，从中央仓库获取资源</li></ul></li></ul></li><li>私服的作用：<ul><li>保存具有版权的资源，包含购买或自主研发的jar（中央仓库中的jar都是开源的，不能存储具有版权的资源）</li><li>一定范围内共享资源，仅对内部开发，不对外共享</li></ul></li></ul><h3 id="2、坐标"><a href="#2、坐标" class="headerlink" title="2、坐标"></a>2、坐标</h3><ul><li><p>坐标：用于描述仓库中资源的位置</p></li><li><p>主要组成</p><ul><li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，如org.mybatis）</p></li><li><p>artifactId：定义当前Maven项目名称（通常是模块名称，如CRM）</p></li><li><p>version：定义当前项目版本号</p></li><li><p>packaging：定义该项目的打包方式</p></li></ul></li></ul><h3 id="3、dos命令窗口mvn命令"><a href="#3、dos命令窗口mvn命令" class="headerlink" title="3、dos命令窗口mvn命令"></a>3、dos命令窗口mvn命令</h3><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">mvn compile<span class="token comment"># 编译</span>mvn clean<span class="token comment"># 清理</span>mvn test<span class="token comment"># 测试</span>mvn package<span class="token comment"># 打包</span>mvn install<span class="token comment"># 安装到本地仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、依赖管理"><a href="#三、依赖管理" class="headerlink" title="三、依赖管理"></a>三、依赖管理</h2><h3 id="1、依赖配置"><a href="#1、依赖配置" class="headerlink" title="1、依赖配置"></a>1、依赖配置</h3><ul><li><p>依赖指当前项目运行所需的jar，一个项目可以设置多个依赖</p></li><li><p>格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--设置当前项目所依赖的所有jar--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设置具体依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--依赖所属群组id--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--依赖所属项目id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--依赖版本号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、依赖传递"><a href="#2、依赖传递" class="headerlink" title="2、依赖传递"></a>2、依赖传递</h3><p><strong>依赖具有传递性</strong></p><ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被资源的资源如果依赖其他资源，当前项目间接依赖其他资源</li></ul><h3 id="3、可选依赖"><a href="#3、可选依赖" class="headerlink" title="3、可选依赖"></a>3、可选依赖</h3><ul><li>可选依赖指对外隐藏当前所依赖的资源——不透明</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、排除依赖"><a href="#4、排除依赖" class="headerlink" title="4、排除依赖"></a>4、排除依赖</h3><ul><li>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本——不需要</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcreast-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、依赖范围"><a href="#5、依赖范围" class="headerlink" title="5、依赖范围"></a>5、依赖范围</h3><ul><li>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</li><li>作用范围<ul><li>主程序范围有效（main文件夹范围内）</li><li>测试程序范围有效（test文件夹范围内）</li><li>是否参与打包（package指令范围内）</li></ul></li></ul><p><img src="/2022/04/21/maven/image-20220422223000428.png"></p><h2 id="四、生命周期与插件"><a href="#四、生命周期与插件" class="headerlink" title="四、生命周期与插件"></a>四、生命周期与插件</h2><h3 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h3><ul><li>Maven对项目构建的生命周期划分为3套<ul><li>clean：清理工作</li><li>default：核心工作，例如编译，测试，打包，部署等</li><li>site：产生报告，发布站点</li></ul></li></ul><h3 id="2、插件"><a href="#2、插件" class="headerlink" title="2、插件"></a>2、插件</h3><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认maven在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul><h2 id="五、聚合"><a href="#五、聚合" class="headerlink" title="五、聚合"></a>五、聚合</h2><ul><li><p>作用：聚合用于快速构建maven工程，一次性构建多个项目/模块</p></li><li><p>制作方式：</p><ul><li><p>创建一个空模块，打包类型定义为pom</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义当前模块进行构建操作时关联的其他模块名称</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../ssm_pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../ssm_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>注意事项：参与聚合操作的模块最终执行顺序与模块间的依赖关系有关，与配置顺序无关</p></li></ul><h2 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h2><ul><li><p>作用：通过继承可以实现在子工程中沿用父工程中的配置</p><ul><li>maven中的继承与java中的继承相似，在子工程中配置继承关系</li></ul></li><li><p>制作方式：</p><ul><li><p>在子工程中声明其父工程坐标与对应的位置</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--定义该工程的父工程--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--填写父工程的pom文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../ssm/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><img src="/2022/04/21/maven/image-20220423000659137.png"></p><h2 id="七、属性"><a href="#七、属性" class="headerlink" title="七、属性"></a>七、属性</h2><h3 id="1、自定义属性"><a href="#1、自定义属性" class="headerlink" title="1、自定义属性"></a>1、自定义属性</h3><ul><li><p>作用：等同于定义变量，方便统一维护</p></li><li><p>定义格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--定义自定义属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、内置属性"><a href="#2、内置属性" class="headerlink" title="2、内置属性"></a>2、内置属性</h3><ul><li><p>作用：使用maven内置属性，快速配置</p></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;basedir&#125;$&#123;version&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="3、setting属性"><a href="#3、setting属性" class="headerlink" title="3、setting属性"></a>3、setting属性</h3><ul><li><p>作用：使用maven配置文件setting.xml中的标签属性，用于动态配置</p></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;settings.localRepository&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="4、Java系统属性"><a href="#4、Java系统属性" class="headerlink" title="4、Java系统属性"></a>4、Java系统属性</h3><ul><li><p>作用：读取java系统属性</p></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;userhome&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>系统属性查询方式：</p><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">mvn help<span class="token dfn builtin">:</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="5、环境变量属性"><a href="#5、环境变量属性" class="headerlink" title="5、环境变量属性"></a>5、环境变量属性</h3><ul><li><p>作用：使用maven配置文件setting.xml中的标签属性，用于动态配置</p></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;env.JAVA_HOME&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>环境属性查询方式：</p><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl">mvn help<span class="token dfn builtin">:</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="八、资源配置"><a href="#八、资源配置" class="headerlink" title="八、资源配置"></a>八、资源配置</h2><ul><li><p>作用：在任意配置文件中加载pom文件中定义的属性</p></li><li><p>调用格式：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$&#123;jdbc.url&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启配置文件加载pom属性</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--配置资源文件对应的信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--设定配置文件对应的位置目录，支持使用属性动态设定路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>$&#123;project.basedir&#125;/src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--开启对配置文件的资源加载过滤--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="九、多环境配置"><a href="#九、多环境配置" class="headerlink" title="九、多环境配置"></a>九、多环境配置</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--配置多环境--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--定义具体环境：生产环境--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--定义环境中专用的属性值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>pro_env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--定义环境中专用的属性值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbc.url</span><span class="token punctuation">></span></span>jdbc:mysql//127.1.1.1:3306/ssm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbc.url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置默认启动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--定义具体环境：开发环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev_env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、跳过测试"><a href="#十、跳过测试" class="headerlink" title="十、跳过测试"></a>十、跳过测试</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置跳过测试--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skifTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skifTests</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--包含指定的测试用例--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>--/User*Test.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--排除指定的测试用例--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>**/User*TestCase.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习之LayUI篇</title>
      <link href="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/"/>
      <url>/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220322205630092.png"></p><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p><code>LayUI</code>是一款采用自身模块规范编写的前端<code>UI</code>框架，该框架定义了很多前后端交互的样式接口，如分页表格，只需在前端配置好接口，后端则按照定义好的接口规则返回数据，即可完成页面的展示</p><h2 id="2、LayUI的特点"><a href="#2、LayUI的特点" class="headerlink" title="2、LayUI的特点"></a>2、LayUI的特点</h2><ul><li><code>LayUI</code>属于轻量级框架，简单美观，适用于开发后端模式，在服务端页面有非常好的效果</li><li><code>LayUI</code>是提供给后端开发人员的<code>UI</code>框架，基于<code>DOM</code>驱动</li></ul><h2 id="3、引入代码"><a href="#3、引入代码" class="headerlink" title="3、引入代码"></a>3、引入代码</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 文件位置要随本地改 --></span><span class="token comment">&lt;!-- 引入 layui.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//unpkg.com/layui@2.6.8/dist/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 引入 layui.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//unpkg.com/layui@2.6.8/dist/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、页面元素"><a href="#二、页面元素" class="headerlink" title="二、页面元素"></a>二、页面元素</h1><h2 id="1、布局"><a href="#1、布局" class="headerlink" title="1、布局"></a>1、布局</h2><h3 id="1-1-布局容器"><a href="#1-1-布局容器" class="headerlink" title="1.1 布局容器"></a>1.1 布局容器</h3><h4 id="1-1-1-固定宽度"><a href="#1-1-1-固定宽度" class="headerlink" title="1.1.1 固定宽度"></a>1.1.1 <strong>固定宽度</strong></h4><ul><li><p>将栅格放入一个带有 <code>class=&quot;layui-container&quot;</code> 的特定的容器中，以便在小屏幕以上的设备中固定宽度，让列可控。</p></li><li><p>固定宽度的两侧有留白效果</p></li><li><p>```html</p><div class="layui-container" style="选颜色">    固定宽度的两侧有留白效果</div><pre class="line-numbers language-none"><code class="language-none">#### 1.1.2 **完整宽度**- 可以不固定容器宽度。将栅格或其它元素放入一个带有 &#96;class&#x3D;&quot;layui-fluid&quot;&#96;的容器中，那么宽度将不会固定，而是 100% 适应- 完整宽度占据屏幕宽度的100%- &#96;&#96;&#96;html  &lt;div class&#x3D;&quot;layui-fluid&quot; style&#x3D;&quot;选颜色&quot;&gt;      完整宽度  &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-栅格系统"><a href="#1-2-栅格系统" class="headerlink" title="1.2 栅格系统"></a>1.2 栅格系统</h3><p>为了丰富网页布局，简化代码耦合，<code>layui</code>引入了一套具备响应式能力的山歌系统 将容器进行了 12 等分，预设了 4*12 种 <code>CSS</code> 排列类，它们在移动设备、平板、桌面中/大尺寸四种不同的屏幕下发挥着各自的作用</p><h4 id="1-2-1-布局规则"><a href="#1-2-1-布局规则" class="headerlink" title="1.2.1 布局规则"></a>1.2.1 <strong>布局规则</strong></h4><ul><li><p>采用 <code>class=&quot;layui-row&quot;</code> 来定义行，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>采用类似<code>layui-col-md*</code>这样的预设类来定义一组列(column)，且放在行(row)中   </p><ul><li>变量 <code>md</code> 代表的是不同屏幕下的标记</li><li>变量 <code>*</code> 代表的是该列所占用的12等分数（如6/12），可选值为 1 - 12</li><li>如果多个列的“等分数值”总和等于12，则刚好满行排列。如果大于12，多余的列将自动另起一行。</li></ul></li><li><p>列可以同时出现最多四种不同的组合，分别是：<em>xs</em>（超小屏幕，如手机）、<em>sm</em>（小屏幕，如平板）、<em>md</em>（桌面中等屏幕）、<em>lg</em>（桌面大型屏幕），以呈现更加动态灵活的布局。</p></li><li><p>可对列追加类似 <code>layui-col-space5</code>、 <code>layui-col-md-offset3</code> 这样的预设类来定义列的间距和偏移。</p></li><li><p>可以在列（column）元素中放入你自己的任意元素填充内容，完成布局</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 布局容器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 定义行 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 定义列，列总数不能超12，否则会换行--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            内容的5/12        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            内容的7/12        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-响应式规则"><a href="#1-2-2-响应式规则" class="headerlink" title="1.2.2 响应式规则"></a>1.2.2 响应式规则</h4><p>简单来说，就是会针对四类不同尺寸的屏幕，进行响应式适配处理</p><table><thead><tr><th align="left"></th><th align="left">超小屏幕 (手机&lt;768px)</th><th align="left">小屏幕 (平板≥768px)</th><th align="left">中等屏幕 (桌面≥992px)</th><th>大型屏幕 (桌面≥1200px)</th></tr></thead><tbody><tr><td align="left"><strong><em>.layui-container</em>的值</strong></td><td align="left">auto</td><td align="left">750px</td><td align="left">970px</td><td>1170px</td></tr><tr><td align="left"><strong>标记</strong></td><td align="left">xs</td><td align="left">sm</td><td align="left">md</td><td>lg</td></tr><tr><td align="left"><strong>列对应类 * 为1-12的等分数值</strong></td><td align="left"><code>layui-col-xs*</code></td><td align="left"><code>layui-col-sm*</code></td><td align="left"><code>layui-col-md*</code></td><td><code>layui-col-lg*</code></td></tr><tr><td align="left"><strong>总列数</strong></td><td align="left">12</td><td align="left">12</td><td align="left">12</td><td>12</td></tr><tr><td align="left"><strong>响应行为</strong></td><td align="left">始终按设定的比例水平排列</td><td align="left">在当前屏幕下水平排列，如果屏幕大小低于临界值则堆叠排列</td><td align="left">在当前屏幕下水平排列，如果屏幕大小低于临界值则堆叠排列</td><td>在当前屏幕下水平排列，如果屏幕大小低于临界值则堆叠排列</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-sm6 layui-col-md4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    平板：6/12 | 桌面端：4/12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-列边距"><a href="#1-2-3-列边距" class="headerlink" title="1.2.3 列边距"></a>1.2.3 列边距</h4><ul><li><p>设定列之间的间距</p></li><li><p>且一行中最左的列不会出现左边距，最右的列不会出现右边距</p></li><li><p>列间距在保证排版美观的同时，还可以进一步保证分列的宽度精细程度。</p></li><li><p>给容器添加<code>class=&quot;layui-col-space*&quot;</code></p></li><li><p><code>*</code> 支持1px-30px区间的所有双数间隔，以及 1px、5px、15px、25px 的单数间隔</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row layui-col-space20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容的5/12    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        内容的7/12    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-列偏移"><a href="#1-2-4-列偏移" class="headerlink" title="1.2.4 列偏移"></a>1.2.4 列偏移</h4><p>如果需要的间距高于30px（一般不常见），需要采用列偏移</p><ul><li><p>对列追加类似 <code>layui-col-md-offset*</code> 的预设类，从而让列向右偏移   </p></li><li><p>其中 <code>*</code> 号代表的是偏移占据的列数，可选中为 1 - 12</p></li><li><p>如 <code>layui-col-md-offset3</code> ，即代表在 中型桌面屏幕下，让该列向右偏移3个列宽度</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md4 layui-col-md-offset4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        向右移动4列    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-列嵌套"><a href="#1-2-5-列嵌套" class="headerlink" title="1.2.5 列嵌套"></a>1.2.5 列嵌套</h4><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220322223836207.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 大的盒子占6列 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">brackground-color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 嵌套列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md3<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> burlywood</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    内部列                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md5<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> bindianred</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    内部列                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-col-md2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> mediumaquamarine</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                    内部列                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-按钮"><a href="#1-3-按钮" class="headerlink" title="1.3 按钮"></a>1.3 按钮</h3><h4 id="1-3-1-按钮风格"><a href="#1-3-1-按钮风格" class="headerlink" title="1.3.1 按钮风格"></a>1.3.1 按钮风格</h4><ul><li>向任意 HTML 元素设定 <code>class=&quot;layui-btn&quot;</code> ，建立一个基础按钮</li><li>通过追加样式为 <code>class=&quot;layui-btn-&#123;type&#125;&quot;</code> 来定义其他按钮风格</li></ul><table><thead><tr><th align="left">名称</th><th align="left">组合</th></tr></thead><tbody><tr><td align="left">原始</td><td align="left"><code>class=&quot;layui-btn layui-btn-primary&quot;</code></td></tr><tr><td align="left">默认</td><td align="left"><code>class=&quot;layui-btn&quot;</code></td></tr><tr><td align="left">百搭</td><td align="left"><code>class=&quot;layui-btn layui-btn-normal&quot;</code></td></tr><tr><td align="left">暖色</td><td align="left"><code>class=&quot;layui-btn layui-btn-warm&quot;</code></td></tr><tr><td align="left">警告</td><td align="left"><code>class=&quot;layui-btn layui-btn-danger&quot;</code></td></tr><tr><td align="left">禁用</td><td align="left"><code>class=&quot;layui-btn layui-btn-disabled&quot;</code></td></tr></tbody></table><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220322224528111.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一个标准的按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.layuiweb.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一个可跳转的按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2-按钮大小"><a href="#1-3-2-按钮大小" class="headerlink" title="1.3.2 按钮大小"></a>1.3.2 按钮大小</h4><table><thead><tr><th align="left">尺寸</th><th align="left">组合</th></tr></thead><tbody><tr><td align="left">大型</td><td align="left"><code>class=&quot;layui-btn layui-btn-lg&quot;</code></td></tr><tr><td align="left">默认</td><td align="left"><code>class=&quot;layui-btn&quot;</code></td></tr><tr><td align="left">小型</td><td align="left"><code>class=&quot;layui-btn layui-btn-sm&quot;</code></td></tr><tr><td align="left">迷你</td><td align="left"><code>class=&quot;layui-btn layui-btn-xs&quot;</code></td></tr><tr><td align="left">流体按钮(最大化适应)</td><td align="left"><code>class=&quot;layui-btn layui-btn-fluid&quot;</code></td></tr></tbody></table><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220322224850296.png"></p><h4 id="1-3-4-圆角按钮"><a href="#1-3-4-圆角按钮" class="headerlink" title="1.3.4 圆角按钮"></a>1.3.4 圆角按钮</h4><p>在代码中添加<code>layui-btn-radius</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn layui-btn-radius<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一个标准的圆形按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-5-图标按钮"><a href="#1-3-5-图标按钮" class="headerlink" title="1.3.5 图标按钮"></a>1.3.5 图标按钮</h4><ul><li>对 i 标签 设定 <code>class=&quot;layui-icon&quot;</code></li><li>然后对元素加上图标对应的 <code>font-class</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-icon layui-icon-down layui-font-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn layui-btn-sm layui-btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-icon layui-icon-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-导航"><a href="#1-4-导航" class="headerlink" title="1.4 导航"></a>1.4 导航</h3><ul><li>导航一般应用于头部和侧边，是整个网页画龙点晴般的存在</li><li>依赖加载模块：<code>element</code></li></ul><p><strong>实现步骤：</strong></p><ol><li><p>引入资源</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>依赖加载模块</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 注意：导航 依赖 element 模块，否则无法进行功能性操作</span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> element <span class="token operator">=</span> layui<span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>显示指定类型的导航</p></li></ol><h4 id="1-4-1-水平导航"><a href="#1-4-1-水平导航" class="headerlink" title="1.4.1 水平导航"></a>1.4.1 水平导航</h4><ul><li>给一个无序列表 <code>ul</code> 添加 <code>class=&quot;layui-nav&quot;</code></li><li>给 <code>li</code> 添加 <code>class=&quot;layui-nav-ithm&quot;</code> 表示的是导航的子项</li><li>给 <code>li</code> 添加 <code>class=&quot;layui-this&quot;</code> 表示当前被选中的项</li><li>给 <code>li</code> 里面容器添加 <code>class=&quot;layui-nav-child&quot;</code> 表示的是二级菜单</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--水平导航 layui-navlayui-nav-item 表示的是导航的子项layui-this 表示当前被选中的项layui-nav-child 表示的是二级菜单--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav<span class="token punctuation">"</span></span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>最新活动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item layui-this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>产品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>解决方案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 二级菜单 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>移动模块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>后台模版<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电商平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>社区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//注意：导航 依赖 element 模块，否则无法进行功能性操作</span>        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> element <span class="token operator">=</span> layui<span class="token punctuation">.</span>element<span class="token punctuation">;</span>            <span class="token comment">//…</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323153140994.png"></p><h4 id="1-4-2-图片与徽章"><a href="#1-4-2-图片与徽章" class="headerlink" title="1.4.2 图片与徽章"></a>1.4.2 图片与徽章</h4><p>除了一般的文字导航，还内置了图片和徽章的支持，如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>控制台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-badge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-badge-dot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//t.cn/RCzsdCq<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav-child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>安全管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323155326838.png"></p><h4 id="1-4-3-导航主题"><a href="#1-4-3-导航主题" class="headerlink" title="1.4.3 导航主题"></a>1.4.3 导航主题</h4><p>通过对导航追加<code>CSS</code>背景类，让导航呈现不同的主题色</p><ul><li>给无序列表 <code>ul</code> 添加 <code>class=&quot;layui-nav layui-bg-green&quot;</code> 可设置墨绿色背景的导航</li><li>水平导航支持其他的背景主题有：<code>layui-bg-cyan</code>(藏青)、<code>layui-bg-molv</code>(墨绿)、<code>layui-bg-blue</code>(艳蓝)</li><li>垂直导航支持的其他背景颜色有：<code>layui-bg-cyan</code> (藏青)</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-nav layui-bg-green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-4-垂直导航"><a href="#1-4-4-垂直导航" class="headerlink" title="1.4.4 垂直导航"></a>1.4.4 垂直导航</h4><ul><li>给无序列表 <code>ul</code> 添加 <code>class=&quot;layui-nav layui-nav-tree&quot;</code></li><li>给 <code>li</code> 添加 <code>class=&quot;layui-nav-item layui-nav-itemed&quot;</code> 表示此子项目是默认展开的</li></ul><h4 id="1-4-5-侧边导航"><a href="#1-4-5-侧边导航" class="headerlink" title="1.4.5 侧边导航"></a>1.4.5 侧边导航</h4><ul><li>给无序列表 <code>ul</code> 添加 <code>class=&quot;layui-nav layui-nav-tree layui-nav-side&quot;</code></li><li>设定<code>layui-this</code>来指向当前页面分类</li></ul><h4 id="1-4-6-面包屑导航"><a href="#1-4-6-面包屑导航" class="headerlink" title="1.4.6 面包屑导航"></a>1.4.6 面包屑导航</h4><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323155847246.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-breadcrumb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>国际新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亚太地区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">></span></span>正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以通过设置属性 <code>lay-separator=&quot;-&quot;</code> 来自定义分隔符，如</p><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323155925927.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-breadcrumb<span class="token punctuation">"</span></span> <span class="token attr-name">lay-separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>国际新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亚太地区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">></span></span>正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，还可以作为小导航来用，如：</p><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323160024059.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-breadcrumb<span class="token punctuation">"</span></span> <span class="token attr-name">lay-separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>娱乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>八卦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>体育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搞笑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>综艺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-选项卡"><a href="#1-5-选项卡" class="headerlink" title="1.5 选项卡"></a>1.5 选项卡</h3><ul><li>导航菜单可应用于头部和侧边，Tab选项卡提供多套风格，支持响应式，支持删除选项卡等功能。</li><li>依赖加载模块：<code>element</code></li></ul><h4 id="1-5-1-实现步骤"><a href="#1-5-1-实现步骤" class="headerlink" title="1.5.1 实现步骤"></a><strong>1.5.1 实现步骤</strong></h4><ol><li><p>引入资源</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>依赖加载模块</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 注意：导航 依赖 element 模块，否则无法进行功能性操作</span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> element <span class="token operator">=</span> layui<span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="1-5-2-选项卡风格"><a href="#1-5-2-选项卡风格" class="headerlink" title="1.5.2 选项卡风格"></a>1.5.2 选项卡风格</h4><ul><li><p>默认风格给容器添加 ：<code>class=&quot;layui-tab&quot;</code></p></li><li><p>简洁风格给容器追加：<code>class=&quot;layui-tab-brief&quot;</code></p></li><li><p>卡片风格给容器需要追加：<code>class=&quot;layui-tab-card&quot;</code></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 简洁风格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab layui-tab-brief<span class="token punctuation">"</span></span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>docDemoTabBrief<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 选项卡标题 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网站设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>权限分配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>商品管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>订单管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 选项卡内容 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 默认显示此内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item layui-show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 卡片风格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab layui-tab-card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网站设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>权限分配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>商品管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>订单管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-content<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item layui-show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center.png"></p><h4 id="1-5-3-带删除的Tab"><a href="#1-5-3-带删除的Tab" class="headerlink" title="1.5.3 带删除的Tab"></a>1.5.3 带删除的Tab</h4><p>可以对父层容器设置属性 <code>lay-allowClose=&quot;true&quot;</code> 来允许Tab选项卡被删除</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab<span class="token punctuation">"</span></span> <span class="token attr-name">lay-allowClose</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-this<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网站设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>用户基本管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>权限分配<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>全部历史商品管理文字长一点试试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>订单管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item layui-show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-tab-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323162230517.png"></p><h3 id="1-6-表格"><a href="#1-6-表格" class="headerlink" title="1.6 表格"></a>1.6 表格</h3><h4 id="1-6-1-常规用法"><a href="#1-6-1-常规用法" class="headerlink" title="1.6.1 常规用法"></a>1.6.1 常规用法</h4><ul><li><p>给 <code>table</code> 标签增加 <code>class=&quot;layui-table&quot;</code></p></li><li><p>在<code>colgroup</code> 标签中定义表格列的宽度</p><pre><code>`&lt;col width=&quot;数值&quot;&gt;` 表示相应列所占的宽度</code></pre></li><li><p><code>thead</code> 标签表示表格的头部区域</p><pre><code>`tr` 标签用于定义表格中的行(行头)    `th` 标签用于定义表格中的表头(列头)</code></pre></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 基础表格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>colgroup</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 第一列宽150px，第二列宽300px，第三列自适应100% --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>col</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>colgroup</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- thead表示表格的头部区域，其内部必须拥有tr标签--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>加入时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>签名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>贤心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2016-11-29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>人生就像是一场修行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>许闲心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2016-11-28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323163424215.png"></p><h4 id="1-6-2-基础属性"><a href="#1-6-2-基础属性" class="headerlink" title="1.6.2 基础属性"></a>1.6.2 基础属性</h4><p><strong>静态表格</strong>支持以下基础属性，可定义不同风格/尺寸的表格样式：</p><table><thead><tr><th align="left">属性名</th><th align="left">属性值</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">lay-even</td><td align="left">无</td><td align="left">用于开启 <em>隔行</em> 背景，可与其它属性一起使用</td></tr><tr><td align="left">lay-skin=”属性值”</td><td align="left">line （行边框风格） row （列边框风格） nob （无边框风格）</td><td align="left">若使用默认风格不设置该属性即可</td></tr><tr><td align="left">lay-size=”属性值”</td><td align="left">sm （小尺寸） lg （大尺寸）</td><td align="left">若使用默认尺寸不设置该属性即可</td></tr></tbody></table><p>将所需要的基础属性写在table标签上即可，如（一个带有隔行背景，且行边框风格的大尺寸表格）：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">lay-even</span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span> <span class="token attr-name">lay-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-7-表单"><a href="#1-7-表单" class="headerlink" title="1.7 表单"></a>1.7 表单</h3><h4 id="1-7-1-实现步骤"><a href="#1-7-1-实现步骤" class="headerlink" title="1.7.1 实现步骤"></a>1.7.1 实现步骤</h4><ol><li><p>引入资源</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>依赖加载模块</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 注意：导航 依赖 element 模块，否则无法进行功能性操作</span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> form <span class="token operator">=</span> layui<span class="token punctuation">.</span>form<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在一个容器中设定 <code>class=&quot;layui-form&quot;</code> 来标识一个表单元素块</p></li><li><p>基本的行区块结构，提供了响应式的支持。</p><p>给 div 添加 <code>class=&quot;layui-form-item&quot;</code> 代表”行“</p><p>给 label 添加 <code>class=&quot;layui-form-label&quot;</code> 代表”区“</p><p>给 div 添加 <code>class=&quot;layui-input-inline&quot;</code> 代表”块“</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 表单元素块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 行 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 区 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 块 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 输入框 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入标题<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码框区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323165710834.png"></p></li></ol><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323173943444.png"></p><h4 id="1-7-2-输入框"><a href="#1-7-2-输入框" class="headerlink" title="1.7.2 输入框"></a>1.7.2 输入框</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 输入框 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入标题<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>required</code>：注册浏览器所规定的必填字段</li><li><code>lay-verify=&quot;required&quot;</code> ：注册 <code>form</code> 模块需要验证的类型</li><li><code>class=&quot;layui-input&quot;</code>：<code>layui.css</code> 提供的通用 <code>CSS</code> 类</li></ul><h4 id="1-7-3-下拉选择框"><a href="#1-7-3-下拉选择框" class="headerlink" title="1.7.3 下拉选择框"></a>1.7.3 下拉选择框</h4><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323170640657.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择一个城市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>021<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0571<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过 <code>selected</code> 属性设置默认选中项</p></li><li><p>通过 <code>disabled</code> 属性开启禁用，可以设置 select 和 option 标签(表示禁用下拉框和禁用下拉选项)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>021<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>上海（禁用效果）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0571<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>杭州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323170737373.png"></p></li><li><p>通过 <code>optgroup</code> 标签给 select 分组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quiz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>城市记忆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你工作的第一个城市<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你工作的第一个城市？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>学生时代<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的工号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你的工号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你最喜欢的老师<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你最喜欢的老师？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323170814503.png"></p></li><li><p>通过设置 <code>lay-search</code> 属性开启搜索匹配功能</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">lay-search</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>layer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>021<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0571<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>layim<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  ……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323170845645.png"></p></li></ul><h4 id="1-7-4-复选框"><a href="#1-7-4-复选框" class="headerlink" title="1.7.4 复选框"></a>1.7.4 复选框</h4><ul><li>通过设置 <code>title</code> 属性设置自定义文本(如果不需要显示文本，则不设置 title 属性)</li><li>通过 <code>checked</code> 属性设置被选中的项</li><li>通过·<code>lay-skin</code> 属性设置复选框的样式效果(<code>lay-skin=&quot;primary&quot;</code> 表示原始效果)</li><li>通过 <code>disabled</code> 属性禁用元素</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 默认风格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>写作<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发呆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>禁用<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 原始风格 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>写作<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发呆<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>禁用<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171041209.png"></p><h4 id="1-7-5-开关"><a href="#1-7-5-开关" class="headerlink" title="1.7.5 开关"></a>1.7.5 开关</h4><ul><li>将复选框，设置 <code>lay-skin=&quot;switch&quot;</code> 形成开关风格</li><li>通过 <code>lay-text=&quot;打开的值|关闭的值&quot;</code> 来设定开关的两种状态的文本，通过<code>|</code> 分隔</li><li>通过 <code>checked</code> 属性设置默认打开状态</li><li>通过 <code>disabled</code> 属性禁用开关</li><li>通过 <code>value</code> 属性设置选中的值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyy<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch<span class="token punctuation">"</span></span> <span class="token attr-name">lay-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ON|OFF<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zzz<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch<span class="token punctuation">"</span></span> <span class="token attr-name">lay-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开启|关闭<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token attr-name">lay-skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171215759.png"></p><h4 id="1-7-6-单选框"><a href="#1-7-6-单选框" class="headerlink" title="1.7.6 单选框"></a>1.7.6 单选框</h4><ul><li>通过 <code>checked</code> 设置默认选中项</li><li>通过 <code>disabled</code> 属性禁用单选框</li><li>通过 <code>value</code> 属性设置选中的值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nan<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>中性<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171301585.png"></p><h4 id="1-7-7-文本域"><a href="#1-7-7-文本域" class="headerlink" title="1.7.7 文本域"></a>1.7.7 文本域</h4><ul><li>给 <code>textarea</code> 标签添加<code>class=&quot;layui-textarea&quot;</code></li><li><code>layui.css</code>提供的通用<code>CSS</code>类</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">lay-verify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-textarea<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171645208.png"></p><h4 id="1-7-8-组装行内表单"><a href="#1-7-8-组装行内表单" class="headerlink" title="1.7.8 组装行内表单"></a>1.7.8 组装行内表单</h4><p>行内表单：表单元素在一行显示（div 盒子也不会全部占完宽度）</p><ul><li>给 div 设置 <code>class=&quot;layui-inline&quot;</code> ： 定义外层行内</li><li>给 div 设置 <code>class=&quot;layui-input-inline&quot;</code> ：定义内层行内</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>范围<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price_min<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>￥<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-mid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price_max<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>￥<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-inline<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171736648.png"></p><h4 id="1-7-9-忽略美化渲染"><a href="#1-7-9-忽略美化渲染" class="headerlink" title="1.7.9 忽略美化渲染"></a>1.7.9 忽略美化渲染</h4><p>对表单元素增加属性 <code>lay-ignore</code> 设置后，将不会对该标签进行美化渲染，即保留系统风格</p><p>一般不推荐这样做。事实上form组件所提供的接口，对其渲染过的元素，足以应付几乎所有的业务需求。如果忽略渲染，可能会让UI风格不和谐</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">lay-ignore</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/image-20220323171952619.png"></p><h4 id="1-7-10-表单方框风格"><a href="#1-7-10-表单方框风格" class="headerlink" title="1.7.10 表单方框风格"></a>1.7.10 表单方框风格</h4><ul><li>给 form 标签追加 <code>class=&quot;layui-form-pane &quot;</code>，来设定表单的方框风格。</li><li>内部结构不变，值得注意的是：<strong>复选框/开关/单选框</strong> 这些组合在该风格下需要额外添加 <code>pane</code>属性</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form layui-form-pane<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-item<span class="token punctuation">"</span></span> <span class="token attr-name">pane</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-form-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单选框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input-block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h2><h3 id="2-1-弹出层"><a href="#2-1-弹出层" class="headerlink" title="2.1 弹出层"></a>2.1 弹出层</h3><h4 id="2-1-1-使用场景"><a href="#2-1-1-使用场景" class="headerlink" title="2.1.1 使用场景"></a>2.1.1 使用场景</h4><p>由于layer可以独立使用，也可以通过Layui模块化使用。按照实际需求来选择。</p><table><thead><tr><th align="left">场景</th><th align="left">用前准备</th><th align="left">调用方式</th></tr></thead><tbody><tr><td align="left">作为独立组件使用</td><td align="left">只是单独想使用 layer，可以去 <a href="https://www.layuiweb.com/layer/index.htm">layer</a> 独立版本官网下载组件包。需要在页面引入<em>jQuery</em>1.8以上的任意版本，并引入<em>layer.js</em></td><td align="left">通过script标签引入layer.js后，直接用即可<a href="http://www.layuiweb.com/layer/hello.html">http://www.layuiweb.com/layer/hello.html</a>)</td></tr><tr><td align="left">layui 模块化使用</td><td align="left">如果你使用的是 layui，那么你直接在官网下载 layui 框架即可，无需引入 jQuery 和 layer.js，但需要引入<em>layui.css</em>和<em>layui.js</em></td><td align="left">通过*layui.use(‘layer’, callback)*加载模块</td></tr></tbody></table><h4 id="2-1-2-作为独立组件使用-layer"><a href="#2-1-2-作为独立组件使用-layer" class="headerlink" title="2.1.2 作为独立组件使用 layer"></a>2.1.2 作为独立组件使用 layer</h4><ol><li><p>引入资源</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 引入layer.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layer/layer.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 引入jquery.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-3.4.1.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 引入layer.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layer/layer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-1-3-模块使用"><a href="#2-1-3-模块使用" class="headerlink" title="2.1.3 模块使用"></a>2.1.3 模块使用</h4><ol><li><p>引入资源</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 模块化使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/css/layui.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>依赖模块</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加载模块 <span class="token operator">--</span><span class="token operator">></span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'layer'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> layer <span class="token operator">=</span> layui<span class="token punctuation">.</span>layer<span class="token punctuation">;</span>                layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-1-4-基础参数"><a href="#2-1-4-基础参数" class="headerlink" title="2.1.4 基础参数"></a>2.1.4 基础参数</h4><p><strong>1、type - 基本蹭蹭类型</strong></p><ul><li>类型 Number ， 默认为0</li><li>layer 提供了5 种层类型。可传入的值有   <ul><li>0 ：信息框，默认</li><li>1 ： 页面层</li><li>2 ： iframe层</li><li>3 ： 加载层</li><li>4 ： tips层</li></ul></li><li>若采用 <code>layer.open(&#123;type:1&#125;)</code> 方式调用，则 type 为必填项(信息框除外)</li></ul><p><strong>2、title - 标题</strong></p><ul><li><p>类型：String/Array/Boolean，默认 ‘信息’</p></li><li><p>title 支持三种类型的值</p><ul><li><p>若传入的是普通的字符串，如：<code>title:&#39;我是标题&#39;</code> ，那么只会改变标题文本；</p></li><li><p>若需要自定义标题区域样式，<code>title:[&#39;文本&#39;,&#39;font-size: 18px&#39;]</code>，数组第二项可以写任意<code>css</code> 样式</p></li><li><p>若不想显示标题栏，<code>title: false</code></p></li></ul></li></ul><p><strong>3、content - 内容</strong></p><ul><li>类型：String/DOM/Array，默认：’’</li><li>content可传入的值是灵活多变的，不仅可以传入普通的html内容，还可以指定DOM<ul><li>页面层 ,就是信息提示</li><li>iframe 弹出来的是页面,例如百度页面</li><li>tips 就是一个信息提示小框</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加载模块 <span class="token operator">--</span><span class="token operator">></span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'layer'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> layer <span class="token operator">=</span> layui<span class="token punctuation">.</span>layer<span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 信息框 <span class="token operator">--</span><span class="token operator">></span>        layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>           <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"系统消息"</span>           <span class="token literal-property property">content</span><span class="token operator">:</span><span class="token string">"Hello"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面层 <span class="token operator">--</span><span class="token operator">></span>        layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'传入任意的文本或html'</span> <span class="token comment">//这里content是一个普通的String</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> iframe层 <span class="token operator">--</span><span class="token operator">></span>layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'http://sentsin.com'</span> <span class="token comment">//这里content是一个URL，如果你不想让iframe出现滚动条，你还可以content: ['http://sentsin.com', 'no']</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> tips层 <span class="token operator">--</span><span class="token operator">></span>        layer<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'内容'</span><span class="token punctuation">,</span> <span class="token string">'#id'</span><span class="token punctuation">]</span> <span class="token comment">//数组第二项即吸附元素选择器或者DOM</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、area - 宽高</strong></p><ul><li><p>类型：String/Array，默认：’auto’</p></li><li><p>在默认状态下，layer是宽高都自适应的，但当你只想定义宽度时，你可以<em>area: ‘500px’<em>，高度仍然是自适应的。当你宽高都要定义时，你可以</em>area: [‘500px’, ‘300px’]</em></p></li><li><p>```html<br>layer.open({</p><pre><code>type: 2, content: &#39;http://sentsin.com&#39;,area: [&#39;500px&#39;, &#39;300px&#39;]</code></pre><p>});</p><pre class="line-numbers language-none"><code class="language-none">**5、btn - 按钮**- 类型：String&#x2F;Array，默认 ‘确认’- 信息框(type &#x3D; 0)模式时，btn默认是一个确认按钮，其它层类型则默认不显示，加载层和tips层则无效。- 当只想自定义一个按钮时，可以 btn: &#39;我知道了&#39;，当要定义两个按钮时，你可以btn: [&#39;yes&#39;, &#39;no&#39;]- 当然，也可以定义更多按钮，比如：&#96;btn: [&#39;按钮1&#39;, &#39;按钮2&#39;, &#39;按钮3&#39;, …]&#96;，按钮1的回调是&#96;yes&#96;，而从按钮2开始，则回调为&#96;btn2: function()&#123;&#125;&#96;，以此类推**6、time - 自动关闭所需毫秒**- 类型：Number，默认为0- 默认不会关闭。当你想关闭时，可以 &#96;time:5000&#96; ，即代表 5 s 后自动关闭**7、icon - 图标**- 类型：Number，默认：-1(信息框) &#x2F; 0(加载层)- 信息框默认不显示图标。当你想显示图标时，默认皮肤可以传入*0-6*- 如果是加载层，可以传入*0-2*&#96;&#96;&#96;html&lt;body&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;        layui.use(&#39;layer&#39;, function() &#123;            var layer &#x3D; layui.layer;            layer.msg(&#39;你愿意和我做朋友么？&#39;, &#123;                time: 0, &#x2F;&#x2F;不自动关闭                btn: [&#39;当然愿意&#39;, &#39;狠心拒绝&#39;], &#x2F;&#x2F; [按钮1,按钮2]                                &#x2F;&#x2F; 按钮1的回调函数                yes: function(index) &#123;                    layer.close(index); &#x2F;&#x2F; 关闭当前弹出框                    layer.msg(&#39;新朋友，你好！&#39;, &#123;                        icon: 6, &#x2F;&#x2F; 图标                        btn: [&#39;开心&#39;, &#39;快乐&#39;]                    &#125;);                &#125;,                                &#x2F;&#x2F; 按钮2的回调函数                btn2: function(index) &#123;                    layer.close(index); &#x2F;&#x2F; 关闭当前弹出框                    layer.msg(&#39;好吧,再见!&#39;, &#123;                        icon: 5,                        btn: &#39;88&#39;                    &#125;)                &#125;            &#125;);        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-1-5-核心方法"><a href="#2-1-5-核心方法" class="headerlink" title="2.1.5 核心方法"></a>2.1.5 核心方法</h4><p><strong>1、layer.open(options)</strong></p><ul><li>原始核心方法</li><li>创建任何类型的弹层都会返回一个当前层索引，上述的 <em>options</em> 即是基础参数</li></ul><p><strong>2、layer.alert()</strong></p><ul><li>普通信息框，只是一个简单的弹出操作</li></ul><p><strong>3、layer.msg()</strong></p><ul><li>提示框</li><li>默认是 3s 关闭</li></ul><p><strong>4、layer.load()</strong></p><ul><li>加载层</li><li>加载层默认是不会自动关闭的</li></ul><h3 id="2-2-日期与时间选择"><a href="#2-2-日期与时间选择" class="headerlink" title="2.2 日期与时间选择"></a>2.2 日期与时间选择</h3><h4 id="2-2-1-快速使用"><a href="#2-2-1-快速使用" class="headerlink" title="2.2.1 快速使用"></a>2.2.1 快速使用</h4><p>和 <code>layer</code> 一样，你可以在 <code>layui</code> 中使用 <code>layDate</code>，也可直接使用 <code>layDate</code> 独立版，请按照的实际需求来选择，本文只说<code>layui</code>中使用<code>layDate</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- layui模块化使用 --></span><span class="token comment">&lt;!-- 引入 layui.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-v2.5.6/layui/css/layui.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 引入 layui.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-v2.5.6/layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 用一个容器元素放我们的日期时间选择器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'laydate'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> laydate <span class="token operator">=</span> layui<span class="token punctuation">.</span>laydate<span class="token punctuation">;</span>            <span class="token comment">// 加载 laydate 实例</span>            laydate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"#date1"</span> <span class="token comment">//绑定id为date1的元素</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-基础参数"><a href="#2-2-2-基础参数" class="headerlink" title="2.2.2 基础参数"></a>2.2.2 基础参数</h4><p><strong>1、elem - 绑定元素</strong></p><ul><li>类型：String/DOM ，默认值：无</li><li>必填项，用于执行绑定日期渲染的元素，值一般为选择器，或DOM对象</li></ul><p><strong>2、type - 控件选择类型</strong></p><ul><li>类型：String ，默认值：date</li><li>用于单独提供不同的选择器类型，可选值如下表</li></ul><table><thead><tr><th align="left">type可选值</th><th align="left">名称</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">year</td><td align="left">年选择器</td><td align="left">只提供年列表选择</td></tr><tr><td align="left">month</td><td align="left">年月选择器</td><td align="left">只提供年、月选择</td></tr><tr><td align="left">date</td><td align="left">日期选择器</td><td align="left">可选择：年、月、日。type默认值，一般可不填</td></tr><tr><td align="left">time</td><td align="left">时间选择器</td><td align="left">只提供时、分、秒选择</td></tr><tr><td align="left">datetime</td><td align="left">日期时间选择器</td><td align="left">可选择：年、月、日、时、分、秒</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html">// 年选择器laydate.render(&#123;   elem: '#test'  ,type: 'year'&#125;); // 年月选择器laydate.render(&#123;   elem: '#test'  ,type: 'month'&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、format - 自定义格式</strong></p><ul><li>类型：<em>String</em>，默认值：<em>yyyy-MM-dd</em></li><li>通过日期时间各自的格式符和长度，来设定一个你所需要的日期格式。layDate 支持的格式如下：</li></ul><table><thead><tr><th align="left">格式符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">yyyy</td><td align="left">年份，至少四位数。如果不足四位，则前面补零</td></tr><tr><td align="left">y</td><td align="left">年份，不限制位数，即不管年份多少位，前面均不补零</td></tr><tr><td align="left">MM</td><td align="left">月份，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">M</td><td align="left">月份，允许一位数。</td></tr><tr><td align="left">dd</td><td align="left">日期，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">d</td><td align="left">日期，允许一位数。</td></tr><tr><td align="left">HH</td><td align="left">小时，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">H</td><td align="left">小时，允许一位数。</td></tr><tr><td align="left">mm</td><td align="left">分钟，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">m</td><td align="left">分钟，允许一位数。</td></tr><tr><td align="left">ss</td><td align="left">秒数，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">s</td><td align="left">秒数，允许一位数。</td></tr></tbody></table><p>通过上述不同的格式符组合成一段日期时间字符串，可任意排版，如下所示：</p><table><thead><tr><th align="left">格式</th><th align="left">示例值</th></tr></thead><tbody><tr><td align="left">yyyy-MM-dd HH:mm:ss</td><td align="left">2017-08-18 20:08:08</td></tr><tr><td align="left">yyyy年MM月dd日 HH时mm分ss秒</td><td align="left">2017年08月18日 20时08分08秒</td></tr><tr><td align="left">yyyyMMdd</td><td align="left">20170818</td></tr><tr><td align="left">dd/MM/yyyy</td><td align="left">18/08/2017</td></tr><tr><td align="left">yyyy年M月</td><td align="left">2017年8月</td></tr><tr><td align="left">M月d日</td><td align="left">8月18日</td></tr><tr><td align="left">北京时间：HH点mm分</td><td align="left">北京时间：20点08分</td></tr><tr><td align="left">yyyy年的M月某天晚上，大概H点</td><td align="left">2017年的8月某天晚上，大概20点</td></tr></tbody></table><pre class="line-numbers language-html" data-language="html"><code class="language-html">//自定义日期格式laydate.render(&#123;   elem: '#test',format: 'yyyy年MM月dd日' //可任意组合&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、value - 初始值</strong></p><ul><li>类型：String，默认值：new Date()</li><li>支持传入符合format参数设定的日期格式字符，或者 new Date()</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 加载laydate模块</span>    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'laydate'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> laydate <span class="token operator">=</span> layui<span class="token punctuation">.</span>laydate<span class="token punctuation">;</span>        <span class="token comment">// 传入符合format格式的字符给初始值</span>        laydate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">'#date1'</span><span class="token punctuation">,</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'2018-08-18'</span> <span class="token comment">//必须遵循format参数设定的格式</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 传入Date对象给初始值</span>        laydate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">'#date2'</span><span class="token punctuation">,</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1534766888000</span><span class="token punctuation">)</span> <span class="token comment">//参数即为：2018-08-20 20:08:08 的时间戳</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-分页"><a href="#2-3-分页" class="headerlink" title="2.3 分页"></a>2.3 分页</h3><ul><li><code>laypage</code> 的使用非常简单，指向一个用于存放分页的容器，通过服务端得到一些初始值，即可完成分页渲染</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>layPage快速使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/build/layui.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/build/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'laypage'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> laypage <span class="token operator">=</span> layui<span class="token punctuation">.</span>laypage<span class="token punctuation">;</span>    <span class="token comment">//执行一个laypage实例</span>  laypage<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">'test1'</span> <span class="token comment">// 注意，这里的 test1 是 ID，不用加 # 号</span>    <span class="token punctuation">,</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token comment">// 数据总数，从服务端得到</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-1-基础参数"><a href="#2-3-1-基础参数" class="headerlink" title="2.3.1 基础参数"></a>2.3.1 基础参数</h4><p>通过核心方法：<code>laypage.render(options)</code> 来设置基础参数</p><table><thead><tr><th align="left">参数选项</th><th align="left">说明</th><th align="left">类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">elem</td><td align="left">指向存放分页的容器，值可以是容器ID、DOM对象。如： 1. elem: ‘id’ <em>注意：这里不能加 # 号</em> 2. elem: document.getElementById(‘id’)</td><td align="left">String/Object</td><td align="left">-</td></tr><tr><td align="left">count</td><td align="left">数据总数。一般通过服务端得到</td><td align="left">Number</td><td align="left">-</td></tr><tr><td align="left">limit</td><td align="left"><strong>每页显示的条数</strong>。laypage将会借助 count 和 limit 计算出分页数。</td><td align="left">Number</td><td align="left">10</td></tr><tr><td align="left">limits</td><td align="left">每页条数的选择项。如果 layout 参数开启了 limit，则会出现每页条数的select选择框</td><td align="left">Array</td><td align="left">[10, 20, 30, 40, 50]</td></tr><tr><td align="left">curr</td><td align="left">起始页。一般用于刷新类型的跳页以及HASH跳页。</td><td align="left">Number</td><td align="left">1</td></tr><tr><td align="left">groups</td><td align="left">连续出现的页码个数</td><td align="left">Number</td><td align="left">5</td></tr><tr><td align="left">prev</td><td align="left">自定义“上一页”的内容，支持传入普通文本和HTML</td><td align="left">String</td><td align="left">上一页</td></tr><tr><td align="left">next</td><td align="left">自定义“下一页”的内容，同上</td><td align="left">String</td><td align="left">下一页</td></tr><tr><td align="left">first</td><td align="left">自定义“首页”的内容，同上</td><td align="left">String</td><td align="left">1</td></tr><tr><td align="left">last</td><td align="left">自定义“尾页”的内容，同上</td><td align="left">String</td><td align="left">总页数值</td></tr><tr><td align="left">layout</td><td align="left">自定义排版。可选值有：<em>count</em>（总条目输区域）、<em>prev</em>（上一页区域）、<em>page</em>（分页区域）、<em>next</em>（下一页区域）、<em>limit</em>（条目选项区域）、<em>refresh</em>（页面刷新区域。注意：layui 2.3.0 新增） 、<em>skip</em>（快捷跳页区域）</td><td align="left">Array</td><td align="left">[‘prev’, ‘page’, ‘next’]</td></tr><tr><td align="left">theme</td><td align="left">自定义主题。支持传入：<em>颜色值</em>，或<em>任意普通字符</em>。如： 1. theme: ‘#c00’ 2. theme: ‘xxx’ //将会生成 class=”layui-laypage-xxx” 的CSS类，以便自定义主题</td><td align="left">String</td><td align="left">-</td></tr><tr><td align="left">hash</td><td align="left">开启location.hash，并自定义 hash 值。如果开启，在触发分页时，会自动对url追加：*#!hash值={curr}* 利用这个，可以在页面载入时就定位到指定页</td><td align="left">String/Boolean</td><td align="left">false</td></tr></tbody></table><h4 id="2-3-2-jump-切换分页的回调"><a href="#2-3-2-jump-切换分页的回调" class="headerlink" title="2.3.2 jump - 切换分页的回调"></a>2.3.2 jump - 切换分页的回调</h4><p>当分页被切换时触发，函数返回两个参数：<em>obj</em>（当前分页的所有选项值）、first（是否首次，一般用于初始加载的判断）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 加载laydate模块</span>        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'laypage'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> laypage <span class="token operator">=</span> layui<span class="token punctuation">.</span>laypage<span class="token punctuation">;</span>            <span class="token comment">// 加载laypage实例</span>            laypage<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"page"</span><span class="token punctuation">,</span> <span class="token comment">// elem属性绑定的是容器的ID属性值，不需要加#</span>                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// 总数量，一般是从服务器获取</span>                <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">// 连续显示的页码数</span>                <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">,</span> <span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'next'</span><span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'skip'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'refresh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            laypage<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">'page'</span><span class="token punctuation">,</span>                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">//数据总数，从服务端得到</span>                <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 连续出现的页码个数</span>                <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">,</span> <span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'next'</span><span class="token punctuation">,</span> <span class="token string">'limit'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 自定义排版</span>                <span class="token literal-property property">limits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// layout属性设置了limit值，可会出现条数下拉选择框</span>                <span class="token function-variable function">jump</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> first</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// obj包含了当前分页的所有参数，比如：</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到当前页，以便向服务端请求对应页的数据。</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到每页显示的条数</span>                    <span class="token comment">//首次不执行</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//do something</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center.png"></p><h3 id="2-4-数据表格"><a href="#2-4-数据表格" class="headerlink" title="2.4 数据表格"></a>2.4 数据表格</h3><p>创建一个table实例最简单的方式是，在页面放置一个元素 <code>&lt;table id=&quot;demo&quot;&gt;&lt;/table&gt;</code>，然后通过 <code>table.render()</code>方法指定该容器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- layui模块化使用 --></span><span class="token comment">&lt;!-- 引入 layui.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-v2.5.6/layui/css/layui.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 引入 layui.js --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-v2.5.6/layui/layui.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 准备容器（标签），设置id属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 加载table模块</span>        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>            <span class="token comment">// 加载table实例</span>            table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span> <span class="token comment">//elem属性用来绑定容器的id属性值</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"js/user.json"</span><span class="token punctuation">,</span> <span class="token comment">// 数据接口，通常是从服务器获取，这次模拟本地获取</span>                <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                        <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'用户编号'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 是否排序</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">120</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'用户姓名'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                        <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'city'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'城市'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'sign'</span><span class="token punctuation">,</span>                        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'签名'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center-16480450418083.png"></p><h4 id="2-4-1-三种初始化渲染方式"><a href="#2-4-1-三种初始化渲染方式" class="headerlink" title="2.4.1 三种初始化渲染方式"></a>2.4.1 三种初始化渲染方式</h4><table><thead><tr><th align="left">机制</th><th align="left">适用场景</th><th></th></tr></thead><tbody><tr><td align="left">方法渲染</td><td align="left">用JS方法的配置完成渲染</td><td>（推荐）无需写过多的 HTML，在 JS 中指定原始元素，再设定各项参数即可。</td></tr><tr><td align="left">自动渲染</td><td align="left">HTML配置，自动渲染</td><td>无需写过多 JS，可专注于 HTML 表头部分</td></tr><tr><td align="left">转换静态表格</td><td align="left">转化一段已有的表格元素</td><td>无需配置数据接口，在JS中指定表格元素，并简单地给表头加上自定义属性即可</td></tr></tbody></table><p><strong>1、方法渲染</strong></p><p>其实是“自动化渲染”的手动模式，本质类似，只是“方法级渲染”将基础参数的设定放在了JS代码中，且原始的 table 标签只需要一个 <em>选择器</em>：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>        <span class="token comment">// 执行渲染</span>        table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span> <span class="token comment">// 指定原始表格元素选择器（推荐id选择器）</span>            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'js/user.json'</span><span class="token punctuation">,</span> <span class="token comment">// 数据接口</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">315</span><span class="token punctuation">,</span> <span class="token comment">// 容器高度</span>            <span class="token literal-property property">page</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启分页</span>            <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token comment">// 设置表头</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'ID'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'用户名'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'性别'</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备注：*table.render()*方法返回一个对象：var tableIns = table.render(options)，可用于对当前表格进行“重载”等操作</p><p><strong>2、自动渲染</strong></p><p>所谓的自动渲染，即：在一段 table 容器中配置好相应的参数，由 table 模块内部自动对其完成渲染，而无需写初始的渲染方法。我们需要关注的是以下三点：</p><ol><li>带有 <code>class=&quot;layui-table&quot;</code> 的 <code>&lt;table&gt;</code> 标签</li><li>对标签设置属性 <code>lay-data=&quot; &quot;</code> 用于配置一些基础参数</li><li>在 <code>&lt;th&gt;</code> 标签中设置属性 <code>lay-data=&quot; &quot;</code> 用于配置表头信息</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-table<span class="token punctuation">"</span></span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;height:315, url:<span class="token punctuation">'</span>js/user.json<span class="token punctuation">'</span>, page:true, id:<span class="token punctuation">'</span>test<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>id<span class="token punctuation">'</span>, width:80, sort: true&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>username<span class="token punctuation">'</span>, width:80&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>sex<span class="token punctuation">'</span>, width:80, sort: true&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>city<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>城市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>sign<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>签名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、转换静态表格</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 页面已经存在了一段有内容的表格，在静态表格的 th 标签中加上 lay-data="" 属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">lay-filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>username<span class="token punctuation">'</span>, width:100&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>experience<span class="token punctuation">'</span>, width:80, sort:true&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>积分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">lay-data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;field:<span class="token punctuation">'</span>sign<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>签名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>贤心1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>66<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>人生就像是一场修行a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>贤心2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>88<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>人生就像是一场修行b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>贤心3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>人生就像是一场修行c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 执行用于转换表格的js方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>               <span class="token comment">// 转换静态表格</span>       table<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">315</span><span class="token punctuation">,</span> <span class="token comment">//设置高度</span>     <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">//注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致</span>     <span class="token comment">//支持所有基础参数</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-toolbar-开启表格头部工具栏"><a href="#2-4-2-toolbar-开启表格头部工具栏" class="headerlink" title="2.4.2 toolbar - 开启表格头部工具栏"></a>2.4.2 toolbar - 开启表格头部工具栏</h4><ul><li>类型：String/DOM/Boolean，开启表格头部工具栏，该参数支持四种类型值<ul><li>​    <code>toolbar: &#39;#toolbarDemo&#39;</code> 指向自定义工具栏模板选择器</li><li>​    <code>toolbar: &#39;&lt;div&gt;xxx&lt;/div&gt;&#39;</code> 直接传入工具栏模板字符</li><li>​    <code>toolbar: true</code> 仅开启工具栏，不显示左侧模板</li><li>​    <code>toolbar: &#39;default&#39;</code> 让工具栏左侧显示默认的内置模板</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 表格工具栏 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbarDemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn-container"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lay<span class="token operator">-</span>event 给元素绑定事件名 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckData"</span><span class="token operator">></span>                获取选中行数据            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckLength"</span><span class="token operator">></span>                获取选中数目            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"isAll"</span><span class="token operator">></span>                验证是否全选            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 表头工具栏 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barDemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"edit"</span><span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-danger layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"del"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'js/user.json'</span><span class="token punctuation">,</span> <span class="token comment">// 数据接口</span>                <span class="token literal-property property">cols</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token comment">// 设置序列号列</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"numbers"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 设置复选框列</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"checkbox"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'用户编号'</span><span class="token punctuation">,</span><span class="token literal-property property">sort</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token literal-property property">hide</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'用户姓名'</span><span class="token punctuation">,</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token literal-property property">edit</span><span class="token operator">:</span><span class="token string">'text'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'性别'</span><span class="token punctuation">,</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token literal-property property">sort</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'city'</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'城市'</span><span class="token punctuation">,</span><span class="token literal-property property">width</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">'sign'</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'签名'</span><span class="token punctuation">,</span><span class="token literal-property property">edit</span><span class="token operator">:</span><span class="token string">'text'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 设置表头工具栏</span><span class="token punctuation">&#123;</span><span class="token literal-property property">field</span><span class="token operator">:</span><span class="token string">"操作"</span><span class="token punctuation">,</span><span class="token literal-property property">toolbar</span><span class="token operator">:</span><span class="token string">"#barDemo"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// 开启分页</span><span class="token literal-property property">page</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 设置表格工具栏</span><span class="token literal-property property">toolbar</span><span class="token operator">:</span><span class="token string">"#toolbarDemo"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/24/qian-duan-xue-xi-zhi-layui-pian/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center-16480469603195.png"></p><h4 id="2-4-3-监听头工具栏事件"><a href="#2-4-3-监听头工具栏事件" class="headerlink" title="2.4.3 监听头工具栏事件"></a>2.4.3 监听头工具栏事件</h4><p>点击头部工具栏区域设定了属性为 <code>lay-event=&quot;&quot;</code> 的元素时触发</p><ul><li>语法：<code>table.on(&#39;event(filter)&#39;,callback)</code><ul><li>event 为内置事件名，<strong>filter 为容器 lay-filter 设定的值</strong></li></ul></li><li>回调函数返回一个 object 参数<ul><li><code>obj.config</code>对象中可以获取id属性值，即表示当前容器的ID属性值</li><li><code>obj.event</code> 对象中可以获取 事件名</li><li> <code>table.checkStatus(obj.config.id)</code> 获取当前表格被选中记录对象，返回数组</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'toolbar(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log(obj);</span>        <span class="token comment">// obj.config对象中可以获取id属性值，即表示当前容器的ID属性值，也就是demo </span>        <span class="token comment">// 获取当前表格被选中记录对象，返回数据</span>        <span class="token keyword">var</span> checkStatus <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">checkStatus</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>config<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>checkStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取事件名</span>        <span class="token keyword">var</span> eventName <span class="token operator">=</span> obj<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">// 判断事件名，执行对应的代码</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"getCheckData"</span><span class="token operator">:</span>                <span class="token comment">// 获取被选中的记录的数组</span>                <span class="token keyword">var</span> arr <span class="token operator">=</span> checkStatus<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token comment">// 将数组解析成字符串</span>                layer<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"getCheckLength"</span><span class="token operator">:</span>                <span class="token comment">// 获取被选中的记录的数组</span>                <span class="token keyword">var</span> arr <span class="token operator">=</span> checkStatus<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"选中了"</span> <span class="token operator">+</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"条记录！"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"isAll"</span><span class="token operator">:</span>                <span class="token comment">// 通过isAll属性判断是否全选</span>                <span class="token keyword">var</span> flag <span class="token operator">=</span> checkStatus<span class="token punctuation">.</span>isAll<span class="token punctuation">;</span>                <span class="token keyword">var</span> str <span class="token operator">=</span> flag <span class="token operator">?</span> <span class="token string">'全选'</span> <span class="token operator">:</span> <span class="token string">'未全选'</span><span class="token punctuation">;</span>                layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"LAYTABLE_TIPS"</span><span class="token operator">:</span>                layer<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是一个自定义的图标按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-4-监听行工具栏事件"><a href="#2-4-4-监听行工具栏事件" class="headerlink" title="2.4.4 监听行工具栏事件"></a>2.4.4 监听行工具栏事件</h4><ul><li>语法：<code>table.on(&#39;tool(filter)&#39;,callback&#123;&#125;)</code><ul><li><code>filter</code> 为容器 <code>lay-filter</code> 设定的值</li></ul></li><li>回调函数返回一个 object 参数<ul><li><code>obj.data</code> 获取当前行数据</li><li><code>obj.event</code> 获取 <code>lay-event</code> 对应的值 (也可以是表头 event 参数对应的值)</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'tool(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 得到当前操作行的相关信息</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得到事件名</span>        <span class="token keyword">var</span> eventName <span class="token operator">=</span> obj<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">// 判断事件名，执行对应的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventName <span class="token operator">==</span> <span class="token string">'del'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 删除</span>            <span class="token comment">// 确认框</span>            layer<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"您确认要删除吗？"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 删除指定tr  del()</span>                obj<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭弹出层（index是当前弹出层的下标）</span>                layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eventName <span class="token operator">==</span> <span class="token string">'edit'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 编辑</span>            <span class="token comment">// 输出框</span>            layer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 表单元素的类型 0=文本框  1=密码框 2=文本域</span>                <span class="token literal-property property">formType</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">value</span><span class="token operator">:</span> tr<span class="token punctuation">.</span>username <span class="token comment">// 设置输入框的值</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 修改指定单元格的值</span>                <span class="token comment">// value表示输入的值</span>                obj<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">username</span><span class="token operator">:</span> value                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭弹出层</span>                layer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-5-监听单元格编辑"><a href="#2-4-5-监听单元格编辑" class="headerlink" title="2.4.5 监听单元格编辑"></a>2.4.5 监听单元格编辑</h4><ul><li><p>监听单元格编辑之前要先打开单元格的编辑</p><ul><li>edit 类型String，单元格编辑类型（默认不开启）目前只支持：text（输入框）</li></ul></li><li><p>语法：<code>table.on(&#39;edit(filter)&#39;,callback)</code></p><ul><li>filter 为容器 lay-filter 设定的值</li></ul></li><li><p>单元格被编辑，且值发生改变时触发，回调函数返回一个 object 参数</p><ul><li><code>obj.value</code> 获取修改后的值</li><li><code>obj.filed</code> 获取编辑的字段名</li><li><code>obj.data</code> 获取所在行的所有相关数据</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">&#123;    field: 'username',    title: '用户姓名',    width: 100,    edit: 'text'&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'edit(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取修改后的值</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">// 得到当前修改的tr对象</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment">// 得到修改的字段名</span>        <span class="token keyword">var</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span>field<span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"【ID:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"】的"</span> <span class="token operator">+</span> field <span class="token operator">+</span> <span class="token string">"字段的值修改为："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-6-数据表格重载"><a href="#2-4-6-数据表格重载" class="headerlink" title="2.4.6 数据表格重载"></a>2.4.6 数据表格重载</h4><ul><li><p>语法：<code>table.reload(ID,options,deep)</code></p><ul><li>参数 ID 即为基础参数id对应的值</li><li>参数 options 即为各项基础参数</li><li>参数 deep：是否采用深度重载（即参数深度克隆，也就是重载时始终携带初始时及上一次重载时的参数），默认 false。注意：deep 参数为 layui 2.6.0 开始新增</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        搜索ID：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-input<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demoReload<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layui-btn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 准备一个容器,设置id属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 表格工具栏 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toolbarDemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn-container"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lay<span class="token operator">-</span>event 给元素绑定事件名 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckData"</span><span class="token operator">></span>获取选中行数据    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"getCheckLength"</span><span class="token operator">></span>获取选中数目    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-sm"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"isAll"</span><span class="token operator">></span>验证是否全选    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 表头工具栏 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barDemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"edit"</span><span class="token operator">></span>编辑<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"layui-btn layui-btn-danger layui-btn-xs"</span> lay<span class="token operator">-</span>event<span class="token operator">=</span><span class="token string">"del"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 加载 table 模块</span>        layui<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> table <span class="token operator">=</span> layui<span class="token punctuation">.</span>table<span class="token punctuation">;</span>            <span class="token keyword">var</span> $ <span class="token operator">=</span> layui<span class="token punctuation">.</span>jquery<span class="token punctuation">;</span> <span class="token comment">// 获取jquery对象</span>            <span class="token comment">// 加载table 实例</span>            table<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">elem</span><span class="token operator">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span> <span class="token comment">// elem属性用来绑定容器的 id 属性值</span>                    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"js/user.json"</span><span class="token punctuation">,</span> <span class="token comment">// 数据接口</span>                    <span class="token literal-property property">cols</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">[</span>                            <span class="token comment">// 设置序列号列</span>                            <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"numbers"</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token comment">// 设置复选框列</span>                            <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"checkbox"</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'用户编号'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>                                <span class="token literal-property property">hide</span><span class="token operator">:</span> <span class="token boolean">true</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'username'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'用户姓名'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                                <span class="token comment">// 编辑事件</span>                                <span class="token literal-property property">edit</span><span class="token operator">:</span> <span class="token string">'text'</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'性别'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                                <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token boolean">true</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'city'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'城市'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">'sign'</span><span class="token punctuation">,</span>                                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'签名'</span><span class="token punctuation">,</span>                                <span class="token comment">// 编辑事件</span>                                <span class="token literal-property property">edit</span><span class="token operator">:</span> <span class="token string">'text'</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token comment">// 设置表头工具栏</span>                            <span class="token punctuation">&#123;</span>                                <span class="token literal-property property">field</span><span class="token operator">:</span> <span class="token string">"操作"</span><span class="token punctuation">,</span>                                <span class="token literal-property property">toolbar</span><span class="token operator">:</span> <span class="token string">"#barDemo"</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token comment">// 开启分页</span>                    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token comment">// 设置表格工具栏</span>                    <span class="token literal-property property">toolbar</span><span class="token operator">:</span> <span class="token string">"#toolbarDemo"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">/**                 * 监听单元格编辑事件                 * 表头设置edit属性， 单元格编辑类型（默认不开启）目前只支持：text（输入框）                 */</span>            table<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'edit(test)'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取修改后的值</span>                <span class="token keyword">var</span> value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token comment">// 得到当前修改的tr对象</span>                <span class="token keyword">var</span> data <span class="token operator">=</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token comment">// 得到修改的字段名</span>                <span class="token keyword">var</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span>field<span class="token punctuation">;</span>                layer<span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"【ID:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"】的"</span> <span class="token operator">+</span> field <span class="token operator">+</span> <span class="token string">"字段的值修改为："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 给指定元素绑定事件             */</span>            <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'#searchBtn'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取搜索文本框对象</span>                <span class="token keyword">var</span> sreach <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demoReload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用数据表格的重载方法  table.reload(ID, options)</span>                table<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 设置需要传递的参数</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span> sreach<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 表示让条件查询从第一页开始；如果未设置则从当前页开始查询，此页前面的所有数据不纳入条件筛选</span>                        <span class="token literal-property property">curr</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 从第一页开始</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LayUI </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架之Mybatis篇</title>
      <link href="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/"/>
      <url>/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架之Mybatis篇"><a href="#SSM框架之Mybatis篇" class="headerlink" title="SSM框架之Mybatis篇"></a>SSM框架之Mybatis篇</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1、原始jdbc操作"><a href="#1、原始jdbc操作" class="headerlink" title="1、原始jdbc操作"></a>1、原始jdbc操作</h3><h4 id="①-原始jdbc开发存在以下问题"><a href="#①-原始jdbc开发存在以下问题" class="headerlink" title="① 原始jdbc开发存在以下问题"></a><strong>① 原始<code>jdbc</code>开发存在以下问题</strong></h4><ul><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</li><li><code>sql</code>语句在代码中硬编码，造成代码不易维护，实际应用<code>sql</code>变化的可能较大，<code>sql</code>变动需要改变<code>java</code>代码</li><li>查询操作时，需要手动将结果集中的数据手动封装到实体中；插入操作时，需要手动将实体的数据设置到<code>sql</code>语句的占位符位置</li></ul><h4 id="②-解决方案"><a href="#②-解决方案" class="headerlink" title="② 解决方案"></a>② <strong>解决方案</strong></h4><ul><li>使用数据库连接池初始化连接资源</li><li>将<code>sql</code>语句抽取到<code>xml</code>配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ul><h3 id="2、Mybatis"><a href="#2、Mybatis" class="headerlink" title="2、Mybatis"></a>2、Mybatis</h3><ul><li><code>Mybatis</code>是一个优秀的基于<code>java</code>的持久层框架，内部封装了<code>jdbc</code>，使开发者只需要关注<code>sql</code>语句本身，而不需要花费精力去处理加载驱动、创建连接、创建<code>statement</code>等繁杂的过程</li><li><code>Mybatis</code>通过<code>xml</code>或注解的方式将要执行的各种<code>statement</code>配置起来，并通过<code>java</code>对象和<code>statement</code>中<code>sql</code>的动态参数进行映射生成最终执行的<code>sql</code>语句</li><li>最后<code>Mybatis</code>框架执行<code>sql</code>并将结果映射为<code>java</code>对象并返回。采用<code>ORM</code>思想解决了实体和数据库映射的问题，对<code>jdbc</code>进行了封装，屏蔽了<code>jdbc api</code> 底层访问细节，不用与<code>jdbc api</code>打交道就可以完成对数据库的持久化操作</li></ul><h2 id="二、快速入门"><a href="#二、快速入门" class="headerlink" title="二、快速入门"></a>二、快速入门</h2><ol><li><p>添加<code>MyBatis</code>的坐标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>mysql<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>mybatis<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建数据表</p></li><li><p>编写实体类</p></li><li><p>编写映射文件<code>.xml</code></p><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220319235545654.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 约束条件</span><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"userMapper"</span><span class="token operator">></span>    <span class="token comment">// 选择方法</span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span> resultType<span class="token operator">=</span><span class="token string">"com.User"</span><span class="token operator">></span>    <span class="token comment">// sql语句</span>    select <span class="token operator">*</span> from user    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写核心文件<code>.xml</code></p><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320000229340.png"></p></li><li><p>编写测试类</p><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320000426165.png"></p></li></ol><h2 id="三、映射文件概述"><a href="#三、映射文件概述" class="headerlink" title="三、映射文件概述"></a>三、映射文件概述</h2><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320000743161.png"></p><h2 id="四、增删改查"><a href="#四、增删改查" class="headerlink" title="四、增删改查"></a>四、增删改查</h2><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320163843164.png"></p><h2 id="五、核心配置文件概述"><a href="#五、核心配置文件概述" class="headerlink" title="五、核心配置文件概述"></a>五、核心配置文件概述</h2><h3 id="1、environment标签"><a href="#1、environment标签" class="headerlink" title="1、environment标签"></a>1、environment标签</h3><p><strong>数据源环境配置</strong></p><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320165006851.png"></p><h3 id="2、mapper标签"><a href="#2、mapper标签" class="headerlink" title="2、mapper标签"></a>2、mapper标签</h3><p>该标签的作用是加载映射，加载方式有如下几种</p><ul><li><p>使用相对于类路径的资源引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"org/mybatis/builder/Mapper.xml"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用完全限定资源定位符（<code>URL</code>）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>mapper url<span class="token operator">=</span><span class="token string">"file:///var/mappers/Mapper.xml"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用映射器接口实现类的完全限定类名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>mapper <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.builder.Mapper"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将包内的映射器接口实现全部注册为映射器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">package</span> <span class="token namespace">name</span><span class="token operator">=</span><span class="token string">"org.mybatis.builder"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3、typeAliases标签"><a href="#3、typeAliases标签" class="headerlink" title="3、typeAliases标签"></a>3、typeAliases标签</h3><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320171548010.png"></p><h2 id="六、相应API"><a href="#六、相应API" class="headerlink" title="六、相应API"></a>六、相应API</h2><h3 id="1、SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#1、SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="1、SqlSession工厂构建器SqlSessionFactoryBuilder"></a>1、SqlSession工厂构建器SqlSessionFactoryBuilder</h3><p><strong>常用API</strong>：<code>SqlSessionFactory build(InputStream inputStream)</code></p><p>通过加载<code>mybatis</code>的核心文件的输入流的形式构建一个<code>SqlSessionFactory</code>对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"org/mybatis/builder/mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>Resources</code>工具类帮助从类路径下、文件系统或一个<code>web URL</code>中加载资源文件</p><h3 id="2、SqlSession工厂对象SqlSessionFactory"><a href="#2、SqlSession工厂对象SqlSessionFactory" class="headerlink" title="2、SqlSession工厂对象SqlSessionFactory"></a>2、SqlSession工厂对象SqlSessionFactory</h3><p><code>SqlSessionFactory</code>有多个方法创建<code>SqlSession</code>实例，常用有两个</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>openSession()</code></td><td>会默认开启一个事务，但事务不会自动提交，需要手动提交该事务，更新操作才会持久化到数据库中</td></tr><tr><td><code>openSession(boolean autoCommit)</code></td><td>参数为是否自动提交，如果为<code>true</code>，不需要手动提交事务</td></tr></tbody></table><h3 id="3、SqlSession会话对象"><a href="#3、SqlSession会话对象" class="headerlink" title="3、SqlSession会话对象"></a>3、SqlSession会话对象</h3><p><code>SqlSession</code>实例在<code>mybatis</code>中时非常强大的一个类，有所有执行语句、提交或回滚事务和获取映射器实例的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 执行语句方法</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parmeter<span class="token punctuation">)</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parmeter<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parmeter<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parmeter<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parmeter<span class="token punctuation">)</span>    <span class="token comment">// 操作事务的方法</span><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Dao层实现"><a href="#七、Dao层实现" class="headerlink" title="七、Dao层实现"></a>七、Dao层实现</h2><p>采用<code>mybatis</code>的dialing开发方式实现<code>Dao</code>层的开发</p><p><code>Mapper</code>接口开发方法只需编写<code>Mapper</code>接口，由<code>mybatis</code>框架根据接口定义创建接口的动态代理对象</p><p><code>Mapper</code>接口开发需要遵循以下规范</p><ol><li><code>Mapper.xml</code>文件中的<code>namespace</code>与<code>mapper</code>接口的全限定名相同</li><li><code>mapper</code>接口的方法名和<code>Mapper.xml</code>中定义的每一个<code>statement</code>的<code>id</code>相同</li><li><code>mapper</code>接口方法的输入参数类型和<code>Mapper.xml</code>中定义的每一个<code>sql</code>的<code>parameterType</code>的类型相同</li><li><code>mapper</code>接口方法的输出参数类型和<code>Mapper.xml</code>中定义的每一个<code>sql</code>的<code>resultType</code>的类型相同</li></ol><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320201253079.png"></p><h2 id="八、映射文件深入"><a href="#八、映射文件深入" class="headerlink" title="八、映射文件深入"></a>八、映射文件深入</h2><h3 id="1、动态sql之if"><a href="#1、动态sql之if" class="headerlink" title="1、动态sql之if"></a>1、动态sql之if</h3><p>根据实体类的不同，使用不同的<code>sql</code>语句来查询，在多条件组合查询中经常碰到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByCondition"</span> parameterType<span class="token operator">=</span><span class="token string">"user"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    select <span class="token operator">*</span> from <span class="token class-name">User</span>    <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"id!=0"</span><span class="token operator">></span>            and id<span class="token operator">=</span>#<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"username!=null"</span><span class="token operator">></span>            and username<span class="token operator">=</span>#<span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、动态sql之foreach"><a href="#2、动态sql之foreach" class="headerlink" title="2、动态sql之foreach"></a>2、动态sql之foreach</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByIds"</span> parameterType<span class="token operator">=</span><span class="token string">"list"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    select <span class="token operator">*</span> from <span class="token class-name">User</span>    <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"list"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"id in("</span> close<span class="token operator">=</span><span class="token string">")"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>    #<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、sql片段的抽取"><a href="#3、sql片段的抽取" class="headerlink" title="3、sql片段的抽取"></a>3、sql片段的抽取</h3><p><code>sql</code>中可以将重复的<code>sql</code>提取出来，使用时用<code>include</code>引用即可，最终达到<code>sql</code>重用的目的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽取sql片段</span><span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"selectUser"</span> select <span class="token operator">*</span> from <span class="token class-name">User</span><span class="token operator">&lt;</span><span class="token operator">/</span>sql<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findById"</span> parameterType<span class="token operator">=</span><span class="token string">"int"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"selectUser"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span> where id<span class="token operator">=</span>#<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findByIds"</span> parameterType<span class="token operator">=</span><span class="token string">"list"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"selectUser"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>include<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>where<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"list"</span> <span class="token keyword">open</span><span class="token operator">=</span><span class="token string">"id in("</span> close<span class="token operator">=</span><span class="token string">")"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>    #<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>where<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、核心配置文件深入"><a href="#九、核心配置文件深入" class="headerlink" title="九、核心配置文件深入"></a>九、核心配置文件深入</h2><h3 id="1、typeHandler标签"><a href="#1、typeHandler标签" class="headerlink" title="1、typeHandler标签"></a>1、typeHandler标签</h3><p>无论是在<code>mybatis</code>在预处理语句中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成<code>java</code>类型。</p><p>在编写代码过程中可以重写类型处理器或创建类型处理器来处理不支持的或非标准的类型，具体做法是实现<code>TypeHandler</code>接口，或继承<code>BaseTypeHandler</code>类</p><p><strong>如：</strong>要将Date数据类型转成一个1970年至今的毫秒数存入数据库，取出来时转换成<code>java</code>的<code>Date</code></p><p><strong>开发步骤：</strong></p><ol><li><p>定义转换类继承类<code>BaseTypeHandler&lt;T&gt;</code></p></li><li><p>覆盖未实现的方法，其中<code>setNonNullParameter</code>为<code>java</code>升序设置数据到数据库的回调方法，<code>getNullableResult</code>为查询时<code>mysql</code>的字符串类型转换成<code>java</code>的<code>Type</code>类型的方法</p></li><li><p>在<code>mybatis</code>核心配置文件中进行注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>typeHandlers<span class="token punctuation">></span></span><span class="token generics"><span class="token punctuation">&lt;</span>typeHandler <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">></span></span><span class="token operator">&lt;</span><span class="token operator">/</span>typeHandler<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>typeHandlers<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p></li></ol><h3 id="2、plugins标签"><a href="#2、plugins标签" class="headerlink" title="2、plugins标签"></a>2、plugins标签</h3><p><code>mybatis</code>可以使用第三方的插件来对功能进行扩展，分页助手<code>PageHelper</code>是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p><p><strong>开发步骤：</strong></p><ol><li><p>导入通用的<code>PageHelper</code>的坐标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 分页助手</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.7</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>jsqlparser<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jsqlparser<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">0.9</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>mybatis</code>核心配置文件中配置<code>PageHelper</code>插件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">></span></span><span class="token operator">&lt;</span>plugin interceptor<span class="token operator">=</span><span class="token string">"com.github.pagehelper.PageHelper"</span><span class="token operator">></span>    <span class="token comment">// 指定方言</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dialect"</span> value<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p></li></ol><h2 id="十、多表操作"><a href="#十、多表操作" class="headerlink" title="十、多表操作"></a>十、多表操作</h2><h3 id="1、一对一"><a href="#1、一对一" class="headerlink" title="1、一对一"></a>1、一对一</h3><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320213336081.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"orderMap"</span> type<span class="token operator">=</span><span class="token string">"order"</span><span class="token operator">></span><span class="token comment">// 手动指定字段与实体属性的映射关系</span>    <span class="token comment">// colunm：数据表字段名称；property：实体属性名称</span>    <span class="token comment">// id为主键，其他属性用result</span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"oid"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span><span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"time"</span> property<span class="token operator">=</span><span class="token string">"time"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"total"</span> property<span class="token operator">=</span><span class="token string">"total"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>        <span class="token comment">/*    property：当前实体order中的属性名称    javaType：当前实体中的属性类型    */</span>    <span class="token operator">&lt;</span>association property<span class="token operator">=</span><span class="token string">"user"</span> javaType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"uid"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"name"</span> property<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>association<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span> resultMap<span class="token operator">=</span><span class="token string">"orderMap"</span><span class="token operator">></span>    select <span class="token operator">*</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>id oid from orders o<span class="token punctuation">,</span> <span class="token class-name">User</span> u where o<span class="token punctuation">.</span>uid<span class="token operator">=</span>u<span class="token punctuation">.</span>id<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、一对多"><a href="#2、一对多" class="headerlink" title="2、一对多"></a>2、一对多</h3><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320215048174.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"userMap"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"uid"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"username"</span> property<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token comment">// 配置集合</span>    <span class="token comment">// property：集合名称；ofType：当前集合中的数据类型</span>    <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"orderList"</span> ofType<span class="token operator">=</span><span class="token string">"order"</span><span class="token operator">></span>    <span class="token comment">// 封装order数据</span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"oid"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"total"</span> property<span class="token operator">=</span><span class="token string">"total"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findAll"</span> resultMap<span class="token operator">=</span><span class="token string">"orderMap"</span><span class="token operator">></span>    select <span class="token operator">*</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>id oid from <span class="token class-name">User</span> u<span class="token punctuation">,</span> orders o where u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、多对多"><a href="#3、多对多" class="headerlink" title="3、多对多"></a>3、多对多</h3><p><img src="/2022/03/20/ssm-kuang-jia-zhi-mybatis-pian/image-20220320220020972.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"userRoleMap"</span> type<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"userId"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"username"</span> property<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token comment">// 配置集合</span>    <span class="token comment">// property：集合名称；ofType：当前集合中的数据类型</span>    <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"roleList"</span> ofType<span class="token operator">=</span><span class="token string">"role"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"roleid"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>result colunm<span class="token operator">=</span><span class="token string">"rolename"</span> property<span class="token operator">=</span><span class="token string">"rolename"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>result<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findRole"</span> resultMap<span class="token operator">=</span><span class="token string">"RoleMap"</span><span class="token operator">></span>    select <span class="token operator">*</span> from <span class="token class-name">User</span> u<span class="token punctuation">,</span> user_role ur<span class="token punctuation">,</span> role r where u<span class="token punctuation">.</span>id<span class="token operator">=</span>ur<span class="token punctuation">.</span>userId and ur<span class="token punctuation">.</span>roleId<span class="token operator">=</span>r<span class="token punctuation">.</span>id<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、注解开发"><a href="#十一、注解开发" class="headerlink" title="十一、注解开发"></a>十一、注解开发</h2><h3 id="1、常用注解"><a href="#1、常用注解" class="headerlink" title="1、常用注解"></a>1、常用注解</h3><table><thead><tr><th>注解名</th><th>说明</th></tr></thead><tbody><tr><td><code>@Insert</code></td><td>实现新增</td></tr><tr><td><code>@Update</code></td><td>实现更新</td></tr><tr><td><code>@Delete</code></td><td>实现删除</td></tr><tr><td><code>@Select</code></td><td>实现查询</td></tr><tr><td><code>@Result</code></td><td>实现结果集封装</td></tr><tr><td><code>@Results</code></td><td>可以与<code>@Result</code>一起使用，封装多个结果集</td></tr><tr><td><code>@One</code></td><td>实现一对一结果集封装</td></tr><tr><td><code>@Many</code></td><td>实现一对多结果集封装</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加载映射关系</span><span class="token generics"><span class="token punctuation">&lt;</span>mappers<span class="token punctuation">></span></span>    <span class="token comment">// 指定接口所在的包</span>    <span class="token operator">&lt;</span><span class="token keyword">package</span> <span class="token namespace">name</span><span class="token operator">=</span><span class="token string">"com.mapper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">package</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span><span class="token comment">// 接口中</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id=#&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from user where id=#&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、注解实现复杂映射开发"><a href="#2、注解实现复杂映射开发" class="headerlink" title="2、注解实现复杂映射开发"></a>2、注解实现复杂映射开发</h3><p>实现复杂关系映射，可以在映射文件中通过配置<code>&lt;resultMap&gt;</code>来实现；使用注解开发后，可以使用<code>@Results</code>  ,<code>@Result</code>  ,<code>@One</code>,  <code>@Many</code>  组合完成复杂关系的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Results</code></td><td>代替的是标签<code>&lt;resultMap&gt;</code>。该注解中可以使用单个<code>@Result</code>，也可以使用<code>@Result</code>集合。使用格式：<code>@Results(&#123;@Result(), @Result()&#125;)</code>或<code>@Results(@Result())</code></td></tr><tr><td><code>@Result</code></td><td>代替了<code>&lt;id&gt;</code>和<code>&lt;result&gt;</code>标签</td></tr></tbody></table><p><strong>@Result中的属性介绍：</strong></p><ul><li><code>column</code>：数据库的列名</li><li><code>property</code>：需要装配的属性名</li><li><code>one</code>：需要使用的<code>@One</code>，<code>@Result(one=@One)()</code></li><li><code>many</code>：需要使用的<code>@Many</code>，<code>@Result(many=@Many)()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 一对一注解开发</span><span class="token comment">/*方式一@Select("select *, o.id oid from orders o, User u where o.uid=u.id")@Results(&#123;    @Result(column="oid", property="id")    @Result(column="time", property="time")    @Result(column="total", property="total")    @Result(column="uid", property="user.id")    @Result(column="username", property="user.username")&#125;)*/</span><span class="token comment">// 方式二</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from orders"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"oid"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"time"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"time"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"total"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"total"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>        property<span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token comment">// 要封装的属性名称</span>        colunm<span class="token operator">=</span><span class="token string">"uid"</span><span class="token punctuation">,</span><span class="token comment">// 根据哪个字段去查询user表的数据</span>        javaType<span class="token operator">=</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment">// 要封装的实体类型</span>        <span class="token comment">// select属性代表查询哪个接口的方法获得数据</span>        one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"com.mapper.UserMapper.findById"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一对多注解开发</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// id=true，表示为主键</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"uid"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>        property<span class="token operator">=</span><span class="token string">"orderList"</span><span class="token punctuation">,</span><span class="token comment">// 要封装的属性名称</span>        colunm<span class="token operator">=</span><span class="token string">"uid"</span><span class="token punctuation">,</span><span class="token comment">// 根据哪个字段去查询user表的数据</span>        javaType<span class="token operator">=</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token comment">// 要封装的实体类型</span>        <span class="token comment">// select属性代表查询哪个接口的方法获得数据</span>        many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"com.mapper.OrderMapper.findByUid"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findUserAndOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架之SpringMVC篇</title>
      <link href="/2022/03/15/ssm-kuang-jia-zhi-springmvc-pian/"/>
      <url>/2022/03/15/ssm-kuang-jia-zhi-springmvc-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架之SpringMVC篇"><a href="#SSM框架之SpringMVC篇" class="headerlink" title="SSM框架之SpringMVC篇"></a>SSM框架之SpringMVC篇</h1><h2 id="一、Spring集成web环境"><a href="#一、Spring集成web环境" class="headerlink" title="一、Spring集成web环境"></a>一、Spring集成web环境</h2><h3 id="1、应用上下文获取方式"><a href="#1、应用上下文获取方式" class="headerlink" title="1、应用上下文获取方式"></a>1、应用上下文获取方式</h3><p>应用上下文对象时通过<code>new ClasspathXmlApplicationContext(spring配置文件)</code>方式获取，但是每次从容器中获得<code>Bean</code>时都要编写，导致配置文件加载多次，应用上下文对象创建多次</p><p>在<code>Web</code>项目中，可以使用<code>ServletContextListener</code>监听<code>Web</code>应用启动，可以在启动时就加载<code>spring</code>配置文件，创建应用上下文对象，再将其存储到最大的域<code>servletContext</code>域中，就可以在任意位置从域中获得应用上下文对象</p><h4 id="①-大致实现方式"><a href="#①-大致实现方式" class="headerlink" title="① 大致实现方式"></a>① 大致实现方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 写一个监听类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// spring应用上下文对象存储到ServletContext域中</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> servletContextEvent<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// web.xml配置监听器</span><span class="token generics"><span class="token punctuation">&lt;</span>listener<span class="token punctuation">></span></span><span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>ContextLoaderListener</span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span>        <span class="token comment">// servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserService</span> userService <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 巧用全局初始化参数，web.xml配置</span><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>applicationContext<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token comment">// 监听类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> servletContextEvent<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取web.xml中的全局参数</span>        <span class="token class-name">String</span> contextConfigLocation <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"contextConfigLocation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>contextConfigLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>  servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-Spring提供获取的工具"><a href="#②-Spring提供获取的工具" class="headerlink" title="② Spring提供获取的工具"></a>② Spring提供获取的工具</h4><p><code>Spring</code>提供了一个监听器<code>ContextLoaderListener</code>，该监听器内部加载<code>Spring</code>配置文件，创建应用上下文对象，并存储到<code>ServletContext</code>域中，提供了一个客户端工具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象</p><p>所以只需做两件事</p><ul><li>在<code>web.xml</code>中配置<code>ContextLoaderListener</code>监听器（导入<code>spring-web</code>坐标）</li><li>使用<code>WebApplicationContextUtils</code>获得应用上下文</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 先在pom.xml配置</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token comment">// 再在web.xml配置</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>全局参数<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>applicationContext<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监听器<span class="token operator">--</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>listener<span class="token punctuation">></span></span><span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span>ContextLoaderListener</span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span>        <span class="token comment">// servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、SpringMVC简介"><a href="#二、SpringMVC简介" class="headerlink" title="二、SpringMVC简介"></a>二、SpringMVC简介</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><code>SpringMVC</code>是一种基于<code>Java</code>的实现<strong>MVC设计模型</strong>的请求驱动类型的轻量级<strong>Web框架</strong>，属于<code>SpringFrameWork</code>的后续产品，已经融合在<code>Spring Web Flow</code>中</p><p><code>SpringMVC</code>已经成为目前最主流的<code>MVC</code>框架之一，它通过一套注解，让一个简单的<code>Java</code>类成为处理请求的控制器，而无需实现任何接口，同时还支持<code>RESTful</code>编程风格的请求</p><h3 id="2、开发步骤"><a href="#2、开发步骤" class="headerlink" title="2、开发步骤"></a>2、开发步骤</h3><ol><li>导入<code>SpringMVC</code>包，即导坐标</li><li>配置<code>Servlet</code></li><li>编写<code>POJO</code>（控制器 <code>Controller</code>）</li><li>将<code>POJO</code>使用注解配置到<code>Spring</code>容器中（<code>@Controller</code>）</li><li>配置组件扫描，即配置<code>spring-mvc.xml</code>文件</li><li>执行访问测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在pom..xml导入坐标</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token comment">// 在web.xml配置springmvc前端控制器</span><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">></span></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">DispatcherServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>springmvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token class-name">DispatcherServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token comment">// 编写控制器和视图（视图即jsp文件）</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 映射</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Controller save running.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置springmvc文件</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.controller"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、SpringMVC组件解析"><a href="#三、SpringMVC组件解析" class="headerlink" title="三、SpringMVC组件解析"></a>三、SpringMVC组件解析</h2><h3 id="1、执行流程"><a href="#1、执行流程" class="headerlink" title="1、执行流程"></a>1、执行流程</h3><p><img src="/2022/03/15/ssm-kuang-jia-zhi-springmvc-pian/image-20220315221250106.png"></p><ol><li>用户发送请求至前端控制器<code>DispatcherServlet</code></li><li><code>DispatcherServlet</code>收到请求调用<code>HandlerMapping</code>处理器映射器</li><li>处理器映射器找到具体的处理器（可以根据<code>xml</code>配置、注解进行查找），生成处理器对象及处理器拦截器（如果有则生成）迎宾返回给<code>DispatcherServlet</code></li><li><code>DispatcherServlet</code>调用<code>HandlerAdapter</code>处理器适配器</li><li><code>HandlerAdapter</code>经过适配调用具体的处理器（<code>Controller</code>，也叫后端控制器）</li><li><code>Controller</code>执行完成返回<code>ModelAndView</code></li><li><code>HandlerAdapter</code>将<code>controller</code>执行结果<code>ModelAndView</code>返回给<code>DispatcherServlet</code></li><li><code>DispatcherServlet</code>将<code>ModelAndView</code>传给<code>ViewReslover</code>视图解析器</li><li><code>ViewReslover</code>解析后返回具体<code>View</code></li><li><code>DispatcherServlet</code>根据<code>View</code>进行渲染视图（即将模型数据填充至视图中），然后响应用户</li></ol><h3 id="2、注解解析"><a href="#2、注解解析" class="headerlink" title="2、注解解析"></a>2、注解解析</h3><h4 id="①-RequestMapping"><a href="#①-RequestMapping" class="headerlink" title="① @RequestMapping"></a>① @RequestMapping</h4><p>请求映射</p><p><strong>作用：</strong>用于建立请求URL和处理请求方法之间的对应关系</p><p><strong>位置：</strong></p><ul><li>类上，请求URL的第一级访问目录，如果不写的话，就相当于应用的根目录</li><li>方法上，请求URL的第二级访问目录，与类上的使用<code>@RequestMapping</code>标注的一级目录一起组成访问虚拟路径</li></ul><p><strong>属性：</strong></p><ul><li><code>value</code>：用于指定请求的URL，和<code>path</code>属性的作用一样</li><li><code>method</code>：用于指定请求的方式</li><li><code>params</code>：用于指定限制请求参数的条件，支持简单的表达式，要求请求参数的<code>key</code>和<code>value</code>必须和配置的一模一样</li></ul><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@RequestMapping(&quot;&#x2F;qiuck&quot;)@RequestMapping(value &#x3D; &quot;&#x2F;qiuck&quot;, method &#x3D; &quot;RequestMethod.POST&quot;)&#x2F;&#x2F; 请求参数里的money不能是100params &#x3D; &#123;&quot;money!100&quot;&#125;&#x2F;&#x2F; 参数里必须有moneyparams &#x3D; &#123;&quot;money&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-组件扫描"><a href="#②-组件扫描" class="headerlink" title="② 组件扫描"></a>② 组件扫描</h4><p><strong>mvc命名空间引入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 命名空间</span>xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>xmlns<span class="token operator">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>    <span class="token comment">// 约束地址</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>contexthttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsdhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvchttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xsd"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SpringMVC</code>基于<code>Spring</code>容器，在进行<code>SpringMVC</code>操作时，需要将<code>Controller</code>存储到<code>Spring</code>容器中，如果使用<code>@Controller</code>注解标注的话，就需要使用以下代码进行组件扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.controller"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="③-XML配置解析"><a href="#③-XML配置解析" class="headerlink" title="③ XML配置解析"></a>③ XML配置解析</h4><p><code>SpringMVC</code>有默认组件配置，默认组件配置都是<code>DispattcherServlet.properties</code>配置文件中配置的，翻源码可以看到该解析器的默认设置，后续可以根据设置灵活修改配置和相关代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重定向</span>REDIRECT_URL_PREFIX <span class="token operator">=</span> <span class="token string">"redirect:"</span>    <span class="token comment">// 转发（默认值）</span>FORWARD_URL_PREFIX <span class="token operator">=</span> <span class="token string">"forward:"</span>    <span class="token comment">// 视图名称前缀</span>prefix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 视图名称后缀</span>suffix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、SpringMVC的数据响应"><a href="#四、SpringMVC的数据响应" class="headerlink" title="四、SpringMVC的数据响应"></a>四、SpringMVC的数据响应</h2><h3 id="1、数据响应方式"><a href="#1、数据响应方式" class="headerlink" title="1、数据响应方式"></a>1、数据响应方式</h3><h4 id="①-页面跳转"><a href="#①-页面跳转" class="headerlink" title="① 页面跳转"></a>① 页面跳转</h4><ul><li><p>直接返回字符串</p><p>此种方式会将返回的字符串与视图解析器的前后缀凭借后跳转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/views/"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 转发地址为：/views/index.jsp</span>    <span class="token comment">// 转发：forward:/views/index.jsp  </span><span class="token comment">// 重定向：redirect:/index.jsp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过<code>ModelAndView</code>对象返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置模型数据</span>    m<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置视图</span>    m<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 另外一种方式</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token class-name">Method2</span><span class="token punctuation">(</span><span class="token class-name">ModelAndView</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置模型数据</span>    m<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置视图</span>    m<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// another</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Method3</span><span class="token punctuation">(</span><span class="token class-name">Model</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置模型数据</span>    m<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="②-回写数据"><a href="#②-回写数据" class="headerlink" title="② 回写数据"></a>② 回写数据</h4><ul><li><p>直接返回字符串</p><ol><li><p>通过<code>SpringMVC</code>框架注入的<code>response</code>对象，使用<code>response.getWriter().print(&quot;&quot;)</code>回写数据，不需要视图跳转，业务方法返回值为<code>void</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将需要回写的字符串直接返回，但此时需要通过<code>@ResponseBody</code>注解告知<code>SpringMVC</code>，方法返回的字符串不是跳转，而是直接在<code>http</code>响应体中返回</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 直接回写json字符串</span><span class="token comment">// 先导入坐标</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jackson<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.7</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.7</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>jackson<span class="token operator">-</span>annotations<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.7</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token comment">// 测试方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用json转换工具将对象转换成json格式字符串</span>    <span class="token class-name">ObjectMapper</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> json<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回对象或集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 期望SpringMVC自动将对象转换成json格式的字符串</span><span class="token comment">// 在springmvc.xml配置处理器映射器</span><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"messageConverters"</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>list<span class="token punctuation">></span></span>            <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 测试方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建对象</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述方法比较麻烦，可以使用<code>mvc</code>的注解驱动替代上述配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// mvc的注解驱动</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>SpringMVC</code>中，<strong>处理器映射器</strong>、<strong>处理器适配器</strong>、<strong>视图解析器</strong>称为三大组件。使用<code>&lt;mvc:annotation-driven&gt;</code>自动加载<code>RequestMappingHandlerMapping</code>（处理映射器）和<code>RequestMappingHandlerAdapter</code>（处理适配器），可用在配置文件中替代注解处理器和适配器的配置。同时使用<code>&lt;mvc:annotation-driven&gt;</code>默认底层就会集成<code>json</code>进行对象或集合的<code>json</code>格式字符串的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// mvc的注解驱动</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="五、SpringMVC的请求"><a href="#五、SpringMVC的请求" class="headerlink" title="五、SpringMVC的请求"></a>五、SpringMVC的请求</h2><p>客户端请求参数的格式是：<code>name=value&amp;name=value...</code></p><p>服务器端要获得请求的参数，有时还需要进行数据的封装，<code>SpringMVC</code>可以接受如下类型的参数：</p><ul><li>基本类型参数</li><li><code>POJO</code>类型参数（即基本Java Bean）</li><li>数组类型参数</li><li>集合类型参数</li></ul><h3 id="1、获得基本类型参数"><a href="#1、获得基本类型参数" class="headerlink" title="1、获得基本类型参数"></a>1、获得基本类型参数</h3><p><code>Controller</code>中的业务方法的参数名要与请求参数的<code>name</code>一致，参数值会自动映射匹配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 有一个网站</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>quick<span class="token operator">?</span>username<span class="token operator">=</span>zhangsan<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token comment">// 方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、获得POJO类型参数"><a href="#2、获得POJO类型参数" class="headerlink" title="2、获得POJO类型参数"></a>2、获得POJO类型参数</h3><p><code>Controller</code>中的业务方法的<code>POJO</code> 参数的属性名要与请求参数的<code>name</code>一致，参数值会自动映射匹配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 类中</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token comment">// 属性名要与请求参数的name一致</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、获得数组类型参数"><a href="#3、获得数组类型参数" class="headerlink" title="3、获得数组类型参数"></a>3、获得数组类型参数</h3><p><code>Controller</code>中的业务方法数组名称与请求参数的<code>name</code>一致，参数值会自动映射匹配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>quick<span class="token operator">?</span>strs<span class="token operator">=</span><span class="token number">11</span><span class="token operator">&amp;</span>strs<span class="token operator">=</span><span class="token number">22</span><span class="token operator">&amp;</span>strs<span class="token operator">=</span><span class="token number">33</span><span class="token comment">// 方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、获得集合类型参数"><a href="#4、获得集合类型参数" class="headerlink" title="4、获得集合类型参数"></a>4、获得集合类型参数</h3><ol><li>获得集合参数时，要将集合参数包装到一个<code>POJO</code>中才可以</li><li>当使用<code>ajax</code>提交时，可以指定<code>contentType</code>为<code>json</code>形式，在方法参数位置使用<code>@ResponseBody</code>可以直接接收集合数据而无序使用<code>POJO</code>进行包装</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jsp中添加</span><span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">></span></span>    <span class="token keyword">var</span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username<span class="token operator">:</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>            url<span class="token operator">:</span><span class="token string">"/quick"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>            contentType<span class="token operator">:</span> 'application<span class="token operator">/</span>json<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>'        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token comment">// 方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、静态资源访问的开启"><a href="#5、静态资源访问的开启" class="headerlink" title="5、静态资源访问的开启"></a>5、静态资源访问的开启</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 前台资源放行</span><span class="token comment">// 方式1</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/static/"</span> mapping<span class="token operator">=</span><span class="token string">"/static/**"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>resources location<span class="token operator">=</span><span class="token string">"/js/"</span> mapping<span class="token operator">=</span><span class="token string">"/js/**"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment">// 也可以写以下的配置取代</span><span class="token operator">&lt;</span>mvc<span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">-</span>servlet<span class="token operator">-</span>hander<span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、请求数据乱码问题"><a href="#6、请求数据乱码问题" class="headerlink" title="6、请求数据乱码问题"></a>6、请求数据乱码问题</h3><p>当<code>post</code>请求时，数据会出现乱码，可以设置一个过滤器来进行编码的过滤</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在web.xml配置</span><span class="token comment">// 全局过滤</span><span class="token generics"><span class="token punctuation">&lt;</span>filter<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>CharacterEncodingFilter</span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>        <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span><span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token comment">/*&lt;/url-pattern>&lt;/filter-mapping></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、参数绑定注解-RequestParam"><a href="#7、参数绑定注解-RequestParam" class="headerlink" title="7、参数绑定注解@RequestParam"></a>7、参数绑定注解@RequestParam</h3><p>当请求参数名称与<code>Controller</code>业务方法参数名称不一致时，需要通过<code>@RequestParam</code>注解显示的绑定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>quick<span class="token operator">?</span>name<span class="token operator">=</span>zhangsan<span class="token comment">// 方法</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@RequestParam参数</strong></p><ul><li><code>value</code>：与请求参数名称</li><li><code>required</code>：此在指定的请求参数是否必须包括，默认<code>true</code></li><li><code>defaultValue</code>：在没指定请求参数时，使用指定的默认值赋值</li></ul><h3 id="8、获取Restful风格的参数"><a href="#8、获取Restful风格的参数" class="headerlink" title="8、获取Restful风格的参数"></a>8、获取Restful风格的参数</h3><p><code>Restful</code>是一种软件架构风格、设计风格，而不是标准，只是提供了一种设计原则和约束条件。主要用于客户端和服务端交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制</p><p><code>Restful</code>风格的请求时使用<code>&quot;url + 请求方式&quot;</code>表示一次请求目的的，<code>HTTP</code>协议里面四个表示操作方式的动词如下：</p><ul><li><code>GET</code>：用于获取资源</li><li><code>POST</code>：用于新建资源</li><li><code>PUT</code>：用于更新资源</li><li><code>DELETE</code>：用于删除资源</li><li>例子：<code>/user/zhangsan GET:</code></li></ul><p>例子中张三就是要获得的请求参数，在<code>SpringMVC</code>中可以使用占位符进行参数绑定，地址可以改写成<code>/user/&#123;id&#125;</code>，业务方法中，使用<code>@PathVariable</code>注解进行占位符的匹配获取工作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>quick<span class="token operator">/</span>zhangsan<span class="token comment">// 方法，value中的参数要与&#123;&#125;中的一致</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick/&#123;name&#125;"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、自定义类型转换器"><a href="#9、自定义类型转换器" class="headerlink" title="9、自定义类型转换器"></a>9、自定义类型转换器</h3><p><strong>开发步骤：</strong></p><ol><li>定义转换器类实现<code>Converter</code>接口</li><li>在配置文件中声明转换器</li><li>在<code>&lt;annotation-driven&gt;</code>中引用转换器</li></ol><h3 id="10、获得Servlet相关API"><a href="#10、获得Servlet相关API" class="headerlink" title="10、获得Servlet相关API"></a>10、获得Servlet相关API</h3><p><code>SpringMVC</code>支持使用原始<code>ServletAPI</code>对象作用控制器方法的参数进行注入，常用对象如下</p><ul><li><code>HttpServletRequest</code></li><li><code>HttpServletResponse</code></li><li><code>HttpSession</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、获取请求头"><a href="#11、获取请求头" class="headerlink" title="11、获取请求头"></a>11、获取请求头</h3><h4 id="①-RequestHeader"><a href="#①-RequestHeader" class="headerlink" title="① @RequestHeader"></a>① @RequestHeader</h4><p>使用<code>@RequestHeader</code>可以获得请求头信息，相当于<code>web</code>阶段学习的<code>request.getHeader(name)</code></p><p><code>@RequestHeader</code>属性如下</p><ul><li><code>value</code>：请求头名称</li><li><code>required</code>：是否必须携带此请求头</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"User-Agent"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> header<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-CookieValue"><a href="#②-CookieValue" class="headerlink" title="② @CookieValue"></a>② @CookieValue</h4><p>使用<code>@CookieValue</code>可以获得指定的<code>Cookie</code>的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Method</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> jsessionId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsessionId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、文件上传"><a href="#六、文件上传" class="headerlink" title="六、文件上传"></a>六、文件上传</h2><h3 id="1、文件上传客户端三要素"><a href="#1、文件上传客户端三要素" class="headerlink" title="1、文件上传客户端三要素"></a>1、文件上传客户端三要素</h3><ul><li>表单项：<code>type=&quot;file&quot;</code></li><li>表单提交方式：<code>post</code></li><li>表单的<code>enctype</code>属性是多部分表单形式，即<code>enctype=&quot;multipart/form-data&quot;</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/quick"</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"file"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> name<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、上传原理"><a href="#2、上传原理" class="headerlink" title="2、上传原理"></a>2、上传原理</h3><ul><li>当<code>form</code>表单修改为多部分表单时，<code>request.getParameter()</code>将失效</li><li><code>enctype=&quot;application/x-www-form-urlencoded&quot;</code>时，<code>form</code>表单的正文内容格式是：<code>key=value&amp;key=value&amp;key=value</code></li><li>当<code>form</code>表单的<code>enctype</code>取值为<code>multipart/form-data</code>时，请求正文内容就变成多部分形式</li></ul><h3 id="3、单文件上传步骤"><a href="#3、单文件上传步骤" class="headerlink" title="3、单文件上传步骤"></a>3、单文件上传步骤</h3><ol><li>导入<code>fileupload</code>和<code>io</code>坐标</li><li>配置文件上传解析器</li><li>编写文件上传代码</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// pom.xml导入坐标</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>io<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>fileupload<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.3</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token comment">// springmvc.xml配置文件上传解析器</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"multipartResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="token operator">></span>    <span class="token comment">// 上传文件总大小</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxUploadSize"</span> value<span class="token operator">=</span><span class="token string">"5242800"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token comment">// 上传单个文件大小</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxUploadSizePerFile"</span> value<span class="token operator">=</span><span class="token string">"5242800"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token comment">// 上传文件的编码类型</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"defaultEncoding"</span> value<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment">// 代码</span><span class="token comment">// java文件，参数要与前端的保持一一致</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span> uploadFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获得文件名称</span>    <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> uploadFile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存文件</span>    uploadFile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\upload\\"</span> <span class="token operator">+</span> orgrginalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// jsp文件</span><span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">></span></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"/quick1"</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"uploadFile"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> name<span class="token operator">=</span><span class="token string">"提交"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Spring-JdbcTemplate基本使用"><a href="#七、Spring-JdbcTemplate基本使用" class="headerlink" title="七、Spring JdbcTemplate基本使用"></a>七、Spring JdbcTemplate基本使用</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p><code>JdbcTemplate</code>是<code>spring</code>框架中提供一个对象，是对原始繁琐的<code>Jdbc API</code>对象的简单封装。<code>spring</code>框架提供了很多操作模板类。如操作关系型数据的<code>JdbcTemplate</code>和<code>HibernateTemplate</code>，操作<code>nosql</code>数据库的<code>RedisTemple</code>，操作消息队列的<code>JmsTemplate</code>等</p><h3 id="2、开发步骤-1"><a href="#2、开发步骤-1" class="headerlink" title="2、开发步骤"></a>2、开发步骤</h3><ol><li>导入<code>spring-jdbc</code>和<code>spring-tx</code>坐标</li><li>创建数据库表和实体</li><li>创建<code>JdbcTemplate</code>对象</li><li>执行数据库操作</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 导入坐标</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>tx<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>$<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token comment">// 测试方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建数据源对象，抽取配置文件</span>     <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建对象</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置数据源对象</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行操作</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql操作语句<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 更新操作</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询操作</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token class-name">Mapper</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token class-name">Mapper</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、SpringMVC拦截器"><a href="#八、SpringMVC拦截器" class="headerlink" title="八、SpringMVC拦截器"></a>八、SpringMVC拦截器</h2><h3 id="1、拦截器（interceptor）作用"><a href="#1、拦截器（interceptor）作用" class="headerlink" title="1、拦截器（interceptor）作用"></a>1、拦截器（interceptor）作用</h3><p><code>SpringMVC</code>的拦截器类似于<code>Servlet</code>开发中的过滤器<code>filter</code>，用于对处理器进行预处理和后处理</p><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链。在访问被拦截的方法或字段时，拦截器链中的拦截器会按其之前定义的顺序被调用，拦截器也是<code>AOP</code>思想的具体实现</p><h3 id="2、拦截器和过滤器的区别"><a href="#2、拦截器和过滤器的区别" class="headerlink" title="2、拦截器和过滤器的区别"></a>2、拦截器和过滤器的区别</h3><table><thead><tr><th align="left">区别</th><th align="left">过滤器</th><th align="left">拦截器</th></tr></thead><tbody><tr><td align="left">使用范围</td><td align="left">是<code>servlet</code>规范中的一部分，任何<code>JavaWeb</code>工程都可以使用</td><td align="left">是<code>SpringMVC</code>框架的，只有使用<code>SpringMVC</code>框架的工程才能使用</td></tr><tr><td align="left">拦截范围</td><td align="left">在<code>url-pattern</code>中配置了<code>/*</code>之后，可以对所有要访问的资源拦截</td><td align="left">在<code>&lt;mvc:mapping path=&quot;&quot;/&gt;</code>中配置了<code>/**</code>之后，也可以掉所有资源进行拦截，但是可以通过<code>&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</code>标签排除不需要拦截的资源</td></tr></tbody></table><h3 id="3、快速入门"><a href="#3、快速入门" class="headerlink" title="3、快速入门"></a>3、快速入门</h3><ol><li><p>创建拦截器类实现<code>HandlerInterceptor</code>接口</p><ul><li>接口有三个方法，可以在类中进行重写<ul><li><code>boolean preHandle()</code>：在目标方法执行前执行，若返回<code>false</code>则拦截，返回<code>true</code>，继续调用下一个拦截器的<code>preHandle</code>方法</li><li><code>void postHandle()</code>：在目标方法执行后，视图对象返回前执行，可以在该方法中对<code>Controller</code>处理后的视图对象进行操作</li><li><code>void afterCompletion()</code>：在流程都执行完毕后执行</li></ul></li></ul></li><li><p>配置拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">></span>    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">></span>        <span class="token comment">// 对哪些资源执行拦截操作</span>        <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>mapping path<span class="token operator">=</span><span class="token string">"/**"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token comment">// 执行拦截操作的类</span>        <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.interceptor.MyInterceptor"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptor<span class="token operator">&lt;</span><span class="token operator">/</span>mvc<span class="token operator">:</span>interceptors<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试拦截器的拦截效果</p></li></ol><h2 id="九、异常处理"><a href="#九、异常处理" class="headerlink" title="九、异常处理"></a>九、异常处理</h2><h3 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h3><p>系统的<code>Dao</code>、<code>Service</code>、<code>Controller</code>出现都通过<code>throws Exception</code>向上抛出，最后由<code>SpringMVC</code>前端控制器交由异常处理器进行异常处理</p><p><img src="/2022/03/15/ssm-kuang-jia-zhi-springmvc-pian/image-20220318223151639.png"></p><h3 id="2、异常处理的两种方式"><a href="#2、异常处理的两种方式" class="headerlink" title="2、异常处理的两种方式"></a>2、异常处理的两种方式</h3><h4 id="①-SimpleMappingExceptionResolver"><a href="#①-SimpleMappingExceptionResolver" class="headerlink" title="① SimpleMappingExceptionResolver"></a>① SimpleMappingExceptionResolver</h4><p>使用<code>SpringMVC</code>提供的简单异常处理器<code>SimpleMappingExceptionResolver</code>，使用时可用根据项目情况进行相应异常与视图的映射配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.hander.SimpleMappingExceptionResolver"</span><span class="token operator">></span>    <span class="token comment">// 默认错误视图</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"defaultErrorView"</span> value<span class="token operator">=</span><span class="token string">"error1"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment">// 异常映射</span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"exceptionMappings"</span><span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>map<span class="token punctuation">></span></span><span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"com.exception.MyException"</span> value<span class="token operator">=</span><span class="token string">"error2"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"java.lang.ClassCastException"</span> value<span class="token operator">=</span><span class="token string">"error3"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-HandlerExceptionRsolver"><a href="#②-HandlerExceptionRsolver" class="headerlink" title="② HandlerExceptionRsolver"></a>② HandlerExceptionRsolver</h4><p>实现<code>Spring</code>的异常处理接口<code>HandlerExceptionRsolver</code>自定义自己的异常处理器</p><ol><li><p>创建异常处理类实现<code>HandlerExceptionRsolver</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法中代码</span><span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例</span><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">MyException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"自定义异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"类转换异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> modelAndView<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置异常处理器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// springmvc.xml中配置</span><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"类的位置"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编写异常页面</p></li><li><p>测试异常跳转</p></li></ol><h2 id="十、AOP"><a href="#十、AOP" class="headerlink" title="十、AOP"></a>十、AOP</h2><p><code>AOP</code>为<code>Aspect Oriented Programming</code>的缩写，意思为<strong>面向切面编程</strong>，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</p><p><code>AOP</code>是<code>OOP</code>的延续，是软件开发中的一个热点，也是<code>Spring</code>框架中的一个重要内容，是函数式编程的一种衍生范型。利用<code>AOP</code>可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</p><h3 id="1、AOP的作用及其优势"><a href="#1、AOP的作用及其优势" class="headerlink" title="1、AOP的作用及其优势"></a>1、AOP的作用及其优势</h3><ul><li><strong>作用：</strong>在程序运行期间，在不修改源码的情况下，对方法进行功能增强</li><li><strong>优势：</strong>减少重复代码，提高开发效率，并且便于维护</li></ul><h3 id="2、AOP的底层实现"><a href="#2、AOP的底层实现" class="headerlink" title="2、AOP的底层实现"></a>2、AOP的底层实现</h3><p><code>AOP</code>的底层是通过<code>Spring</code>提供的动态代理技术实现的。在运行期间，<code>Spring</code>通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，再去调用目标对象的方法，从而完成功能的增强</p><p><strong>常用动态代理技术</strong></p><ul><li>JDK代理：基于接口的动态代理技术</li><li>cglib代理：基于父类的动态代理技术</li></ul><p><img src="/2022/03/15/ssm-kuang-jia-zhi-springmvc-pian/image-20220319092943088.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK代理底层实现</span><span class="token comment">// 设有targetinterface接口，target实现类，advice类（增强类），接口和实现类中有save方法，advice类中有before、after方法</span><span class="token comment">// 主方法中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建目标对象</span>    <span class="token keyword">final</span> <span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得增强对象</span>    <span class="token keyword">final</span> <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">advice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回值就是动态生成的代理对象</span>    <span class="token class-name">TargetInterface</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TargetInterface</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span>newProxyInstance<span class="token punctuation">&#123;</span>        <span class="token comment">// 目标对象类加载器</span>        target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 目标对象相同的接口字节码对象数组</span>        target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 调用代理对象的任何方法，实质执行的都是invoke方法</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 前置增强</span>                advice<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 执行目标方法</span>                <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 后置增强</span>                advice<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 调用代理对象的方法</span>    proxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// cglib代理</span><span class="token comment">// 设有target类，advice类（增强类），target类中有save方法，advice类中有before、after方法</span><span class="token comment">// 主方法中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建目标对象</span>    <span class="token keyword">final</span> <span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得增强对象</span>    <span class="token keyword">final</span> <span class="token class-name">Advice</span> advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">advice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回值就是动态生成的代理对象</span>    <span class="token comment">// 创建增强器</span>    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置父类（目标）</span>    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置回调</span>    enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 执行前置</span>            advice<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行目标</span>            <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行后置</span>            advice<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建代理对象</span>    <span class="token class-name">Target</span> proxy <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、常用术语"><a href="#3、常用术语" class="headerlink" title="3、常用术语"></a>3、常用术语</h3><ul><li><code>Target</code>（目标对象）：代理的目标对象</li><li><code>Proxy</code>（代理）：一个类被<code>AOP</code>织入增强后，就产生一个结果代理类</li><li><code>Joinpoint</code>（连接点）：所谓连接点是指那些被拦截到的点。在<code>Spring</code>中，这些点指的是方法，因为<code>spring</code>只支持方法类型的连接点。<strong>即可以被增强的方法</strong></li><li><code>Pointcut</code>（切入点）：所谓切入点是指对哪些<code>Joinpoint</code>进行拦截的定义，<strong>即被增强的方法</strong></li><li><code>Advice</code>（通知/增强）：所谓通知是指拦截到<code>Joinpoint</code>之后要做的事情就是通知</li><li><code>Aspect</code>（切面）：是切入点和通知（引介）的结合</li><li><code>Weaving</code>（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。<code>spring</code>采用动态代理织入，而<code>AspectJ</code>采用编译器织入和类装载期织入</li></ul><h3 id="4、开发的事项"><a href="#4、开发的事项" class="headerlink" title="4、开发的事项"></a>4、开发的事项</h3><h4 id="①-需要编写的内容"><a href="#①-需要编写的内容" class="headerlink" title="① 需要编写的内容"></a>① 需要编写的内容</h4><ul><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类，切面类中有通知（增强功能方法）</li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li></ul><h4 id="②-AOP技术实现的内容"><a href="#②-AOP技术实现的内容" class="headerlink" title="② AOP技术实现的内容"></a>② AOP技术实现的内容</h4><p><code>Spring</code>框架监控切入点方法的执行，一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行</p><h4 id="③-代理方式"><a href="#③-代理方式" class="headerlink" title="③ 代理方式"></a>③ 代理方式</h4><p>在<code>spring</code>中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式</p><h3 id="5、XML方式实现AOP"><a href="#5、XML方式实现AOP" class="headerlink" title="5、XML方式实现AOP"></a>5、XML方式实现AOP</h3><h4 id="①-开发步骤"><a href="#①-开发步骤" class="headerlink" title="① 开发步骤"></a>① 开发步骤</h4><ol><li><p>导入<code>AOP</code>相关坐标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.0</span><span class="token number">.5</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.8</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建目标接口和目标类</p></li><li><p>创建切面类</p></li><li><p>将目标类和切面类的对象创建权交给<code>spring</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// applicationContext.xml配置</span><span class="token comment">// 目标对象</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"target"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.aop.Target"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment">// 切面对象</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myAspect"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.aop.MyAspect"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>applicationContext.xml</code>中配置织入关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 引入命名空间</span><span class="token comment">// 命名空间</span>xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span><span class="token comment">// 约束地址</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aophttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>    <span class="token comment">// 声明切面</span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">"myAspect"</span><span class="token operator">></span>        <span class="token comment">// 切面类中有before方法，target类中有save方法</span>        <span class="token comment">// 这里就是指定before方法为save方法的前置增强方法</span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"before"</span> pointcut<span class="token operator">=</span><span class="token string">"execution(public void com.aop.Target.save())"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>before<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试代码</p></li></ol><h4 id="②-切点表达式写法"><a href="#②-切点表达式写法" class="headerlink" title="② 切点表达式写法"></a>② 切点表达式写法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 包名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 例子</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号<code>*</code>代表任意</li><li>包名与类名之间一个点<code>.</code>代表当前包下的类，两个点<code>..</code>表示当前包及其子包下的类</li><li>参数列表可以使用两个点<code>..</code>表示任意个数，任意类型的参数列表</li></ul><h4 id="③-通知类型"><a href="#③-通知类型" class="headerlink" title="③ 通知类型"></a>③ 通知类型</h4><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td><code>&lt;aop:before&gt;</code></td><td>用于配置前置通知，指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td><code>&lt;aop:after-returning&gt;</code></td><td>用于配置后置通知，指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td><code>&lt;aop:around&gt;</code></td><td>用于配置环绕通知，指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td><code>&lt;aop:throwing&gt;</code></td><td>用于配置异常抛出通知，指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td><code>&lt;aop:after&gt;</code></td><td>用于配置最终通知，无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h4 id="④-切点表达式的抽取"><a href="#④-切点表达式的抽取" class="headerlink" title="④ 切点表达式的抽取"></a>④ 切点表达式的抽取</h4><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用<code>pointcut-ref</code>属性代替<code>pointcut</code>属性来引用抽取后的切点表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">"myAspect"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"myPointcut"</span> <span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"before"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"myPointcut"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>before<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、注解方式实现AOP"><a href="#6、注解方式实现AOP" class="headerlink" title="6、注解方式实现AOP"></a>6、注解方式实现AOP</h3><h4 id="①-开发步骤-1"><a href="#①-开发步骤-1" class="headerlink" title="① 开发步骤"></a>① 开发步骤</h4><ol><li><p>创建目标接口和目标类</p></li><li><p>创建切面类</p></li><li><p>将目标类和切面类的对象创建权交给<code>spring</code>，以注释的形式交付</p></li><li><p>在切面类中使用注解配置织入关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 对象创建</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myAspect"</span><span class="token punctuation">)</span><span class="token comment">// 标注类为切面类</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">// 切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 配置前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.aop.*.*(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在配置文件中开启组件扫描和<code>AOP</code>的自动代理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 组件扫描</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.anno"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment">// aop自动代理</span><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p></li></ol><h4 id="②-注解通知的类型"><a href="#②-注解通知的类型" class="headerlink" title="② 注解通知的类型"></a>② 注解通知的类型</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 通知配置语法@通知注解(&quot;切点表达式&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td><code>@Before</code></td><td>用于配置前置通知，指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td><code>@AfterReturning</code></td><td>用于配置后置通知，指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td><code>@Around</code></td><td>用于配置环绕通知，指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td><code>@AfterThrowing</code></td><td>用于配置异常抛出通知，指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td><code>@After</code></td><td>用于配置最终通知，无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h4 id="③-切点表达式的抽取"><a href="#③-切点表达式的抽取" class="headerlink" title="③ 切点表达式的抽取"></a>③ 切点表达式的抽取</h4><p>抽取方式是在切面内定义方法，在该方法上使用<code>@Pointcut</code>注解定义切点表达式，然后再在增强注解中进行引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myAspect"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"MyAspect.myPoint()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.aop.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、事务控制"><a href="#十一、事务控制" class="headerlink" title="十一、事务控制"></a>十一、事务控制</h2><h3 id="1、编程式事务控制相关对象"><a href="#1、编程式事务控制相关对象" class="headerlink" title="1、编程式事务控制相关对象"></a>1、编程式事务控制相关对象</h3><h4 id="①-PlatformTransactionManager"><a href="#①-PlatformTransactionManager" class="headerlink" title="① PlatformTransactionManager"></a>① PlatformTransactionManager</h4><p>该<strong>接口</strong>是<code>spring</code>的事务管理器，提供常用的操作事务方法</p><ul><li><code>getTransaction()</code>：获取事务的状态信息</li><li><code>commit()</code>：提交事务</li><li><code>rollback()</code>：回滚事务</li><li><strong>不同<code>Dao</code>层技术有不同的实现类</strong></li></ul><h4 id="②-TransactionDefinition"><a href="#②-TransactionDefinition" class="headerlink" title="② TransactionDefinition"></a>② TransactionDefinition</h4><p>该接口是事务定义的信息对象，里面有如下方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>int getIsolationLevel()</code></td><td>获得事务的隔离级别</td></tr><tr><td><code>int getPropogationBehavior()</code></td><td>获得事务的传播行为</td></tr><tr><td><code>int getTimeout()</code></td><td>获得超时时间</td></tr><tr><td><code>boolean isReadOnly()</code></td><td>是否只读</td></tr></tbody></table><h4 id="③-TrasactionStatus"><a href="#③-TrasactionStatus" class="headerlink" title="③ TrasactionStatus"></a>③ TrasactionStatus</h4><p>该接口提供的是事务具体的运行状态，方法如下</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean hasSavepoint()</code></td><td>是否存储回滚点</td></tr><tr><td><code>boolean isCompleted()</code></td><td>事务是否完成</td></tr><tr><td><code>boolean isNewTransaction()</code></td><td>是否是新事务</td></tr><tr><td><code>boolean isRollbackOnly()</code></td><td>事务是否回滚</td></tr></tbody></table><h3 id="2、基于XML的声明式事务控制"><a href="#2、基于XML的声明式事务控制" class="headerlink" title="2、基于XML的声明式事务控制"></a>2、基于XML的声明式事务控制</h3><h4 id="①-声明式事务控制"><a href="#①-声明式事务控制" class="headerlink" title="① 声明式事务控制"></a>① 声明式事务控制</h4><p><code>Spring</code> 的声明式事务顾名思义就是<strong>采用声明的方式来处理事务</strong>。通过<code>xml</code>或者注解配置的⽅式达到事务控制的⽬的，叫做声明式事务</p><p><strong>声明式事务处理的作用</strong></p><ul><li><p>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</p></li></ul><p><strong>注意：Spring 声明式事务控制底层就是AOP</strong></p><h4 id="②-快速入门"><a href="#②-快速入门" class="headerlink" title="② 快速入门"></a>② 快速入门</h4><p><strong>配置文件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在这之前要配置tx命名空间和约束地址</span><span class="token comment">// 事务管理器，是jdbc就用这个实现</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 配置通知，事务增强</span><span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"Advice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>    <span class="token comment">// 设置事务的属性信息</span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>        <span class="token comment">// 传播行为</span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"save*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"get*"</span> propagation<span class="token operator">=</span><span class="token string">"SUPPORTS"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>    <span class="token comment">// 事务aop的织入，用自动代理</span><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、基于注解的声明式事务控制"><a href="#3、基于注解的声明式事务控制" class="headerlink" title="3、基于注解的声明式事务控制"></a>3、基于注解的声明式事务控制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法中添加注释，括号中可以添加一系列参数</span><span class="token annotation punctuation">@Trasaction</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">// applicationContext.xml中添加配置</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 事务的注解驱动</span><span class="token operator">&lt;</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注解使用在类上，那么该类下的所有方法都是用同一套注解参数配置</li><li>使用在方法上，不同方法可以采用不同的事务参数配置</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架之Spring篇</title>
      <link href="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/"/>
      <url>/2022/03/11/ssm-kuang-jia-zhi-spring-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM框架之Spring篇"><a href="#SSM框架之Spring篇" class="headerlink" title="SSM框架之Spring篇"></a>SSM框架之Spring篇</h1><h2 id="一、Spirng是什么"><a href="#一、Spirng是什么" class="headerlink" title="一、Spirng是什么"></a>一、Spirng是什么</h2><p><code>Spring</code>是分层的<code>Java SE/EE</code>应用<code>full-stack</code>轻量级开源框架，以<strong>IoC</strong>（<strong>Inverse Of Control：反转控制</strong>）和<strong>AOP</strong>（<strong>Aspect OrientedProgramming：面向切面编程</strong>）为内核</p><p>提供了<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBCTemplate</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐称为使用最多的Java EE企业应用开源框架</p><h2 id="二、Spring的优势"><a href="#二、Spring的优势" class="headerlink" title="二、Spring的优势"></a>二、Spring的优势</h2><h3 id="1、方便解耦，简化开发"><a href="#1、方便解耦，简化开发" class="headerlink" title="1、方便解耦，简化开发"></a>1、方便解耦，简化开发</h3><p>通过<code>Spring</code>提供的<code>IoC容器</code>，可以将对象间的依赖关系交由<code>Spring</code>进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用</p><h3 id="2、AOP编程的支持"><a href="#2、AOP编程的支持" class="headerlink" title="2、AOP编程的支持"></a>2、AOP编程的支持</h3><p>通过<code>Spring</code>的<code>AOP</code>功能，方便进行面向切面编程，许多不容易用传统<code>OOP</code>实现的功能可以通过<code>AOP</code>轻松实现</p><h3 id="3、声明式事务的支持"><a href="#3、声明式事务的支持" class="headerlink" title="3、声明式事务的支持"></a>3、声明式事务的支持</h3><p>可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量</p><h3 id="4、方便程序的测试"><a href="#4、方便程序的测试" class="headerlink" title="4、方便程序的测试"></a>4、方便程序的测试</h3><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事</p><h3 id="5、方便继承各种优势的框架"><a href="#5、方便继承各种优势的框架" class="headerlink" title="5、方便继承各种优势的框架"></a>5、方便继承各种优势的框架</h3><p>对各种优秀框架<code>Struts</code>、<code>Hibemate</code>、<code>Hessian</code>、<code>Quartz</code>等的支持</p><h3 id="6、降低JavaEE-API的使用难度"><a href="#6、降低JavaEE-API的使用难度" class="headerlink" title="6、降低JavaEE API的使用难度"></a>6、降低JavaEE API的使用难度</h3><p><code>Spring</code>对<code>JavaEE API</code>（如<code>JDBC</code>、<code>JavaMail</code>、远程调用等）进行了薄薄的封装层，使这些<code>API</code>的使用难度大为降低</p><h3 id="7、Java源码是最经典学习范例"><a href="#7、Java源码是最经典学习范例" class="headerlink" title="7、Java源码是最经典学习范例"></a>7、Java源码是最经典学习范例</h3><p><code>Spring</code>的源代码设计精妙、结构清晰、处处体现着对Java设计模式灵活运用，它的源代码是Java技术的最佳实践的范例</p><h2 id="三、Spring的体系结构"><a href="#三、Spring的体系结构" class="headerlink" title="三、Spring的体系结构"></a>三、Spring的体系结构</h2><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/5-1Z606104H1294.gif"></p><h3 id="1-Data-Access-Integration（数据访问／集成）"><a href="#1-Data-Access-Integration（数据访问／集成）" class="headerlink" title="1. Data Access/Integration（数据访问／集成）"></a>1. Data Access/Integration（数据访问／集成）</h3><p>数据访问/集成层包括 <code>JDBC</code>、<code>ORM</code>、<code>OXM</code>、<code>JMS</code> 和 <code>Transactions</code> 模块，具体介绍如下</p><ul><li><strong>JDBC 模块：</strong>提供了一个 JDBC 的抽象层，大幅度减少了在开发过程中对数据库操作的编码。</li><li><strong>ORM 模块：</strong>对流行的对象关系映射 API，包括 JPA、JDO、Hibernate 和 iBatis 提供了的集成层</li><li><strong>OXM 模块：</strong>提供了一个支持对象/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream</li><li><strong>JMS 模块：</strong>指 Java 消息服务，包含的功能为生产和消费的信息</li><li><strong>Transactions 事务模块：</strong>支持编程和声明式事务管理实现特殊接口类，并为所有的 POJO</li></ul><h3 id="2-Web-模块"><a href="#2-Web-模块" class="headerlink" title="2. Web 模块"></a>2. Web 模块</h3><p><code>Spring</code> 的 <code>Web</code> 层包括 <code>Web</code>、<code>Servlet</code>、<code>Struts</code> 和 <code>Portlet 组件</code>，具体介绍如下</p><ul><li><strong>Web 模块：</strong>提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IoC 容器初始化以及 Web 应用上下文</li><li><strong>Servlet模块：</strong>包括 Spring 模型—视图—控制器（MVC）实现 Web 应用程序</li><li><strong>Struts 模块：</strong>包含支持类内的 Spring 应用程序，集成了经典的 Struts Web 层</li><li><strong>Portlet 模块：</strong>提供了在 Portlet 环境中使用 MVC 实现，类似 Web-Servlet 模块的功能。</li></ul><h3 id="3-Core-Container（核心容器）"><a href="#3-Core-Container（核心容器）" class="headerlink" title="3. Core Container（核心容器）"></a>3. Core Container（核心容器）</h3><p><code>Spring</code> 的核心容器是其他模块建立的基础，由 <code>Beans</code> 模块、Core 核心模块、Context 上下文模块和 Expression Language 表达式语言模块组成，具体介绍如下</p><ul><li><strong>Beans 模块：</strong>提供了 BeanFactory，是工厂模式的经典实现，Spring 将管理对象称为 Bean。</li><li><strong>Core 核心模块：</strong>提供了 Spring 框架的基本组成部分，包括 IoC 和 DI 功能。</li><li><strong>Context 上下文模块：</strong>建立在核心和 Beans 模块的基础之上，它是访问定义和配置任何对象的媒介。ApplicationContext 接口是上下文模块的焦点</li><li><strong>Expression Language 模块：</strong>是运行时查询和操作对象图的强大的表达式语言</li></ul><h3 id="4-其他模块"><a href="#4-其他模块" class="headerlink" title="4. 其他模块"></a>4. 其他模块</h3><p><code>Spring</code> 的其他模块还有 AOP、Aspects、Instrumentation 以及 Test 模块，具体介绍如下</p><ul><li><strong>AOP 模块：</strong>提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性</li><li><strong>Aspects 模块：</strong>提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架</li><li><strong>Instrumentation 模块：</strong>提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用</li><li><strong>Test 模块：</strong>支持 Spring 组件，使用 JUnit 或 TestNG 框架的测试</li></ul><h2 id="四、Spring开发步骤"><a href="#四、Spring开发步骤" class="headerlink" title="四、Spring开发步骤"></a>四、Spring开发步骤</h2><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312210256245.png"></p><ol><li><p>导入<code>Spring</code>开发的基本包坐标</p><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312220139639.png"></p></li><li><p>编写<code>Dao</code>接口和实现类<img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312220216303.png"></p></li><li><p>创建<code>Spring</code>核心配置文件</p><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312220312190.png"></p></li><li><p>在<code>Spring</code>配置文件中配置<code>UserDaoImpl</code></p><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312220406218.png"></p></li><li><p>使用<code>Spring</code>的<code>API</code>获得<code>Bean</code>实例</p><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220312220434465.png"></p></li></ol><p><strong>开发步骤</strong></p><ol><li>导入坐标</li><li>创建Bean</li><li>创建applicationContext.xml</li><li>在配置文件中进行配置</li><li>创建ApplicationContext对象getBean</li></ol><h2 id="五、Spring配置文件"><a href="#五、Spring配置文件" class="headerlink" title="五、Spring配置文件"></a>五、Spring配置文件</h2><h3 id="1、Bean标签基本配置"><a href="#1、Bean标签基本配置" class="headerlink" title="1、Bean标签基本配置"></a>1、Bean标签基本配置</h3><p>用于配置对象交由<code>Spring</code>来创建</p><p>默认情况下调用的是类中的<strong>无参构造函数</strong>，若类没有无参构造函数，则不能创建成功</p><p><strong>注意：</strong>Idea xml文件添加注释快捷键：<code>Ctrl + shift + /</code></p><h4 id="①-基本属性"><a href="#①-基本属性" class="headerlink" title="① 基本属性"></a>① 基本属性</h4><ul><li><p><code>id</code>：Bean实例在Spring容器中的唯一标识</p></li><li><p><code>class</code>：Bean的全限定名称</p></li><li><p><code>scope</code>：指对象的作用范围</p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>singleton</code></td><td>默认值，单例的，当加载文件，创建容器时，<code>Bean</code>就创建，容器在，对象就一直活着</td></tr><tr><td><code>prototype</code></td><td>多例的，每次执行<code>getBean</code>方法，创建一个<code>Bean</code>，若长期不适用，该对象将被<code>Java</code>的垃圾回收器回收</td></tr><tr><td><code>request</code></td><td>WEB项目中，<code>Spring</code>创建一个<code>Bean</code>对象，将对象存入<code>request</code>域中</td></tr><tr><td><code>session</code></td><td>WEB项目中，<code>Spring</code>创建一个<code>Bean</code>对象，将对象存入<code>session</code>域中</td></tr><tr><td><code>global session</code></td><td>WEB项目中，应用在<code>Portlet</code>环境，如果没有<code>Portlet</code>环境，那么<code>globalSession</code>相当于<code>session</code></td></tr></tbody></table></li><li><p><code>init-method</code>：指定类中的初始化方法名称</p></li><li><p><code>destroy-method</code>：指定类中销毁方法名称</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.dao.Impl.UserDaoImpl"</span> scope<span class="token operator">=</span><span class="token string">"singleton"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"init"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"destroy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②-Bean实例化的三种方式"><a href="#②-Bean实例化的三种方式" class="headerlink" title="② Bean实例化的三种方式"></a>② Bean实例化的三种方式</h4><ul><li><p>无参构造方法实例化</p></li><li><p>工厂静态方法实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 改配置文件到指定类，使用factory-method，里面的方法是静态方法</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.factory.StaticFactory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getUserDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserDao</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂实例方法实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 修改配置文件，先创建一个factory bean，然后再调用factory bean</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"factory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.factory.DynamicFactory"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> factory<span class="token operator">-</span>bean<span class="token operator">=</span><span class="token string">"factory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"getUserDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token class-name">UserDao</span> <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、Bean的依赖注入分析"><a href="#2、Bean的依赖注入分析" class="headerlink" title="2、Bean的依赖注入分析"></a>2、Bean的依赖注入分析</h3><p>依赖注入（<code>Dependency Injection</code>）：是<code>Spring</code>框架核心<code>IoC</code>的具体实现</p><h4 id="①-注入方式"><a href="#①-注入方式" class="headerlink" title="① 注入方式"></a><strong>① 注入方式</strong></h4><ul><li><p>构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.service.impl.UserServiceImpl"</span><span class="token operator">></span>    <span class="token comment">// 两个userDao含义不一样，第一个是构造函数的参数名；第二个是引用容器中的bean id</span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>set方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.dao.Impl.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.service.impl.UserServiceImpl"</span><span class="token operator">></span>    <span class="token comment">// 依赖注入，两个userDao含义不一样，第一个是set函数后面的名，即setXxxx，取xxxx；第二个是引用容器中的bean id</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>     <span class="token comment">// 实现类</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 也有更简单的方法注入，为 P 命名空间</span><span class="token comment">// 先在配置文件引入 P 命名空间</span>xmlns<span class="token operator">:</span>p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>    <span class="token comment">// 而后修改注入方式</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.service.impl.UserServiceImpl"</span> p<span class="token operator">:</span>userDao<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong>Idea 复制上行代码快捷键：<code>Ctrl + D</code></p><h4 id="②-注入的数据类型"><a href="#②-注入的数据类型" class="headerlink" title="② 注入的数据类型"></a>② 注入的数据类型</h4><p>除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入</p><ul><li><p>普通数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用value注入</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.dao.Impl.UserDaoImpl"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"18"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用数据类型</p></li><li><p>集合数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不同集合注入</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.dao.Impl.UserDaoImpl"</span><span class="token operator">></span>    <span class="token comment">// List</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"strList"</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>list<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>aaa<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>bbb<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">></span></span>ccc<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token comment">// Map</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userMap"</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>map<span class="token punctuation">></span></span>            <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"u1"</span> value<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"user1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>            <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"u2"</span> value<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"user2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token comment">// properties</span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"properties"</span><span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>props<span class="token punctuation">></span></span>            <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>ppp1<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>            <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"p2"</span><span class="token operator">></span>ppp2<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>            <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"p3"</span><span class="token operator">></span>ppp3<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>props<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.domain.User"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"tom"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"addr"</span> value<span class="token operator">=</span><span class="token string">"bejing"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.domain.User"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"addr"</span> value<span class="token operator">=</span><span class="token string">"tianjin"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment">// 实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> userMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strList <span class="token operator">=</span> strList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> userMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMap <span class="token operator">=</span> userMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save running...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、引入其他配置文件（份模块开发）"><a href="#3、引入其他配置文件（份模块开发）" class="headerlink" title="3、引入其他配置文件（份模块开发）"></a>3、引入其他配置文件（份模块开发）</h3><p>实际开发中，<code>Spring</code>的配置内容非常多，这就导致<code>Spring</code>配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在<code>Spring</code>主配置文件通过<code>import</code>标签进行加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">import</span> <span class="token namespace">resource</span><span class="token operator">=</span><span class="token string">"applicationContext-xxx.xml"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、重点配置总结"><a href="#4、重点配置总结" class="headerlink" title="4、重点配置总结"></a>4、重点配置总结</h3><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/image-20220313231727008.png"></p><h2 id="六、Spring相关API"><a href="#六、Spring相关API" class="headerlink" title="六、Spring相关API"></a>六、Spring相关API</h2><p><code>applicationContext</code>：接口类型，代表应用上下文，可以通过其实例获得<code>Spring</code>容器中的<code>Bean</code>对象</p><h3 id="1、继承体系图"><a href="#1、继承体系图" class="headerlink" title="1、继承体系图"></a>1、继承体系图</h3><p><img src="/2022/03/11/ssm-kuang-jia-zhi-spring-pian/1156642-20190702211732313-79392647.png"></p><h3 id="2、相关实现类"><a href="#2、相关实现类" class="headerlink" title="2、相关实现类"></a>2、相关实现类</h3><ul><li><code>ClassPathXmlApplicationContext</code>：是从类的根路径下配置加载文件（推荐使用）</li><li><code>FileSystemXmlApplicationContext</code>：是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置</li><li><code>AnnotationConfigApplicationContext</code>：当使用注解配置容器对象时，需要使用此类来创建<code>spring</code>容器，用来读取注解</li></ul><ol><li>```java<br>ApplicationContext app = new ClassPathXmlApplicationContext(“applicationContext.xml”);// getBean的两种使用<br>UserDao userDao1 = (UserDao)app.getBean(“userDao”);<br>UserDao userDao = app.getBean(UserDao.class);<br>/*<pre><code>第一种方式，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转（推荐）第二种方式，当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型Bean有多个时，此方法会报错</code></pre>*/<pre class="line-numbers language-none"><code class="language-none">## 七、Spring配置数据源### 1、数据源（连接池）的作用- 数据源（连接池）是能提高程序性能- 事先实例化数据源，初始化部分连接资源- 使用连接资源时从数据源中获取- 使用完毕后将连接资源归还给数据源常见的数据源（连接池）：&#96;DBCP&#96;、&#96;C3P0&#96;、&#96;BoneCP&#96;、&#96;Druid&#96;等### 2、数据源开发步骤1. 导入数据源的坐标和数据库驱动坐标2. 创建数据源对象3. 设置数据源的基本连接数据4. 使用数据源获取连接资源和归还连接资源下列方法用&#96;Druid&#96;连接池做例子#### ① 常规方法&#96;&#96;&#96;java&#x2F;&#x2F; pom.xml导入坐标&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;        &lt;version&gt;8.0.11&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0.9&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;        &lt;version&gt;4.12&lt;&#x2F;version&gt;        &lt;scope&gt;test&lt;&#x2F;scope&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;    &#x2F;&#x2F; 测试方法@Test&#x2F;&#x2F; druid数据源public void test1() throws Exception &#123;    DruidDataSource dataSource &#x3D; new DruidDataSource();    dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);    dataSource.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;bookdatabase?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT&quot;);    dataSource.setUsername(&quot;root&quot;);    dataSource.setPassword(&quot;123456&quot;);    DruidPooledConnection connection &#x3D; dataSource.getConnection();    System.out.println(connection);    connection.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="②-抽取配置文件方法"><a href="#②-抽取配置文件方法" class="headerlink" title="② 抽取配置文件方法"></a>② 抽取配置文件方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽取jdbc.properties文件，在resources下创建此文件</span>jdbc<span class="token punctuation">.</span>driver<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>jdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>bookdatabase<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>GMTjdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span>    <span class="token comment">// 测试方法（加载配置文件形式）</span><span class="token annotation punctuation">@Test</span><span class="token comment">// druid数据源</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 读取配置文件，getBundle方法中的名字取properties文件的前面名，如jdbc.properties</span>    <span class="token class-name">ResourceBundle</span> rb <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> driver <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbc.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建数据源对象，设置连接参数</span>    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DruidPooledConnection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Spring配置数据源"><a href="#3、Spring配置数据源" class="headerlink" title="3、Spring配置数据源"></a>3、Spring配置数据源</h3><p>可以将<code>DataSource</code>的创建权交由<code>Spring</code>容器去完成</p><h4 id="①-常规方法"><a href="#①-常规方法" class="headerlink" title="① 常规方法"></a>① 常规方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在上面pom.xml文件的基础上导入坐标</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token comment">// resources文件夹中创建spring配置文件</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/bookdatabase?characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;serverTimezone=GMT"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"123456"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment">// 测试方法</span><span class="token annotation punctuation">@Test</span><span class="token comment">// druid数据源，Spring容器产生数据源对象</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-抽取配置文件"><a href="#②-抽取配置文件" class="headerlink" title="② 抽取配置文件"></a>② 抽取配置文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 首先，需要引入context命名空间和约束路径</span><span class="token comment">// 命名空间</span>xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span><span class="token comment">// 约束路径</span><span class="token string">"http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="token comment">// 加载外部properties文件</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:jdbc.properties"</span><span class="token operator">/</span><span class="token operator">></span><span class="token comment">// 获得数据，注入</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.driver&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.url&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.username&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"$&#123;jdbc.password&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token comment">// 测试方法和 ① 相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、Spring注解开发"><a href="#八、Spring注解开发" class="headerlink" title="八、Spring注解开发"></a>八、Spring注解开发</h2><p><code>Spring</code>是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替<code>xml</code>配置文件可以简化配置，提高开发效率</p><h3 id="1、Spring原始注解"><a href="#1、Spring原始注解" class="headerlink" title="1、Spring原始注解"></a>1、Spring原始注解</h3><p><code>Spring</code>原始注解主要是替代<code>&lt;Bean&gt;</code>配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Component</code></td><td>使用在类上用于实例化<code>Bean</code></td></tr><tr><td><code>@Controller</code></td><td>使用在<code>web</code>层类上用于实例化<code>Bean</code></td></tr><tr><td><code>@Service</code></td><td>使用在<code>service</code>层类上用于实例化<code>Bean</code></td></tr><tr><td><code>@Repository</code></td><td>使用在<code>dao</code>层类上用于实例化<code>Bean</code></td></tr><tr><td><code>@Autowired</code></td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td><code>@Qualifier</code></td><td>结合<code>@Autowired</code>一起使用用于根据名称进行依赖注入</td></tr><tr><td><code>@Resource</code></td><td>相当于<code>@Autowired</code> + <code>@Qualifier</code>，按照名称进行注入</td></tr><tr><td><code>@Value</code></td><td>注入普通属性</td></tr><tr><td><code>@Scope</code></td><td>标注<code>Bean</code>的作用范围</td></tr><tr><td><code>@PostConstruct</code></td><td>使用在方法上标注该方法是<code>Bean</code>的初始化方法</td></tr><tr><td><code>@PreDestroy</code></td><td>使用在方法上标注该方法是<code>Bean</code>的销毁方法</td></tr></tbody></table><p><strong>注意：</strong>使用注解进行开发时，需要在<code>applicationContext.xml</code>中配置组件扫描，作用是指定哪个包及其子包下的<code>Bean</code>需要进行扫描以便识别注解配置的类、字段和方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"包名"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// @Component</span><span class="token comment">/*在实现类，添加注释，下列代码，相当于配置文件中的&lt;bean id="userDao" class="com.dao.Impl.UserDaoImpl">&lt;/bean>*/</span><span class="token comment">// @Component("userDao")</span><span class="token comment">// 分层，修改为 @Repository</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token comment">// 作用范围</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// @Autowired 和 @Qualifier</span><span class="token comment">// @Component("userService")</span><span class="token comment">// 分层，修改为 @Service</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注入，相当于配置文件中的&lt;property name="userDao" ref="userDao">&lt;/property></span>    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 按照数据类型从Spring容器中进行匹配</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span>  <span class="token comment">// 按照id值从容器中进行匹配，但要结合@Autowired一起使用</span>    <span class="token comment">// 两个合并为 @Resource</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userDao"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>   <span class="token comment">// 普通类型注入</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token comment">/*    配置文件中加载外部properties文件后，可以在代码中提取    @Value("$&#123;jdbc.driver&#125;")    private String driver;    */</span>    <span class="token comment">/*    使用注解方式，set方法可以不写    public void setUserDao(UserDao userDao) &#123;        this.userDao = userDao;    &#125;    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在配置文件中配置组件扫描</span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token comment">// 测试方法</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Spring新注解"><a href="#2、Spring新注解" class="headerlink" title="2、Spring新注解"></a>2、Spring新注解</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Configuration</code></td><td>用于指定当前类是一个 <code>Spring</code> 配置类，当创建容器时会从该类上加载注解</td></tr><tr><td><code>@ComponentScan</code></td><td>用于指定 <code>Spring</code> 在初始化容器时要扫描的包。作用和在 <code>Spring</code> 的 <code>xml</code> 配置文件中的<code>&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</code>一样</td></tr><tr><td><code>@Bean</code></td><td>使用在方法上，标注将该方法的返回值存储到 <code>Spring</code> 容器中</td></tr><tr><td><code>@PropertySource</code></td><td>用于加载<code>.properties</code> 文件中的配置</td></tr><tr><td><code>@Import</code></td><td>用于导入其他配置类</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// datasource分配置类</span><span class="token comment">// &lt;context:property-placeholder location="classpath:jdbc.properties"/></span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbc.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注入</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;jdbc.driver&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;jdbc.url&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;jdbc.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;jdbc.password&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// Spring会将当前方法的返回值以指定名称存储到Spring容器中</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// spring主配置类</span><span class="token comment">// 标志该类是Spring的核心配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">// &lt;context:component-scan base-package="com">&lt;/context:component-scan></span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token comment">// 将分配置引入 &lt;import resource=""/></span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">DataSourceConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 更改为注解配置容器</span>    <span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、Spring整合Junit"><a href="#九、Spring整合Junit" class="headerlink" title="九、Spring整合Junit"></a>九、Spring整合Junit</h2><p>在测试类中，每行测试方法都有以下两行代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserService</span> userService <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常，所以又不能轻易删掉</p><h3 id="1、解决方案"><a href="#1、解决方案" class="headerlink" title="1、解决方案"></a>1、解决方案</h3><ul><li>让<code>SpringJunit</code>负责创建<code>Spring</code>容器，但需要将配置文件的名称告诉它</li><li>将需要进行测试<code>Bean</code>直接在测试类中进行注入</li></ul><h3 id="2、集成步骤"><a href="#2、集成步骤" class="headerlink" title="2、集成步骤"></a>2、集成步骤</h3><ol><li><p>导入Spring集成Junit坐标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">4.12</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">></span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.3</span><span class="token number">.16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">4.3</span><span class="token number">.6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>@Runwith</code>注解替换原来的运行期</p></li><li><p>使用<code>@ContextConfiguration</code>指定配置文件或配置类</p></li><li><p>使用<code>@Autowired</code>注入需要测试的对象</p></li><li><p>创建测试方法进行测试</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//@ContextConfiguration("classpath:applicationContext.xml")</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSM框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之反射篇 + 模块篇</title>
      <link href="/2022/03/10/java-zhi-fan-she-pian/"/>
      <url>/2022/03/10/java-zhi-fan-she-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之反射篇-模块篇"><a href="#Java之反射篇-模块篇" class="headerlink" title="Java之反射篇 + 模块篇"></a>Java之反射篇 + 模块篇</h1><h2 id="一、类加载器"><a href="#一、类加载器" class="headerlink" title="一、类加载器"></a>一、类加载器</h2><h3 id="1、类加载"><a href="#1、类加载" class="headerlink" title="1、类加载"></a>1、类加载</h3><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，<code>JVM</code>将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</p><h4 id="①-类的加载"><a href="#①-类的加载" class="headerlink" title="① 类的加载"></a><strong>① 类的加载</strong></h4><ul><li>就是值将class文件读入内存，并为之创建一个<code>java.lang.Class</code>对象</li><li>任何类被使用时，系统都会为之建立一个<code>java.lang.Class</code>对象</li></ul><h4 id="②-类的连接"><a href="#②-类的连接" class="headerlink" title="② 类的连接"></a><strong>② 类的连接</strong></h4><ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul><h4 id="③-类的初始化"><a href="#③-类的初始化" class="headerlink" title="③ 类的初始化"></a><strong>③ 类的初始化</strong></h4><ul><li>主要是对类变量进行初始化</li></ul><h4 id="④-类的初始化步骤"><a href="#④-类的初始化步骤" class="headerlink" title="④ 类的初始化步骤"></a><strong>④ 类的初始化步骤</strong></h4><ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父亲</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li><li><strong>注：</strong>在执行第二步骤时，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li></ul><h4 id="⑤-类的初始化时机"><a href="#⑤-类的初始化时机" class="headerlink" title="⑤ 类的初始化时机"></a>⑤ 类的初始化时机</h4><ul><li>创建类的实例</li><li>调用类的方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的<code>java.lang.Class</code>对象</li><li>初始化某个类的子类</li><li>直接使用<code>java.exe</code>命令来运行某个主类</li></ul><h3 id="2、类加载器"><a href="#2、类加载器" class="headerlink" title="2、类加载器"></a>2、类加载器</h3><h4 id="①-类加载器的作用"><a href="#①-类加载器的作用" class="headerlink" title="① 类加载器的作用"></a>① 类加载器的作用</h4><ul><li>负责将<code>.class</code>文件加载到内存中，并为之生成对应的<code>java.lang.Class</code>对象</li></ul><h4 id="②-JVM的类加载机制"><a href="#②-JVM的类加载机制" class="headerlink" title="② JVM的类加载机制"></a>② JVM的类加载机制</h4><ul><li>全盘负责：就是当一个类加载器负责加载某个<code>Class</code>时，该<code>Class</code>所依赖的和引用的其他<code>Class</code>也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托：就是当一个类加载器负责加载某个<code>Class</code>时，先让父类加载器试图加载该<code>Class</code>，只有在父类加载器无法加载该类时才尝试从自己的类路径加载该类</li><li>缓存机制：保证所有加载过的<code>Class</code>都会被缓存，当程序需要使用某个<code>Class</code>对象时，类加载器先从缓存区搜索该<code>Class</code>，只有当缓存区中不存在该<code>Class</code>对象时，系统才会读取该类对应的二进制数据，并将其转换成<code>Class</code>对象，存储到缓存区</li></ul><h4 id="③-ClassLoader"><a href="#③-ClassLoader" class="headerlink" title="③ ClassLoader"></a>③ ClassLoader</h4><p><code>ClassLoader</code>：是负责加载类的对象</p><p><code>Java</code>运行时具有以下内置类加载器</p><ul><li><code>Bootstrap class loader</code>：是虚拟机的内置类加载器，通常表示为<code>null</code> ，并且没有父级</li><li><code>Platform class loader</code>：平台类加载器可以看到所有平台类 ，它们可以用作<code>ClassLoader</code>实例的父<code>ClassLoader</code> 。 平台类包括<code>Java SE</code>平台<code>API</code>，它们的实现类以及由平台类加载器或其祖先定义的特定于<code>JDK</code>的运行时类</li><li><code>System class loader</code>： 也称为应用程序类加载器 ，与平台类加载器不同。 系统类加载器通常用于在应用程序类路径，模块路径和<code>JDK</code>特定工具上定义类。 </li><li><strong>继承关系：</strong><code>System</code> 的父加载器是<code>Platform</code>，<code>Platform</code>的父加载器是<code>Bootstrap</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 得系统类加载器</span><span class="token class-name">ClassLoader</span> c <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得父类加载器</span><span class="token class-name">ClassLoader</span> c2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><p><strong><code>Java</code>反射机制</strong>：是指在运行时区获取一个类的变量和方法信息，然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</p><h3 id="1、获取Class类对象"><a href="#1、获取Class类对象" class="headerlink" title="1、获取Class类对象"></a>1、获取Class类对象</h3><p>想反射去使用一个类，首先要获取类型为Class类型的对象</p><p><strong>有三种方式</strong></p><ol><li><p>使用类的class属性来获取该类对应的Class对象</p><pre class="line-numbers language-none"><code class="language-none">Student.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用对象的<code>getClass()</code>方法，返回对象所属类对用的Class对象，该方法是<code>Object</code>类中的方法，所有<code>Java</code>对象都可以调用这个方法</p></li><li><p>使用Class类中的静态方法<code>forName(String className)</code>，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 成员变量，一个私有，一个默认，一个公共</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token comment">// 构造方法，一个私有，一个默认，两个公共</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 成员方法，一个私有，四个公共</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式一</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> c1 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 方式二</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">></span></span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式三</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.text.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、反射获取构造方法"><a href="#2、反射获取构造方法" class="headerlink" title="2、反射获取构造方法"></a>2、反射获取构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取Class对象</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.text.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// getConstructors()，返回一个包含公有构造方法的数组</span><span class="token comment">// Constructor&lt;?>[] cons = c.getConstructors();</span><span class="token comment">// 获得所有的构造方法的数组</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> con <span class="token operator">:</span> cons<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 反射调用</span><span class="token comment">// 获取单个公共无参构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Constructor提供了一个类的单个构造函数的信息和访问权限</span><span class="token comment">// newInstance()，根据指定的构造的方法创建对象</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> con1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取单个指定构造方法，基本数据类型也可通过.class得到对应的Class类型</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Constructor提供了一个类的单个构造函数的信息和访问权限，newInstance()</span><span class="token class-name">Object</span> o2 <span class="token operator">=</span> con2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取私有构造方法</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 暴力反射</span><span class="token comment">// setAccessible(boolean flag)，值为true，取消访问检查</span>con3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o3 <span class="token operator">=</span> con3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、反射获取成员变量"><a href="#3、反射获取成员变量" class="headerlink" title="3、反射获取成员变量"></a>3、反射获取成员变量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// getFields()，返回所有公共的字段数组</span><span class="token comment">// getDeclaredFields()，返回所有字段数组</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// getField(String name)，根据指定公共字段返回对象</span><span class="token comment">// getDeclaredField(String name)，根据字段返回对象</span><span class="token class-name">Field</span> f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反射调用</span><span class="token comment">// 获取无参构造方法创建对象</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> con1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Field提供有关类和接口的单字段的信息和动态访问</span><span class="token comment">// set(Object obj, Object value)，将指定的对象参数中由此Field对象表示的字段设置为指定的新值</span><span class="token comment">// 私有的成员变量要暴力使用</span>f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> <span class="token string">"赵五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、反射获取成员方法"><a href="#4、反射获取成员方法" class="headerlink" title="4、反射获取成员方法"></a>4、反射获取成员方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// getMethods()，返回类或接口的所有公共方法，包括由类或接口声明的对象以及从超类和超级接口继承的类</span><span class="token comment">// getDeclaredMethods()，返回类的所有成员方法</span><span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// getMethod(String name, Class&lt;?>....)，返回单个公共方法</span><span class="token comment">// getDeclaredMethod(String name, Class&lt;?>....)，返回单个方法</span><span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"method1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"method2"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"method3"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> function <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反射调用</span><span class="token comment">// 获取无参构造方法创建对象</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> con1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Method在类或接口上提供有关单一方法的信息和访问权限</span><span class="token comment">/*    Object invoke(Object obj, Object.... args)，在具有指定参数的指定对象上调用此方法对象表示的基础方法        Object：返回值类型        obj：调用方法的对象        args：方法需要的参数 */</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o <span class="token operator">=</span> m3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span><span class="token string">"赵四"</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 私有成员暴力调用</span>function<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、反射越过泛型检查"><a href="#5、反射越过泛型检查" class="headerlink" title="5、反射越过泛型检查"></a>5、反射越过泛型检查</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建集合</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过反射可以实现在Integer集合添加字符串数据</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、通过配置文件指定内容"><a href="#6、通过配置文件指定内容" class="headerlink" title="6、通过配置文件指定内容"></a>6、通过配置文件指定内容</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*class.txt内容为：className=xxxmethodName=xxx*/</span><span class="token comment">// 加载数据</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"class.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> className <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> methodName <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过反射使用</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> con1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、模块"><a href="#三、模块" class="headerlink" title="三、模块"></a>三、模块</h2><h3 id="1、模块的基本使用步骤"><a href="#1、模块的基本使用步骤" class="headerlink" title="1、模块的基本使用步骤"></a>1、模块的基本使用步骤</h3><ul><li>创建模块</li><li>在模块的<code>src</code>目录下新建名为<code>module-info.java</code>的描述性文件，该文件专门定义模块名，访问权限，模块依赖等信息</li><li>模块中所有未导出的包都是模块私有的，不能在模块之外被访问</li><li>一个模块要访问其他模块，必须明确指定依赖哪些模块，未明确指定依赖的模块不能访问</li><li><strong>描述性文件中使用模块导出和模块依赖来进行配置并使用</strong><ul><li>模块导出格式：<code>exports 包名;</code></li><li>模块依赖格式：<code>requires 模块名;</code></li><li><strong>注意：</strong>写模块名报错，需要按下 <code>Alt + Enter</code>提示，然后选择模块依赖</li></ul></li></ul><h3 id="2、模块服务的使用步骤"><a href="#2、模块服务的使用步骤" class="headerlink" title="2、模块服务的使用步骤"></a>2、模块服务的使用步骤</h3><p><img src="/2022/03/10/java-zhi-fan-she-pian/image-20220311004100042.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加载服务</span><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyService</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历服务</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">MyService</span> my <span class="token operator">:</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    my<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之Java8新特性补充篇</title>
      <link href="/2022/03/10/java-zhi-java8-xin-te-xing-bu-chong-pian/"/>
      <url>/2022/03/10/java-zhi-java8-xin-te-xing-bu-chong-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之Java8新特性补充篇"><a href="#Java之Java8新特性补充篇" class="headerlink" title="Java之Java8新特性补充篇"></a>Java之Java8新特性补充篇</h1><h2 id="一、方法引用"><a href="#一、方法引用" class="headerlink" title="一、方法引用"></a>一、方法引用</h2><ul><li>方法引用通过方法的名字来指向一个方法</li><li>方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li><li>方法引用使用方法引用符：一对冒号 <code>:: </code></li></ul><p>在 <code>Car</code> 类中定义了 4 个方法作为例子来区分 <code>Java</code> 中 4 种不同方法的引用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>main</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Supplier是jdk1.8的接口，这里和lamda一起使用了</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Car</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">collide</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Collided "</span> <span class="token operator">+</span> car<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">follow</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Car</span> another<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Following the "</span> <span class="token operator">+</span> another<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Repaired "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造器引用：</strong>它的语法是<code>Class::new</code>，或者更一般的<code>Class&lt; T &gt;::new</code>，实例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Car</span><span class="token operator">::</span><span class="token keyword">new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">Car</span> <span class="token punctuation">></span></span> cars <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> car <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>静态方法引用：</strong>它的语法是<code>Class::static_method</code>，实例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cars<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">collide</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特定类的任意对象的方法引用</strong>：它的语法是<code>Class::method</code>,实例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cars<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">repair</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>特定对象的方法引用：</strong>它的语法是<code>instance::method</code>实例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Car</span> police <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Car</span><span class="token operator">::</span><span class="token keyword">new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> cars<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> police<span class="token operator">::</span><span class="token function">follow</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、函数式接口"><a href="#二、函数式接口" class="headerlink" title="二、函数式接口"></a>二、函数式接口</h2><p><strong>函数式接口</strong>：有且仅有一个抽象方法的接口，但是可以有多个非抽象方法的接口</p><p><code>Java</code>中的函数式编程体现的就是<code>Lambda</code>表达式，所以函数式接口就是可以使用于<code>Lambda</code>使用的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 函数式接口</span><span class="token comment">// 提供注解（可选），如果是函数式接口，编译通过；如果不是，编译失败</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyInterface</span> my <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作为方法的参数</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 主方法中调用</span><span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程启动了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>作为方法的返回值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>重点学习以下四个函数式接口</strong></p><h3 id="1、Supplier"><a href="#1、Supplier" class="headerlink" title="1、Supplier"></a>1、Supplier</h3><p><code>Supplier&lt;T&gt;</code>：包含一个无参的方法</p><ul><li><code>T get()</code>：获得结果</li><li>该方法按照某种实现逻辑（由<code>Lambda表达式</code>实现）返回一个数据</li><li><code>Supplier&lt;T&gt;</code>接口也称为生产型接口，如果指定接口泛型是什么类型，get方法就会生产什么类型的数据提供使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 提供一个字符串</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token punctuation">&#125;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回最大值</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sup<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Consumer"><a href="#2、Consumer" class="headerlink" title="2、Consumer"></a>2、Consumer</h3><p><code>Consumer&lt;T&gt;</code>：包含两个的方法</p><ul><li><code>void accept(T t)</code>：对给定的参数执行此操作</li><li><code>default Consumer&lt;T&gt; andThen(Consumer after)</code>：返回一个组合的<code>Consumer</code>，依次执行此操作，然后执行<code>after</code>操作</li><li><code>Consumer&lt;T&gt;</code>接口也被称为消费型接口，消费的数据的数据类型由泛型指定</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费一个字符串数据</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以使用方法引用</span><span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串反转</span><span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// andThen方法，以不同的方式消费同一个字符串</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con1<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// con1.accept(name);</span>    <span class="token comment">// con2.accept(name);</span>    con1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>con2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Predicate"><a href="#3、Predicate" class="headerlink" title="3、Predicate"></a>3、Predicate</h3><p><code>Predicate&lt;T&gt;</code>：常用的四个方法</p><ul><li><code>boolean test(T t)</code>：对给定的参数进行判断（判断逻辑由Lambda表达式实现），返回一个布尔值</li><li><code>default Predicate&lt;T&gt; negate()</code>：返回一个逻辑的否定，对应逻辑非</li><li><code>default Predicate&lt;T&gt; and(Predicate other)</code>：返回一个组合判断，对应短路与</li><li><code>default Predicate&lt;T&gt; or(Predicate other)</code>：返回一个组合判断，对应短路或</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断给定的字符串是否满足要求</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pre<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// return pre.negate().test(s);    逻辑非判断，满足test条件就返回false</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">checkString</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同一个字符串给出两个不同的判断条件，然后把判断结果做逻辑与运算得出的结果，作为最终结果</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pre1<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pre2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pre1<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>pre2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 或运算</span>    <span class="token comment">// return pre1.or(pre2).test(s);</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Function"><a href="#4、Function" class="headerlink" title="4、Function"></a>4、Function</h3><p><code>Function&lt;T, R&gt;</code>：常用的两个方法</p><ul><li><code>R apply(T)</code>：将此函数应用于给定的参数</li><li><code>default &lt;V&gt; Function andThen(Function after)</code>：返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果</li><li><code>Function&lt;T, R&gt;</code>接口通常用于对参数进行处理，转换（处理逻辑由Lambda表达式实现），然后返回一个新的值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 把字符串转为int类型</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">convert1</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> fun<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">convert1</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法引用</span><span class="token function">convert1</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把int数据加上整数后，转为字符串</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">convert2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> fun<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">convert2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> i <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串转为int类型后，再加上整数，再转为字符串</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">convert3</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> fun1<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> fun2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Integer i = fun1.apply(s);</span>    <span class="token comment">// String ss = fun2.apply(i);</span>    <span class="token class-name">String</span> ss <span class="token operator">=</span> fun1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>fun2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">convert3</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Stream流"><a href="#三、Stream流" class="headerlink" title="三、Stream流"></a>三、Stream流</h2><p><code>Stream</code>（流）是一个来自数据源的元素队列并支持聚合操作</p><ul><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算</li><li><strong>数据源</strong> 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等</li><li><strong>聚合操作</strong> 类似<code>SQL</code>语句一样的操作， 比如<code>filter</code>, <code>map</code>, <code>reduce</code>, <code>find</code>, <code>match</code>, <code>sorted</code>等。</li></ul><p>和以前的<code>Collection</code>操作不同， <code>Stream</code>操作还有两个基础的特征：</p><ul><li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（<code>fluent style</code>）。 这样做可以对操作进行优化， 比如延迟执行(<code>laziness</code>)和短路( <code>short-circuiting</code>)。</li><li><strong>内部迭代</strong>： 以前对集合遍历都是通过<code>Iterator</code>或者<code>For-Each</code>的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 <code>Stream</code>提供了内部迭代的方式， 通过访问者模式(<code>Visitor</code>)实现</li></ul><h3 id="1、流的使用及生成方式"><a href="#1、流的使用及生成方式" class="headerlink" title="1、流的使用及生成方式"></a>1、流的使用及生成方式</h3><h4 id="①-流的使用"><a href="#①-流的使用" class="headerlink" title="① 流的使用"></a>① 流的使用</h4><ul><li>生成流<ul><li>通过数据源生成流</li><li><code>list.stream()</code></li></ul></li><li>中间操作<ul><li>一个流后面可以跟随零个或多个中间操作，其目的主要是打开流，做出某种程度的数据过滤/映射，然后返回一个新的流，交给下一个操作使用</li><li><code>filter()</code></li></ul></li><li>终结操作<ul><li>一个流只能有一个终结操作，当这个操作执行后，流就被用“光”了，无法再被操作，是流的最后一个操作</li><li><code>forEach()</code></li></ul></li></ul><h4 id="②-生成方式"><a href="#②-生成方式" class="headerlink" title="② 生成方式"></a>② 生成方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Collection体系的集合使用默认方法stream()生成流 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> setStream <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Map体系的集合间接的生成流</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keyStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> valueStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entryStream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组可以通过Stream接口的静态方法of(T...values)生成流</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、生成流"><a href="#2、生成流" class="headerlink" title="2、生成流"></a>2、生成流</h3><p>在 <code>Java 8</code> 中, 集合接口有两个方法来生成流：</p><ul><li><strong>stream()</strong> − 为集合创建串行流</li><li><strong>parallelStream()</strong> − 为集合创建并行流</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、forEach"><a href="#3、forEach" class="headerlink" title="3、forEach"></a>3、forEach</h3><p><code>Stream</code> 提供了新的方法 <code>forEach</code>来迭代流中的每个数据。以下代码片段使用 <code>forEach</code> 输出了10个随机数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、map-amp-mapToInt"><a href="#4、map-amp-mapToInt" class="headerlink" title="4、map &amp; mapToInt"></a>4、map &amp; mapToInt</h3><p><code>map</code> 方法，返回由给定函数应用于此流的方法的元素的结果组成的流</p><p><code>mapToInt</code>方法，返回一个<code>IntStream</code>其中包含将给定函数应用于此流的元素的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取对应的平方数</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> squaresList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> i <span class="token operator">-></span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sum方法在IntStream里面，不在Stream里</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、filter"><a href="#5、filter" class="headerlink" title="5、filter"></a>5、filter</h3><p><code>filter</code> 方法用于通过设置的条件过滤出元素。以下代码片段使用 <code>filter</code> 方法过滤出空字符串：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取空字符串的数量 </span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、limit-amp-skip"><a href="#6、limit-amp-skip" class="headerlink" title="6、limit &amp; skip"></a>6、limit &amp; skip</h3><p><code>limit</code> 方法用于获取指定数量的流。 以下代码片段使用 <code>limit</code> 方法打印出 10 条数据：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 跳过前三个</span>random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、sorted"><a href="#7、sorted" class="headerlink" title="7、sorted"></a>7、sorted</h3><p><code>sorted</code> 方法用于对流进行排序。以下代码片段使用 <code>sorted</code> 方法对输出的 10 个随机数进行排序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ints(),返回产生给定streamSize数量的伪随机int值的流</span><span class="token comment">// sorted无参，按自然顺序</span>random<span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 带参</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、并行（parallel）程序"><a href="#8、并行（parallel）程序" class="headerlink" title="8、并行（parallel）程序"></a>8、并行（parallel）程序</h3><p><code>parallelStream</code> 是流并行处理程序的代替方法。以下实例我们使用 <code>parallelStream</code> 来输出空字符串的数量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取空字符串的数量，count()也是终结操作的一种</span><span class="token keyword">long</span> count <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-></span> string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以很容易的在顺序运行和并行直接切换</p><h3 id="9、Collectors"><a href="#9、Collectors" class="headerlink" title="9、Collectors"></a>9、Collectors</h3><p><code>Collectors</code> 类实现了很多归约操作，例如将流转换成集合和聚合元素。<code>Collectors</code> 可用于返回列表或字符串：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"efg"</span><span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filtered <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"筛选列表: "</span> <span class="token operator">+</span> filtered<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> mergedString <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>string <span class="token operator">-></span> <span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并字符串: "</span> <span class="token operator">+</span> mergedString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、统计"><a href="#10、统计" class="headerlink" title="10、统计"></a>10、统计</h3><p>一些产生统计结果的收集器也非常有用。它们主要用于<code>int</code>、<code>double</code>、<code>long</code> 等基本类型上，它们可以用来产生类似如下的统计结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">IntSummaryStatistics</span> stats <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最大的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表中最小的数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有数之和 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数 : "</span> <span class="token operator">+</span> stats<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、concat-amp-distinct"><a href="#11、concat-amp-distinct" class="headerlink" title="11、concat &amp; distinct"></a>11、concat &amp; distinct</h3><p><code>concat</code>，是Stream中的静态方法，作用是合并两个流</p><p><code>distinct</code>，返回由该流不同元素（根据<code>Object.equals(Object)</code>）组成的流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合流输出</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去除重复元素</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之二叉树篇四</title>
      <link href="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/"/>
      <url>/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/</url>
      
        <content type="html"><![CDATA[<h2 id="leetcode刷题之二叉树篇四"><a href="#leetcode刷题之二叉树篇四" class="headerlink" title="leetcode刷题之二叉树篇四"></a>leetcode刷题之二叉树篇四</h2><h2 id="一、后序遍历的妙用"><a href="#一、后序遍历的妙用" class="headerlink" title="一、后序遍历的妙用"></a>一、后序遍历的妙用</h2><p><strong>如果当前节点要做的事情需要通过左右子树的计算结果推导出来，就要用到后序遍历</strong>。</p><p><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/image-20220310124721650.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 全局变量，记录 BST 最大节点之和</span>    <span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSumBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 递归计算左右子树</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        res[0] 记录以 root 为根的二叉树是否是 BST，若为 1 则说明是 BST，若为 0 则说明不是 BST；        res[1] 记录以 root 为根的二叉树所有节点中的最小值；        res[2] 记录以 root 为根的二叉树所有节点中的最大值；        res[3] 记录以 root 为根的二叉树所有节点值之和        */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">></span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 以 root 为根的二叉树是 BST</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 计算以 root 为根的这棵 BST 的最小值</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 计算以 root 为根的这棵 BST 的最大值</span>            res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 计算以 root 为根的这棵 BST 所有节点之和</span>            res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token comment">// 更新全局变量</span>            maxSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、二叉树的序列化和反序列化"><a href="#二、二叉树的序列化和反序列化" class="headerlink" title="二、二叉树的序列化和反序列化"></a>二、二叉树的序列化和反序列化</h2><p><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/image-20220310131106924.png"></p><h3 id="1、前序遍历解决"><a href="#1、前序遍历解决" class="headerlink" title="1、前序遍历解决"></a>1、前序遍历解决</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 前序遍历解决</span>    <span class="token comment">// 分隔符</span>    <span class="token class-name">String</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token comment">// 空指针的字符</span>    <span class="token class-name">String</span> NULL <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token comment">// Encodes a tree to a single string.</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 拼接字符串</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 结点为null，字符串拼接“#”</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Decodes your encoded data to tree.</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 字符串转为列表</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 结尾添加</span>            nodes<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 走到列表尽头，返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 获得列表头数据，并移出该数据</span>        <span class="token class-name">String</span> first <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 若为“#”，返回null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 新建结点</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、后序遍历解决"><a href="#2、后序遍历解决" class="headerlink" title="2、后序遍历解决"></a>2、后序遍历解决</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 后序遍历解决</span>    <span class="token comment">// 分隔符</span>    <span class="token class-name">String</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token comment">// 空指针的字符</span>    <span class="token class-name">String</span> NULL <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token comment">// Encodes a tree to a single string.</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 拼接字符串</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 结点为null，字符串拼接“#”</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Decodes your encoded data to tree.</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 字符串转为列表</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 结尾添加</span>            nodes<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 走到列表尽头，返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 由后往前取出元素</span>        <span class="token class-name">String</span> first <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 若为“#”，返回null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 新建结点</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为由后往前取元素，所以先构建右子树，再构建左子树</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、层次遍历"><a href="#3、层次遍历" class="headerlink" title="3、层次遍历"></a>3、层次遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> SEP <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> NULL <span class="token operator">=</span> <span class="token string">"#"</span><span class="token punctuation">;</span>        <span class="token comment">// Encodes a tree to a single string.</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化queue</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        add() 和 offer()都是用来向队列添加一个元素        在容量已满的情况下，add() 方法会抛出IllegalStateException异常，offer() 方法只会返回 false         */</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/*            remove() 和 poll()都是用来从队列头部删除一个元素            在队列元素为空的情况下，remove() 方法会抛出NoSuchElementException异常，poll() 方法只会返回 null            */</span>            <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Decodes your encoded data to tree.</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>SEP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 队列存的都是父节点</span>            <span class="token class-name">TreeNode</span> parent <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> left <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span> right <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>right<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>NULL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、二叉树高度计算"><a href="#三、二叉树高度计算" class="headerlink" title="三、二叉树高度计算"></a>三、二叉树高度计算</h2><p>首先明确一下两个关于二叉树的名词「完全二叉树」和「满二叉树」。</p><p><strong>完全二叉树</strong>如下图，每一层都是紧凑靠左排列的：</p><p><a href="https://labuladong.gitee.io/algo/images/complete_tree/complete.png"><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/complete.png" alt="img"></a></p><p><strong>满二叉树</strong>如下图，是一种特殊的完全二叉树，每层都是是满的，像一个稳定的三角形：</p><p><a href="https://labuladong.gitee.io/algo/images/complete_tree/perfect.png"><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/perfect.png" alt="img"></a></p><p>说句题外话，关于这两个定义，中文语境和英文语境似乎有点区别，我们说的完全二叉树对应英文 <code>Complete Binary Tree</code>，没有问题。但是我们说的满二叉树对应英文 <code>Perfect Binary Tree</code>，而英文中的 <code>Full Binary Tree</code> 是指一棵二叉树的所有节点要么没有孩子节点，要么有两个孩子节点。如下：</p><p><a href="https://labuladong.gitee.io/algo/images/complete_tree/trees.png"><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/trees.png" alt="img"></a></p><p>以上定义出自 <code>wikipedia</code>，这里就是顺便一提，其实名词叫什么都无所谓，重要的是算法操作。<strong>按中文的语境，记住「满二叉树」和「完全二叉树」的区别</strong>。</p><h3 id="1、思路分析"><a href="#1、思路分析" class="headerlink" title="1、思路分析"></a>1、思路分析</h3><p>如何求一棵完全二叉树的节点个数呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入一棵完全二叉树，返回节点总数</span><span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是一个<strong>普通</strong>二叉树，显然只要向下面这样遍历一边即可，时间复杂度 <code>O(N)</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那如果是一棵<strong>满</strong>二叉树，节点总数就和树的高度呈指数关系：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 计算树的高度</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        h<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 节点总数就是 2^h - 1</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完全</strong>二叉树比普通二叉树特殊，但又没有满二叉树那么特殊，计算它的节点总数，可以说是普通二叉树和完全二叉树的结合版，先看代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> l <span class="token operator">=</span> root<span class="token punctuation">,</span> r <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 记录左、右子树的高度</span>    <span class="token keyword">int</span> hl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l <span class="token operator">=</span> l<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        hl<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        r <span class="token operator">=</span> r<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        hr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果左右子树的高度相同，则是一棵满二叉树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hl <span class="token operator">==</span> hr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hl<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果左右高度不同，则按照普通二叉树的逻辑计算</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合刚才针对满二叉树和普通二叉树的算法，上面这段代码应该不难理解，就是一个结合版，但是<strong>其中降低时间复杂度的技巧是非常微妙的</strong>。</p><h3 id="2、复杂度分析"><a href="#2、复杂度分析" class="headerlink" title="2、复杂度分析"></a>2、复杂度分析</h3><p>开头说了，这个算法的时间复杂度是 <code>O(logN*logN)</code>，这是怎么算出来的呢？</p><p>直觉感觉好像最坏情况下是 <code>O(N*logN)</code> 吧，因为之前的 <code>while</code> 需要 <code>logN</code> 的时间，最后要 <code>O(N)</code> 的时间向左右子树递归：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>关键点在于，这两个递归只有一个会真的递归下去，另一个一定会触发 <code>hl == hr</code> 而立即返回，不会递归下去</strong>。</p><p>为什么呢？原因如下：</p><p><strong>一棵完全二叉树的两棵子树，至少有一棵是满二叉树</strong>：</p><p><a href="https://labuladong.gitee.io/algo/images/complete_tree/1.jpg"><img src="/2022/03/10/leetcode-shua-ti-zhi-er-cha-shu-pian-si/1.jpg" alt="img"></a></p><p>看图就明显了吧，由于完全二叉树的性质，其子树一定有一棵是满的，所以一定会触发 <code>hl == hr</code>，只消耗 <code>O(logN)</code> 的复杂度而不会继续递归。</p><p>综上，算法的递归深度就是树的高度 <code>O(logN)</code>，每次递归所花费的时间就是 while 循环，需要 <code>O(logN)</code>，所以总体的时间复杂度是 <code>O(logN*logN)</code>。</p><p>所以说，「完全二叉树」这个概念还是有它存在的原因的，不仅适用于数组实现二叉堆，而且连计算节点总数这种看起来简单的操作都有高效的算法实现。</p><h2 id="四、递归改迭代"><a href="#四、递归改迭代" class="headerlink" title="四、递归改迭代"></a>四、递归改迭代</h2><p>递归代码转迭代代码体现前中后序遍历，关键点在哪里？</p><p><strong>当从栈中拿出一个节点 <code>p</code>，应该想办法搞清楚这个节点 <code>p</code> 左右子树的遍历情况</strong></p><ul><li>如果 <code>p</code> 的左右子树都没有被遍历，那么现在对 <code>p</code> 进行操作就属于前序遍历代码</li><li>如果 <code>p</code> 的左子树被遍历过了，而右子树没有被遍历过，那么现在对 <code>p</code> 进行操作就属于中序遍历代码</li><li>如果 <code>p</code> 的左右子树都被遍历过了，那么现在对 <code>p</code> 进行操作就属于后序遍历代码</li></ul><p><strong>上述逻辑写成伪码如下：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        peek() 返回栈顶元素，但不在堆栈中删除它pop() 返回栈顶元素，并在进程中删除它总结一下：当只需要取出栈顶的元素进行处理（或者说我们需要先对栈顶的数据进行处理例如比较）然后根据处理的结果进行决定是否要pop()这种情况下，可以先使用peek()方法，取出栈顶的值        */</span>        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p 的左子树被遍历完了<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*******************/</span>            <span class="token comment">/** 中序遍历代码位置 **/</span>            <span class="token comment">/*******************/</span>            <span class="token comment">// 去遍历 p 的右子树</span>            <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p 的右子树被遍历完了<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*******************/</span>            <span class="token comment">/** 后序遍历代码位置 **/</span>            <span class="token comment">/*******************/</span>            <span class="token comment">// 以 p 为根的树遍历完了，出栈</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*******************/</span>        <span class="token comment">/** 前序遍历代码位置 **/</span>        <span class="token comment">/*******************/</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迭代遍历二叉树的完整代码框架</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模拟函数调用栈</span><span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 左侧树枝一撸到底</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*******************/</span>        <span class="token comment">/** 前序遍历代码位置 **/</span>        <span class="token comment">/*******************/</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 指向上一次遍历完的子树根节点</span>    <span class="token class-name">TreeNode</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始遍历整棵树</span>    <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// p 的左子树被遍历完了，且右子树没有被遍历过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>left <span class="token operator">==</span> visited<span class="token punctuation">)</span>           <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>right <span class="token operator">!=</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*******************/</span>            <span class="token comment">/** 中序遍历代码位置 **/</span>            <span class="token comment">/*******************/</span>            <span class="token comment">// 去遍历 p 的右子树</span>            <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// p 的右子树被遍历完了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>right <span class="token operator">==</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*******************/</span>            <span class="token comment">/** 后序遍历代码位置 **/</span>            <span class="token comment">/*******************/</span>            <span class="token comment">// 以 p 为根的子树被遍历完了，出栈</span>            <span class="token comment">// visited 指针指向 p</span>            visited <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中最有技巧性的是这个 <code>visited</code> 指针，它记录最近一次遍历完的子树根节点（最近一次 <code>pop</code> 出栈的节点），我们可以根据对比 <code>p</code> 的左右指针和 <code>visited</code> 是否相同来判断节点 <code>p</code> 的左右子树是否被遍历过，进而分离出前中后序的代码位置。</p><blockquote><p>PS：<code>visited</code> 指针初始化指向一个新 new 出来的二叉树节点，相当于一个特殊值，目的是避免和输入二叉树中的节点重复。</p></blockquote><p><strong>只需把递归算法中的前中后序位置的代码复制粘贴到上述框架的对应位置，就可以把任意递归的二叉树算法改写成迭代形式了</strong>。</p><p>比如，<strong>返回二叉树后序遍历的结果</strong>，可以这样写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录后序遍历的结果</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> postorder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> p <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>left <span class="token operator">==</span> visited<span class="token punctuation">)</span>           <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>right <span class="token operator">!=</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>right <span class="token operator">==</span> visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 后序遍历代码位置</span>            postorder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> postorder<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushLeftBranch</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，任何一个二叉树的算法，如果想把递归改成迭代，都可以套用这个框架，只要把递归的前中后序位置的代码对应过来就行了。</p><p>迭代解法到这里就搞定了，<strong>不过除了 BFS 层级遍历之外，二叉树的题目还是用递归的方式来做，因为递归是最符合二叉树结构特点的</strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之Lambda篇</title>
      <link href="/2022/03/09/java-zhi-lambda-pian/"/>
      <url>/2022/03/09/java-zhi-lambda-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之Lambda篇"><a href="#Java之Lambda篇" class="headerlink" title="Java之Lambda篇"></a>Java之Lambda篇</h1><ul><li><code>Lambda</code> 表达式，也可称为闭包，它是推动 <code>Java 8</code> 发布的最重要新特性</li><li><code>Lambda</code> 允许把函数作为一个方法的参数（函数作为参数传递进方法中）</li><li>使用 <code>Lambda</code> 表达式可以使代码变的更加简洁紧凑</li></ul><h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><p><code>lambda</code> 表达式的语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span> expression 或 <span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span> statements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以下是<code>lambda</code>表达式的重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值</li></ul><hr><h2 id="二、Lambda-表达式实例"><a href="#二、Lambda-表达式实例" class="headerlink" title="二、Lambda 表达式实例"></a>二、Lambda 表达式实例</h2><p><strong>Lambda 表达式的简单例子:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不需要参数,返回值为 5  </span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">5</span>    <span class="token comment">// 接收一个参数(数字类型),返回其2倍的值  </span>x <span class="token operator">-></span> <span class="token number">2</span> <span class="token operator">*</span> x    <span class="token comment">// 接受2个参数(数字),并返回他们的差值  </span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x – y    <span class="token comment">// 4. 接收2个int型整数,返回他们的和  </span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> y    <span class="token comment">// 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8Tester</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token class-name">Java8Tester</span> tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Java8Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 类型声明      </span>        <span class="token class-name">MathOperation</span> addition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>                      <span class="token comment">// 不用类型声明      </span>        <span class="token class-name">MathOperation</span> subtraction <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>                      <span class="token comment">// 大括号中的返回语句      </span>        <span class="token class-name">MathOperation</span> multiplication <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                      <span class="token comment">// 没有大括号及返回语句      </span>        <span class="token class-name">MathOperation</span> division <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> addition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 - 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> subtraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 x 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> multiplication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 / 5 = "</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> division<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 不用括号      </span>        <span class="token class-name">GreetingService</span> greetService1 <span class="token operator">=</span> message <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 用括号      </span>        <span class="token class-name">GreetingService</span> greetService2 <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">-></span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        greetService1<span class="token punctuation">.</span><span class="token function">sayMessage</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      greetService2<span class="token punctuation">.</span><span class="token function">sayMessage</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>               <span class="token keyword">interface</span> <span class="token class-name">MathOperation</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>               <span class="token keyword">interface</span> <span class="token class-name">GreetingService</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">void</span> <span class="token function">sayMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>               <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">MathOperation</span> mathOperation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> mathOperation<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上脚本，输出结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ javac <span class="token class-name">Java8Tester</span><span class="token punctuation">.</span>java $ java <span class="token class-name">Java8Tester</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token number">10</span> x <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token class-name">Hello</span> <span class="token class-name">Runoob</span><span class="token class-name">Hello</span> <span class="token class-name">Google</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用 Lambda 表达式需要注意：</strong></p><ul><li><code>Lambda</code> 表达式主要用来<strong>定义行内执行的方法类型接口</strong>，例如，一个简单方法接口。在上面例子中，使用各种类型的<code>Lambda</code>表达式来定义<code>MathOperation</code>接口的方法。然后定义了<code>sayMessage</code>的执行</li><li><code>Lambda</code> 表达式免去了使用匿名方法的麻烦，并且给予<code>Java</code>简单但是强大的<strong>函数化的编程能力</strong></li><li>必须有上下文环境，才能推导出<code>Lambda</code>对应的接口</li></ul><h2 id="三、Lambda和匿名内部类的区别"><a href="#三、Lambda和匿名内部类的区别" class="headerlink" title="三、Lambda和匿名内部类的区别"></a>三、Lambda和匿名内部类的区别</h2><ul><li><strong>使用限制不同：</strong>当接口只有一个抽象方法时，可以使用<code>Lambda</code>，也可以使用匿名内部类；若有多个抽象方法，只能使用匿名内部类</li><li><strong>所需类型不同：</strong>匿名内部类可以是接口、抽象类和具体类；<code>Lambda表达式</code>只能是接口</li><li><strong>实现原理不同：</strong>匿名内部类编译后，产生一个单独的<code>.class</code>字节码文件；<code>Lambda表达式</code>编译后，不会出现文件，对应的字节码会在运行的时候动态生成</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之网络编程篇</title>
      <link href="/2022/03/08/java-zhi-wang-luo-bian-cheng-pian/"/>
      <url>/2022/03/08/java-zhi-wang-luo-bian-cheng-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之网络编程篇"><a href="#Java之网络编程篇" class="headerlink" title="Java之网络编程篇"></a>Java之网络编程篇</h1><h2 id="一、网络编程入门"><a href="#一、网络编程入门" class="headerlink" title="一、网络编程入门"></a>一、网络编程入门</h2><h3 id="1、三要素"><a href="#1、三要素" class="headerlink" title="1、三要素"></a>1、三要素</h3><h4 id="①-IP地址"><a href="#①-IP地址" class="headerlink" title="① IP地址"></a>① IP地址</h4><p>想要让网络中的计算机能够相互通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接受数据的计算机和识别发送的计算机，而IP地址就是这个标识号，也就是设备的标识</p><p><strong>常用命令：</strong></p><ul><li><code>ipconfig</code>：查看本机IP地址</li><li><code>ping IP地址</code>：检查网络是否连通</li></ul><p><strong>InetAddress 的使用</strong></p><ul><li><code>Java</code>提供，此类表示IP地址</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>static InetAddress getByName(String host)</code></td><td>确定主机名称的IP地址，主机名称可以是机器名称，也可以是IP名称</td></tr><tr><td><code>String getHostName()</code></td><td>获取此IP地址的主机名</td></tr><tr><td><code>String getHostAddress()</code></td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取InetAddress对象</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"LAPTOP-KTSSBBVE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.56.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取主机名</span><span class="token class-name">String</span> name <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回文本显示的IP地址字符串</span><span class="token class-name">String</span> ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-端口"><a href="#②-端口" class="headerlink" title="② 端口"></a>② 端口</h4><p>网络的通信，本质是两个应用程序的通信。每台计算机都有很多的应用程序，在网络通信时，通过端口号唯一标识设备中的应用程序，来区分应用程序</p><p><strong>端口号：</strong>用两个字节表示的整数，取值范围是0<del>65535，其中0</del>1023的端口号用于一些知名的网络服务和应用，普通应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</p><h4 id="③协议"><a href="#③协议" class="headerlink" title="③协议"></a>③协议</h4><p>通过计算机网络可以使多台计算机实现连接，位于同一网络中的计算机在进行连接和通信时需要遵守一定的规则。在计算机网络中，这些连接和通信的规则被称为网络通信协议，其对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有<strong>UDP协议</strong>和<strong>TCP协议</strong></p><h2 id="二、UDP通信程序"><a href="#二、UDP通信程序" class="headerlink" title="二、UDP通信程序"></a>二、UDP通信程序</h2><h3 id="1、UDP协议"><a href="#1、UDP协议" class="headerlink" title="1、UDP协议"></a>1、UDP协议</h3><ul><li>用户数据包协议</li><li>UDP是<strong>无连接</strong>通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端发出数据时不会确认接收端是否存在，同样接收端在收到数据时，也不会向发送端反馈是否收到数据</li><li>由于使用UDP协议消耗资源小，通信效率高，所以通常会用于音频、视频和普通数据的传输</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接受结果产生太大影响，但是在使用UDP协议传送数据时，由于UDP的面向无连续性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li></ul><h3 id="2、UDP通信原理"><a href="#2、UDP通信原理" class="headerlink" title="2、UDP通信原理"></a>2、UDP通信原理</h3><p><strong>UDP协议</strong>是一种不可靠的网络协议，它在通信的两端各建立一个<strong>Socket对象</strong>，但是这两个<code>Socket</code>只是发送，接收数据的对象，对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</p><p><code>Java</code>提供了<code>DatagramSocket类</code>作为基于UDP协议的<code>Socket</code></p><h3 id="3、发送数据"><a href="#3、发送数据" class="headerlink" title="3、发送数据"></a>3、发送数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建发送端对象</span>        <span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建数据并打包</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token string">"Hello,UDP,我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        int length = bys.length;        InetAddress address = InetAddress.getByName("LAPTOP-KTSSBBVE");        int port = 10086;        // DatagramPacket(byte[] buf, int length, InetAddress address, int port)        // 构建一个数据包，发送长度为length的数据包到指定主机的指定端口号        DatagramPacket dp = new DatagramPacket(bys, length, address, port);         */</span>        <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"LAPTOP-KTSSBBVE"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用对象方法发送数据</span>        ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭发送端</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、接收数据"><a href="#4、接收数据" class="headerlink" title="4、接收数据"></a>4、接收数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建接收端对象，指定端口号</span>        <span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建数据包，接收数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用对象方法接收数据</span>        ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解析数据包，并在控制台显示</span>        <span class="token comment">// 得到数据的缓冲区</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> datas <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得到数据的长度</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转为字符串形式</span>        <span class="token class-name">String</span> dataString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭接收端</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、TCP通信程序"><a href="#三、TCP通信程序" class="headerlink" title="三、TCP通信程序"></a>三、TCP通信程序</h2><h3 id="1、TCP协议"><a href="#1、TCP协议" class="headerlink" title="1、TCP协议"></a>1、TCP协议</h3><ul><li>传输控制协议</li><li>TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务端，由客户端向服务端发出连接请求，每次连接的创建都需要经过”三次握手“</li><li><strong>三次握手：</strong>TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接</li></ul></li></ul><h3 id="2、TCP通信原理"><a href="#2、TCP通信原理" class="headerlink" title="2、TCP通信原理"></a>2、TCP通信原理</h3><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立一个Socket对象，从而在通信的两端形成网络虚拟链路，一旦建立了一个虚拟的网络链路，两端的程序就可以通过虚拟链路进行通信</p><p><code>Java</code>对基于TCP协议的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过<code>Socket</code>产生IO流来进行网络通信</p><p><code>Java</code>为客户端提供了<code>Socket类</code>，为服务器端提供了<code>ServerSocket类</code></p><h3 id="3、发送数据-1"><a href="#3、发送数据-1" class="headerlink" title="3、发送数据"></a>3、发送数据</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; TCP发送数据public static void main(String[] args) throws IOException &#123;    &#x2F;&#x2F; 建立客户端对象    &#x2F;&#x2F; 连接到指定IP地址的指定端口号    &#x2F;&#x2F; Socket s &#x3D; new Socket(InetAddress.getByName(&quot;LAPTOP-KTSSBBVE&quot;),10086);    &#x2F;&#x2F; 连接到指定主机的指定端口号    Socket s &#x3D; new Socket(&quot;192.168.56.1&quot;,10086);    &#x2F;&#x2F; 获取输出流，写数据    OutputStream os &#x3D; s.getOutputStream();    os.write(&quot;Hello,TCP,我来了&quot;.getBytes());    &#x2F;&#x2F; 释放资源    s.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、接收数据-1"><a href="#4、接收数据-1" class="headerlink" title="4、接收数据"></a>4、接收数据</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; TCP接收数据public static void main(String[] args) throws IOException &#123;    &#x2F;&#x2F; 创建服务器端对象    ServerSocket ss &#x3D; new ServerSocket(10086);    &#x2F;&#x2F; 侦听要连接到此的套接字，并接收    Socket s &#x3D; ss.accept();    &#x2F;&#x2F; 获取输入流，读数据，并把数据显示在控制台    InputStream is &#x3D; s.getInputStream();    byte[] bys &#x3D; new byte[1024];    int len &#x3D; is.read();    String data &#x3D; new String(bys, 0, len);    System.out.println(data);    &#x2F;&#x2F; 释放资源    s.close();    ss.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、实例"><a href="#5、实例" class="headerlink" title="5、实例"></a>5、实例</h3><p>多线程实现文件上传，服务器接收文件后给客户端反馈</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务线程类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 接收数据写到文本文件</span>            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 数据写入文本文件</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Copy["</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"].iml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"Copy["</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"].iml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// if("886".equals(line))&#123;</span>                <span class="token comment">//     break;</span>                <span class="token comment">// &#125;</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 给出反馈</span>            <span class="token class-name">BufferedWriter</span> bwServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bwServer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"文件上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bwServer<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bwServer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放资源</span>            s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 客户端类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建客户端对象</span>        <span class="token class-name">Socket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"192.168.56.1"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 封装文本文件数据</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"HelloWord.iml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 封装输出流写数据</span>        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 自定义结束标记，否则两个会一直在等待对方，但有漏洞，若文件中有标记的内容，则会导致文件复制不完整</span>        <span class="token comment">// bw.write("886");</span>        <span class="token comment">// bw.newLine();</span>        <span class="token comment">// bw.flush();</span>        <span class="token comment">// 用结束方法替代，结束输出流</span>        s<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 接收服务器反馈</span>        <span class="token class-name">BufferedReader</span> brClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> brClient<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放资源</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务器端类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建服务器端对象</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 监听</span>            <span class="token class-name">Socket</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为每一个客户端开启一个线程</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之二叉树篇三</title>
      <link href="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/"/>
      <url>/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/</url>
      
        <content type="html"><![CDATA[<h2 id="leetcode刷题之二叉树篇三"><a href="#leetcode刷题之二叉树篇三" class="headerlink" title="leetcode刷题之二叉树篇三"></a>leetcode刷题之二叉树篇三</h2><h3 id="一、BST"><a href="#一、BST" class="headerlink" title="一、BST"></a>一、BST</h3><p>二叉搜索树（<code>Binary Search Tree，</code>后文简写 BST）</p><p><strong>BST 的特性：</strong></p><p>1、对于 <code>BST</code> 的每一个节点 <code>node</code>，左子树节点的值都比 <code>node</code> 的值要小，右子树节点的值都比 <code>node</code> 的值大</p><p>2、对于 <code>BST</code> 的每一个节点 <code>node</code>，它的左侧子树和右侧子树都是 <code>BST</code></p><p>二叉搜索树并不算复杂，但可以算是数据结构领域的半壁江山，直接基于 BST 的数据结构有 <strong>AVL 树</strong>，<strong>红黑树</strong>等等，拥有了自平衡性质，可以提供 logN 级别的增删查改效率；还有 <strong>B+ 树</strong>，<strong>线段树</strong>等结构都是基于 BST 的思想来设计的。</p><p><strong>从做算法题的角度来看 BST，除了定义，还有一个重要的性质：BST 的中序遍历结果是有序的（升序）</strong></p><p>将 BST 中每个节点的值升序打印出来：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 中序遍历代码位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在二叉树节点中维护额外信息。<strong>每个节点需要记录，以自己为根的这棵二叉树有多少个节点</strong>。</p><p>也就是说，我们 <code>TreeNode</code> 中的字段应该如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token comment">// 以该节点为根的树的节点总数</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、BST转累加树"><a href="#二、BST转累加树" class="headerlink" title="二、BST转累加树"></a>二、BST转累加树</h3><p><strong>降序打印节点的值</strong>，只要把递归顺序改一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 先递归遍历右子树</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 中序遍历代码位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后递归遍历左子树</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果维护一个外部累加变量 <code>sum</code>，然后把 <code>sum</code> 赋值给 BST 中的每一个节点，就是将 BST 转化成累加树</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 记录累加和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 维护累加和</span>    sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment">// 将 BST 转化成累加树</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、二叉搜索树的增删查改"><a href="#三、二叉搜索树的增删查改" class="headerlink" title="三、二叉搜索树的增删查改"></a>三、二叉搜索树的增删查改</h3><h4 id="①-搜索BST中的值"><a href="#①-搜索BST中的值" class="headerlink" title="① 搜索BST中的值"></a>① 搜索BST中的值</h4><p>类似二分查找思想，根据 <code>target</code> 和 <code>root.val</code> 的大小比较，就能排除一边。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 去左子树搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 去右子树搜索</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-插入一个数"><a href="#②-插入一个数" class="headerlink" title="② 插入一个数"></a>② 插入一个数</h4><p><strong>一旦涉及「改」，函数就要返回 <code>TreeNode</code> 类型，并且对递归调用的返回值进行接收</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 找到空位置插入新节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// if (root.val == val)</span>    <span class="token comment">//     BST 中一般不会插入已存在元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> val<span class="token punctuation">)</span>         root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-删除一个数"><a href="#③-删除一个数" class="headerlink" title="③ 删除一个数"></a>③ 删除一个数</h4><p>删除节点的同时不能破坏 BST 的性质。<strong>有三种情况</strong>，用图片来说明。</p><p><strong>情况 1</strong>：<code>A</code> 恰好是末端节点，两个子节点都为空，那么可以直接丢掉。</p><p><img src="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/bst_deletion_case_1.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>情况 2</strong>：<code>A</code> 只有一个非空子节点，那么要让孩子接替自己的位置。</p><p><img src="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/bst_deletion_case_2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 排除了情况 1 之后</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>情况 3</strong>：<code>A</code> 有两个子节点，为了不破坏 BST 的性质，<code>A</code> 必须找到左子树中最大的那个节点，或者右子树中最小的那个节点来接替自己。我们以第二种方式讲解。</p><p><img src="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/bst_deletion_case_3.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 找到右子树的最小节点</span>    <span class="token class-name">TreeNode</span> minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把 root 改成 minNode</span>    root<span class="token punctuation">.</span>val <span class="token operator">=</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment">// 转而去删除 minNode</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三种情况分析完毕，填入框架，简化一下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这两个 if 把情况 1 和 2 都正确处理了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">// 处理情况 3</span>        <span class="token comment">// 获得右子树最小的节点</span>        <span class="token class-name">TreeNode</span> minNode <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除右子树最小的节点</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> minNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用右子树最小的节点替换 root 节点</span>        minNode<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        minNode<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root <span class="token operator">=</span> minNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">TreeNode</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// BST 最左边的就是最小的</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、判断BST的合法性"><a href="#四、判断BST的合法性" class="headerlink" title="四、判断BST的合法性"></a>四、判断BST的合法性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 限定以 root 为根的子树节点必须满足 max.val > root.val > min.val */</span><span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> min<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// base case</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 若 root.val 不符合 max 和 min 的限制，说明不是合法 BST</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">>=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 限定左子树的最大值是 root.val，右子树的最小值是 root.val</span>    <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> min<span class="token punctuation">,</span> root<span class="token punctuation">)</span>         <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过使用辅助函数，增加函数参数列表，在参数中携带额外信息，将这种约束传递给子树的所有节点，这也是二叉树算法的一个小技巧</strong></p><p><strong>另外一个思路</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeNode</span> max<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 左</span>    <span class="token keyword">boolean</span> left <span class="token operator">=</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    max <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 右</span>    <span class="token keyword">boolean</span> right <span class="token operator">=</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、不同的二叉搜索树"><a href="#五、不同的二叉搜索树" class="headerlink" title="五、不同的二叉搜索树"></a>五、不同的二叉搜索树</h3><p><img src="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/image-20220308170617942.png"></p><p>假设n个节点存在二叉排序树的个数是G(n)，1为根节点，2为根节点，…，n为根节点，当1为根节点时，其左子树节点个数为0，右子树节点个数为n-1，同理当2为根节点时，其左子树节点个数为1，右子树节点为n-2，所以可得<code>G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 动态规划</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化 dp 数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//初始化0个节点和1个节点的情况</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 对于第i个节点，需要考虑1作为根节点直到i作为根节点的情况，所以需要累加</span>            <span class="token comment">// 一共i个节点，对于根节点j时,左子树的节点个数为j-1，右子树的节点个数为i-j</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归</span><span class="token comment">// 定义memo消除重叠子问题</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 空二叉树也是一棵搜索二叉树</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lo <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 防止重复计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// i的值为根节点时，左，右子树的个数</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    memo<span class="token punctuation">[</span>lo<span class="token punctuation">]</span><span class="token punctuation">[</span>hi<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/08/leetcode-shua-ti-zhi-er-cha-shu-pian-san/image-20220308170802631.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 主函数 */</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">generateTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构造闭区间 [1, n] 组成的 BST</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 构造闭区间 [lo, hi] 组成的 BST */</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 穷举 root 节点的所有可能</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 递归构造出左右子树的所有合法 BST</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> leftTree <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>lo<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> rightTree <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给 root 节点穷举所有左右子树的组合。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> left <span class="token operator">:</span> leftTree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> right <span class="token operator">:</span> rightTree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// i 作为根节点 root 的值</span>                <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之多线程篇</title>
      <link href="/2022/03/07/java-zhi-duo-xian-cheng-pian/"/>
      <url>/2022/03/07/java-zhi-duo-xian-cheng-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之多线程篇"><a href="#Java之多线程篇" class="headerlink" title="Java之多线程篇"></a>Java之多线程篇</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><ul><li>进程是正在运行的程序</li><li>进程是系统进行资源分配和调用的独立单位</li><li>每个进程都有自己的内存空间和系统资源</li></ul><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><p><strong>线程：</strong>是进程中的单个顺序控制流，是一条执行路径</p><h4 id="①-分类"><a href="#①-分类" class="headerlink" title="① 分类"></a>① 分类</h4><ul><li>单线程：一个进程如果只有一条执行路径，称为单线程程序</li><li>多线程：一个进程如果有多条执行路径，称为多线程程序</li></ul><h4 id="②-生命周期"><a href="#②-生命周期" class="headerlink" title="② 生命周期"></a>② 生命周期</h4><p><img src="/2022/03/07/java-zhi-duo-xian-cheng-pian/image-20220307233250235.png"></p><ul><li><p><strong>新建状态</strong></p><p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程</p></li><li><p><strong>就绪状态</strong></p><p>当线程对象调用了<code>start()</code>方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待<code>JVM</code>里线程调度器的调度</p></li><li><p><strong>运行状态</strong></p><p>如果就绪状态的线程获取 <code>CPU</code> 资源，就可以执行 **run()**，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。其他线程抢走CPU的执行权，就进入就绪状态</p></li><li><p><strong>阻塞状态</strong></p><p>如果一个线程执行了<code>sleep</code>（睡眠）、<code>suspend</code>（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p><ul><li><strong>等待阻塞：</strong>运行状态中的线程执行 <code>wait()</code> 方法，使线程进入到等待阻塞状态</li><li><strong>同步阻塞：</strong>线程在获取 <code>synchronized</code> 同步锁失败(因为同步锁被其他线程占用)</li><li><strong>其他阻塞：</strong>通过调用线程的 <code>sleep()</code> 或 <code>join()</code> 发出了 I/O 请求时，线程就会进入到阻塞状态。当<code>sleep()</code> 状态超时，<code>join()</code> 等待线程终止或超时，或者 <code>I/O</code> 处理完毕，线程重新转入就绪状态</li></ul></li><li><p><strong>死亡状态</strong></p><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态</p></li></ul><h2 id="二、创建线程"><a href="#二、创建线程" class="headerlink" title="二、创建线程"></a>二、创建线程</h2><p><code>Java</code> 提供了三种创建线程的方法：</p><ul><li>通过实现 <code>Runnable</code> 接口</li><li>通过继承 <code>Thread</code> 类本身</li></ul><h3 id="1、通过继承-Thread-类本身"><a href="#1、通过继承-Thread-类本身" class="headerlink" title="1、通过继承 Thread 类本身"></a>1、通过继承 Thread 类本身</h3><ul><li><p>创建一个线程的第一种方法是创建一个新的类，该类继承 <code>Thread</code> 类，然后创建一个该类的实例</p></li><li><p>继承类必须<strong>重写 run() 方法</strong>，该方法是新线程的入口点，用来封装被线程执行的代码。它也必须<strong>调用 start() 方法</strong>才能执行</p></li><li><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 <code>Runnable</code> 接口的一个实例</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MyThread 继承 Thread 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 重写 run() 方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MyThread</span> my1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyThread</span> my2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实现多线程，start()，此方法导致线程开始执行，Java虚拟机调用此线程的run方法</span>    my1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    my2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="①-设置和获取线程名称"><a href="#①-设置和获取线程名称" class="headerlink" title="① 设置和获取线程名称"></a>① 设置和获取线程名称</h4><ul><li><code>void setName(String name)</code>：将此进程的名称更改为等于参数 <code>name</code></li><li><code>String getName()</code>：返回此线程的名称</li><li>也可以通过构造方法设置线程名称</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 需要重写 MyThread类中的构造方法</span><span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">MyThread</span> my3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"高铁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取main方法所在的线程名称</span><span class="token comment">// currentThread()：返回对当前正在执行的线程对象的引用</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-线程优先级"><a href="#②-线程优先级" class="headerlink" title="② 线程优先级"></a>② 线程优先级</h4><ul><li><strong>分时调度模型：</strong>所有线程轮流使用<code>CPU</code>的使用权，平均分配每一个线程占用<code>CPU</code>的时间片</li><li><strong>抢占式调度模型：</strong>优先让优先级高的线程使用<code>CPU</code>，如果线程的优先级相同，随机选择一个；优先级高的线程获取的<code>CPU</code>时间片相对多一些</li><li><code>Java</code>使用的是抢占型调度模型</li></ul><p><strong>设置和获取线程优先级的方法：</strong></p><ul><li><code>public final int getPriority()</code>：返回此线程的优先级，默认优先级为<strong>5</strong>，优先级范围是<strong>1-10</strong>，数越大优先级越高</li><li><code>public final void setPriority(int newPriority)</code>：更改此线程的优先级</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">my1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="③-线程控制"><a href="#③-线程控制" class="headerlink" title="③ 线程控制"></a>③ 线程控制</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>static void sleep(long millis)</code></td><td>使当前正在执行的线程停留（暂停执行）指定的毫秒数</td></tr><tr><td><code>void join()</code></td><td>等待这个线程死亡，其他线程需等待该线程执行完，才能执行</td></tr><tr><td><code>void setDaemon(boolean on)</code></td><td>将此线程标记为守护线程，当运行的线程都是守护线程时，<code>Java</code>虚拟机将推出</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">my1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、通过实现-Runnable-接口"><a href="#2、通过实现-Runnable-接口" class="headerlink" title="2、通过实现 Runnable 接口"></a>2、通过实现 Runnable 接口</h3><h4 id="①-实现方案"><a href="#①-实现方案" class="headerlink" title="① 实现方案"></a>① 实现方案</h4><ul><li><p>在创建一个实现 <code>Runnable</code> 接口的类之后，在类中实例化一个线程对象</p><p><code>Thread</code> 定义了几个构造方法，下面的这个经常使用的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> threadOb<span class="token punctuation">,</span><span class="token class-name">String</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>新线程创建之后，调用 <code>start()</code> 方法才会运行</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MyRunnable 实现 Runnable 接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 重写 run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建MyRunnable对象</span>    <span class="token class-name">MyRunnable</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建Thread类对象</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span> <span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-好处"><a href="#②-好处" class="headerlink" title="② 好处"></a>② 好处</h4><ul><li>避免了<code>Java</code>单继承的局限性，实现类可以再继承其他父类</li><li>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，体现了面向对象的设计思想</li></ul><h2 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h2><p>当<strong>有多个线程</strong>要<strong>同时访问一个变量或对象</strong>时，如果这些线程中既有读又有写操作时，就会导致变量值或对象的状态出现混乱，从而导致程序异常。此时就需要线程同步</p><h3 id="1、同步代码块解决线程同步问题"><a href="#1、同步代码块解决线程同步问题" class="headerlink" title="1、同步代码块解决线程同步问题"></a>1、同步代码块解决线程同步问题</h3><p><strong>同步代码块</strong></p><ul><li>即有<code>synchronized</code>关键字修饰的语句块。被该关键字修饰的语句块会自动被加上内置锁，从而实现同步</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>任意对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    多条语句操作共享数据的代码<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 SellTicket对象</span>    <span class="token class-name">SellTicket</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建Thread类对象</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"A窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"B窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"C窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动线程</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 票数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">// 重写方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 同步语句块</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 线程进来后，就会将这段代码锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 通过sleep()模拟出票时间</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">-</span> tickets<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tickets<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 线程执行完，锁释放</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、同步方法解决线程同步问题"><a href="#2、同步方法解决线程同步问题" class="headerlink" title="2、同步方法解决线程同步问题"></a>2、同步方法解决线程同步问题</h3><p><strong>同步方法</strong></p><ul><li>即有<code>synchronized</code>关键字修饰的方法。 由于<code>Java</code>的每个对象都有一个内置锁，当用此关键字修饰方法时， 内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。</li></ul><p><strong>注：</strong></p><ul><li><strong>synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个类</strong><ul><li>同步静态方法的锁对象：<code>类名.class()</code></li></ul></li><li><strong>同步是一种高开销的操作，应该尽量减少同步的内容</strong>，通常没有必要同步整个方法，使用<code>synchronized</code>代码块同步关键代码即可</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式</span>修饰符 <span class="token keyword">synchronized</span> 返回值类型 方法名<span class="token punctuation">(</span>方法参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 票数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">// 重写方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 同步方法</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 通过sleep()模拟出票时间</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">-</span> tickets<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tickets<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、线程安全的类"><a href="#3、线程安全的类" class="headerlink" title="3、线程安全的类"></a>3、线程安全的类</h3><h4 id="①-StringBuffer"><a href="#①-StringBuffer" class="headerlink" title="① StringBuffer"></a>① StringBuffer</h4><ul><li>线程安全，可变的字符序列，被同步</li><li>若不需要线程安全的实现，使用<code>StringBulider</code>替代<code>StringBuffer</code></li></ul><h4 id="②-Vetor"><a href="#②-Vetor" class="headerlink" title="② Vetor"></a>② Vetor</h4><ul><li>线程安全，被同步</li><li>若不需要线程安全的实现，使用<code>ArrayList</code>替代<code>Vector</code></li></ul><h4 id="③-Hashtable"><a href="#③-Hashtable" class="headerlink" title="③ Hashtable"></a>③ Hashtable</h4><ul><li>该类实现一个哈希表，将键映射到值，任何非<code>null</code>对象都可以用作键或者值，被同步</li><li>若不需要线程安全的实现，使用<code>HashMap</code>替代<code>Hashtable</code></li></ul><p><strong>注：</strong>不执行同步的类会更快</p><h3 id="4、Lock锁"><a href="#4、Lock锁" class="headerlink" title="4、Lock锁"></a>4、Lock锁</h3><p><code>Lock</code>实现提供比使用<code>synchronized</code>方法和语句可以获得更广泛的锁定操作</p><p><code>Lock</code> 中提供了获得锁和释放锁的方法</p><ul><li><code>void lock()</code>：获得锁</li><li><code>void unlock()</code>：释放锁</li></ul><p><strong><code>Lock</code>是接口</strong>，不能直接实例化，采用实现类<code>ReentrantLock</code>来实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 票数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">// 创建锁对象</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重写方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// try...finally 语句防止代码出问题，也能正常的释放锁</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获得锁</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 通过sleep()模拟出票时间</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">-</span> tickets<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tickets<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 释放锁</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、生产者消费者"><a href="#四、生产者消费者" class="headerlink" title="四、生产者消费者"></a>四、生产者消费者</h2><p>为了体现生产和消费过程中的等待和唤醒，<code>Java</code>提供了几个方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void wait()</code></td><td>导致当前线程等待，直到另一个线程调用该对象的<code>notify()</code>方法或<code>notifyAll()</code>方法</td></tr><tr><td><code>notify()</code></td><td>唤醒正在等待对象监视器的单个线程</td></tr><tr><td><code>notifyAll()</code></td><td>唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 商品类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 商品数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> box<span class="token punctuation">;</span>    <span class="token comment">// 表示商品的状态</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> state <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 存储商品，加同步关键字，否则会抛出异常</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> box<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果有商品，等待消费</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果没有，就生产</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>box <span class="token operator">=</span> box<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"产商生产第"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>box <span class="token operator">+</span> <span class="token string">"个商品放入货架"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生产完毕，修改商品状态</span>        state <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 唤醒其他等待的线程</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取商品，加同步关键字，否则会抛出异常</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果没有商品，等待生产</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 有就消费</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者购买第"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>box <span class="token operator">+</span> <span class="token string">"个商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费完毕之后，修改商品状态</span>        state <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 唤醒其他等待的线程</span>        <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生产者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Box</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 消费者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Box</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Box</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoxDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建商品对象</span>        <span class="token class-name">Box</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建生产者对象</span>        <span class="token class-name">Producer</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建消费者对象</span>        <span class="token class-name">Customer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程对象</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之二叉树篇二</title>
      <link href="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/"/>
      <url>/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/</url>
      
        <content type="html"><![CDATA[<h2 id="leetcode刷题之二叉树篇二"><a href="#leetcode刷题之二叉树篇二" class="headerlink" title="leetcode刷题之二叉树篇二"></a>leetcode刷题之二叉树篇二</h2><h2 id="树的递归套路三部曲"><a href="#树的递归套路三部曲" class="headerlink" title="树的递归套路三部曲"></a>树的递归套路三部曲</h2><ol><li>找终止条件</li><li>每级递归返回的信息是什么</li><li>一次递归做了什么</li></ol><p><strong>把题目的要求细化，搞清楚根节点应该做什么，然后剩下的事情抛给前/中/后序的遍历框架就行了</strong></p><p><strong>实例：</strong></p><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/title1.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 终止条件：当 l>r 时，说明数组中已经没元素，返回null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 找最大值和最大值的索引位置</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> maxIndex <span class="token operator">=</span> <span class="token operator">-</span>l<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 构建</span>    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归调用</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> maxIndex <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> maxIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/title3.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> pl<span class="token punctuation">,</span> <span class="token keyword">int</span> pr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> il<span class="token punctuation">,</span> <span class="token keyword">int</span> ir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 终止条件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pl <span class="token operator">></span> pr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// “根”</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> pre<span class="token punctuation">[</span>pl<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 找"根"在中序中的索引位置</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> il<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ir<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">-</span> il<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> pl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pl <span class="token operator">+</span> left<span class="token punctuation">,</span> in<span class="token punctuation">,</span> il<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> pl <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pr<span class="token punctuation">,</span> in<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/image-20220302160711002.png"></p><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/image-20220302161349122.png"></p><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/title2.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> il<span class="token punctuation">,</span> <span class="token keyword">int</span> ir<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> post<span class="token punctuation">,</span> <span class="token keyword">int</span> pl<span class="token punctuation">,</span> <span class="token keyword">int</span> pr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>il <span class="token operator">></span> ir<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> post<span class="token punctuation">[</span>pr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 找"根"在中序中的索引位置</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> il<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ir<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">-</span> il<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> il<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> post<span class="token punctuation">,</span> pl<span class="token punctuation">,</span> pl <span class="token operator">+</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ir<span class="token punctuation">,</span> post<span class="token punctuation">,</span> pl <span class="token operator">+</span> left<span class="token punctuation">,</span> pr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/image-20220302191728071.png"></p><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/image-20220302192927328.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">constructFromPrePost</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> prel<span class="token punctuation">,</span> <span class="token keyword">int</span> prer<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> post<span class="token punctuation">,</span> <span class="token keyword">int</span> postl<span class="token punctuation">,</span> <span class="token keyword">int</span> postr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prel <span class="token operator">></span> prer<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 当前结点已经是叶子结点，叶子结点不需要继续进行遍历，防止后续 prel+1 出现数组越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prel <span class="token operator">==</span> prer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>prel<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 根节点</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> pre<span class="token punctuation">[</span>prel<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/*     通过前序和后序遍历构造二叉树的关键在于通过左子树的根节点，确定 preorder 和 postorder 中左右子树的元素区间    */</span>    <span class="token keyword">int</span> leftval <span class="token operator">=</span> pre<span class="token punctuation">[</span>prel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 找后序遍历中左子树的根节点</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> postl<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> postr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> leftval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 左子树的元素个数</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">-</span> postl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 构造当前根节点</span>    <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根据左子树的根节点索引和元素个数推导左右子树的索引边界</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> prel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> prel <span class="token operator">+</span> left<span class="token punctuation">,</span> post<span class="token punctuation">,</span> postl<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> prel <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> prer<span class="token punctuation">,</span> post<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> postr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/image-20220302192949090.png"></p><p><img src="/2022/03/06/leetcode-shua-ti-zhi-er-cha-shu-pian-er/title.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录所有子树及其出现次数</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录重复的子树根节点</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">findDuplicateSubtrees</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 辅助函数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 空结点返回“#”</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"#"</span><span class="token punctuation">;</span>        <span class="token comment">// 左右子树序列化为字符串</span>        <span class="token class-name">String</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> freq <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存在重复，加入 res</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>freq <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> freq <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之IO流篇</title>
      <link href="/2022/03/04/java-zhi-io-liu-pian/"/>
      <url>/2022/03/04/java-zhi-io-liu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之IO流篇"><a href="#Java之IO流篇" class="headerlink" title="Java之IO流篇"></a>Java之IO流篇</h1><h2 id="一、File"><a href="#一、File" class="headerlink" title="一、File"></a>一、File</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong><code>File</code>是文件和目录路径名的抽象表示</strong></p><ul><li>文件和目录是可以通过<code>File</code>封装成对象的</li><li>对于<code>File</code>而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已，它可以是存在的，也可以是不存在的，将来要通过具体的操作把这个路径的内容转换为具体存在的</li></ul><h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>File(String pathname)</code></td><td>通过将给定的路径名字字符串转换为抽象路径名来创建新的<code>File</code>实例</td></tr><tr><td><code>File(String parent, String child)</code></td><td>从父路径名字符串和子路径名字符串创建新的<code>File</code>实例</td></tr><tr><td><code>File(File parent, String child)</code></td><td>通过父抽象路径名和子路径名字符串创建新的<code>File</code>实例</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式一</span><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java\\java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java"</span><span class="token punctuation">,</span> <span class="token string">"java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式三</span><span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> f4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>f3<span class="token punctuation">,</span> <span class="token string">"java.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建功能"><a href="#3、创建功能" class="headerlink" title="3、创建功能"></a>3、创建功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public boolean createNewFile()</code></td><td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td></tr><tr><td><code>public boolean mkdir()</code></td><td>创建由此抽象路径名命名的目录</td></tr><tr><td><code>public boolean mkdirs()</code></td><td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*不能根据路径名判断是目录还是文件，要看调用的方法要先创建目录，再创建文件*/</span><span class="token comment">// 不存在就创建文件并返回 true，若存在，就不创建并返回 false</span>f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不存在就创建目录并返回 true，若存在，就不创建并返回 false</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token operator">:</span>\\<span class="token class-name">Java</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f2<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建多级目录</span><span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token operator">:</span>\\<span class="token class-name">Java</span>\\javaee<span class="token punctuation">)</span><span class="token punctuation">;</span>f3<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、判断-amp-获取-amp-删除功能"><a href="#4、判断-amp-获取-amp-删除功能" class="headerlink" title="4、判断&amp;获取&amp;删除功能"></a>4、判断&amp;获取&amp;删除功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public boolean isDirectory()</code></td><td>测试此抽象路径名表示的<code>File</code>是否为目录</td></tr><tr><td><code>public boolean isFile()</code></td><td>测试此抽象路径名表示的<code>File</code>是否为文件</td></tr><tr><td><code>public boolean exists()</code></td><td>测试此抽象路径名表示的<code>File</code>是否存在</td></tr><tr><td><code>public String getAbsolutePath()</code></td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td><code>public String getPath()</code></td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td><code>public String getName()</code></td><td>返回由此抽象路径名表示的文件或目录的名称</td></tr><tr><td><code>public String[] list()</code></td><td>返回由此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td><code>public File[] listFiles()</code></td><td>返回由此抽象路径名表示的目录中的文件和目录的<code>File</code>对象数组</td></tr><tr><td><code>public boolean delete()</code></td><td>删除由此抽象路径名表示的文件或目录，若目录下有文件，需先删除文件再删除目录</td></tr></tbody></table><p><strong>绝对路径和相对路径的区别：</strong></p><ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件</li><li>相对路径：必须使用取自其他路径名的信息进行解释</li></ul><p><strong>遍历目录：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建 File 对象</span><span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用方法</span><span class="token function">getAllFilePath</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法，获取给定目录下的所有内容</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getAllFilePath</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 获取 File 数组</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历，得到 File 对象</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fileArray <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> fileArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 判断是否为目录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 是，递归调用</span>                <span class="token function">getAllFilePath</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 不是，获取绝对路径输出</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h2><h3 id="1、IO流概述"><a href="#1、IO流概述" class="headerlink" title="1、IO流概述"></a>1、IO流概述</h3><ul><li><strong>IO：</strong>输入/输出（Input/Output）</li><li><strong>流：</strong>一种抽象概念，是对数据传输的总称，即数据在设备间的传输称为流，流的本质是数据传输</li><li>IO流就是用来处理设备间数据传输问题的，如：文件复制、上传、下载</li></ul><h3 id="2、IO流的分类类"><a href="#2、IO流的分类类" class="headerlink" title="2、IO流的分类类"></a>2、IO流的分类类</h3><ul><li><strong>按数据的流向</strong><ul><li>输入流：读数据</li><li>输出流：写数据</li></ul></li><li><strong>按数据类型</strong><ul><li>字节流：字节输入流、字节输出流</li><li>字符流：字符输入流、字符输出流</li><li>若数据通过记事本软件打开，可以读懂内容，就使用字符流，否则使用字节流，若不知道用哪种，默认使用字节流</li></ul></li></ul><h2 id="三、字节流"><a href="#三、字节流" class="headerlink" title="三、字节流"></a>三、字节流</h2><h3 id="1、字节流抽象基类"><a href="#1、字节流抽象基类" class="headerlink" title="1、字节流抽象基类"></a>1、字节流抽象基类</h3><ul><li><code>InputStream</code>：表示字节输入流的所有类的超类</li><li><code>OutputStream</code>：表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li></ul><h3 id="2、字节流写数据"><a href="#2、字节流写数据" class="headerlink" title="2、字节流写数据"></a>2、字节流写数据</h3><p><code>FileOutputStream</code>：文件输出流用于将数据写入<code>File</code></p><ul><li><code>FileOutputStream(String name)</code>：创建文件输出流以指定的名称写入文件</li></ul><h4 id="①-写数据的三种方式"><a href="#①-写数据的三种方式" class="headerlink" title="① 写数据的三种方式"></a>① 写数据的三种方式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void write(int b)</code></td><td>将指定的字节写入此文件输出流，一次写一个字节数据</td></tr><tr><td><code>void write(byte[] b)</code></td><td>将 <code>b.length</code>字节从指定的字节数组写入此文件输出流，一次写一个字节数组数据</td></tr><tr><td><code>void write(byte[] b, int off, int len)</code></td><td>将<code>len</code>字节从指定的字节数组开始，从偏移量<code>off</code>开始写入此文件输出流，一次写字节数组的部分数据</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建字节流对象</span>    <span class="token comment">// 绝对路径</span>    <span class="token comment">// FileOutputStream fos = new FileOutputStream("D:\\eclipse\\workplace\\HelloWord\\fos.txt");</span>    <span class="token comment">// 相对路径</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*        做了三件事：            1、调用系统功能创建了文件            2、创建了字节输出流对象            3、让字节输出流对象指向创建好的文件     */</span>    <span class="token comment">// 写入单个</span>    <span class="token comment">// 文件中为 a </span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入数组</span>    <span class="token comment">// getBytes()：返回字符串对应的字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一样的效果</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 写入部分数组，从索引 1 开始写 3 个，文件中为 bcd</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 最后要释放资源，close()：关闭此文件输出流域此流相关联的任何系统资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理异常的快捷键: alt + Enter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-两个小问题"><a href="#②-两个小问题" class="headerlink" title="② 两个小问题"></a>② 两个小问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1、如何实现换行window：\r\nlinux：\nmac：\r2、如何实现追加写入public FileOutputStream(String name, boolean append)创建文件输出流以指定的名称写入文件若第二个参数为 true ,则字节将写入文件的末尾而不是开头*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建字节输出流对象，追加写入</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src\\Stream\\fos.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 写数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 换行</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放资源</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-异常处理"><a href="#③-异常处理" class="headerlink" title="③ 异常处理"></a>③ 异常处理</h4><p><code>finally</code>：在异常处理时提供<code>finally</code>块来执行所有清除操作，比如IO流中的释放资源</p><p>特点：被<code>finally</code>控制的语句一定会执行，除非<code>JVM</code>退出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 防止空指针异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 释放资源</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一般都用 throws 的方式来处理，但 try...catch 的方式也要掌握</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、字节流读数据"><a href="#3、字节流读数据" class="headerlink" title="3、字节流读数据"></a>3、字节流读数据</h3><p><code>FileInputStream</code>：从文件系统中的文件获取输入字节</p><ul><li><code>FileInputStream(String name)</code>：通过打开与实际文件的连接来创建一个<code>FileInputStream</code>，该文件由文件系统中的路径名<code>name</code>命名</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>int read()</code></td><td>从此输入流中读取一个字节的数据，如果到达文件的末尾返回<code>-1</code></td></tr><tr><td><code>int read(byte[] b)</code></td><td>从此输入流<code>b.length</code>最多<code>b.length</code>个字节的数据读入一个字节数组，如果到达文件的末尾返回<code>-1</code></td></tr><tr><td><code>int read(byte[] b, int off, int len)</code></td><td>从此输入流<code>len</code>最多<code>len</code>字节的数据读入一个字节数组，如果到达文件的末尾返回<code>-1</code></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建输入流对象</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\Stream\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建输出流对象</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*    // 一次读一个字节    int by;    while ((by = fis.read()) != -1) &#123;        // 复制到新的文件去，写入        fos.write(by);                System.out.print((char) by);  // 不用人为 +ln ，文件中如果有换行，自动换行    &#125;    */</span>        <span class="token comment">// 一次读一个字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 1024 及其整数倍</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 复制到新文件去</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、字节缓冲流"><a href="#4、字节缓冲流" class="headerlink" title="4、字节缓冲流"></a>4、字节缓冲流</h3><h4 id="①-字节缓冲流"><a href="#①-字节缓冲流" class="headerlink" title="① 字节缓冲流"></a>① 字节缓冲流</h4><ul><li><code>BufferedOutputStream</code>：该类实现缓冲输出流，通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</li><li><code>BufferedInputStream</code>：创建<code>BufferedInputStream</code>将创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</li></ul><h4 id="②-构造方法"><a href="#②-构造方法" class="headerlink" title="② 构造方法"></a>② 构造方法</h4><ul><li><strong>字节缓冲输出流：</strong><code>BufferedOutputStream(OutputStream out)</code></li><li><strong>字节缓冲输入流：</strong><code>BufferedInputStream(InputStream in)</code></li><li>字节缓冲流<strong>仅提供缓冲区</strong>，真正读写数据还得依靠基本的字节流对象进行操作</li><li>封装了一个8192的数组</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建输出流对象</span><span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"person.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建输入流对象</span><span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"person1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-复制文件速度"><a href="#③-复制文件速度" class="headerlink" title="③ 复制文件速度"></a>③ 复制文件速度</h4><ul><li>字节缓冲流 &gt; 基本字节流</li><li>一次读写一个字节数组 &gt; 一次读写一个字节</li></ul><h2 id="四、字符流"><a href="#四、字符流" class="headerlink" title="四、字符流"></a>四、字符流</h2><h3 id="1、为什么会有字符流"><a href="#1、为什么会有字符流" class="headerlink" title="1、为什么会有字符流"></a>1、为什么会有字符流</h3><p>由于字节流操作中文不方便，所以<code>Java</code>提供了字符流</p><ul><li><strong>字符流 = 字节流 + 编码表</strong></li></ul><p><strong>一个汉字存储：</strong></p><ul><li>如果是GBK编码，占用2个字节</li><li>如果是UTF-8编码，占用3个字节</li></ul><p>用字节流复制中文文本文件，<strong>通过识别第一个字节是否为负数来识别中文</strong></p><ul><li>汉字在存储的时候，无论哪种编码存储，第一个字节都是负数</li></ul><h3 id="2、字符流抽象基类"><a href="#2、字符流抽象基类" class="headerlink" title="2、字符流抽象基类"></a>2、字符流抽象基类</h3><p><strong>字符流抽象基类：</strong></p><ul><li><code>Reader</code>：字符输入流的抽象类</li><li><code>Writer</code>：字符输出流的抽象类</li></ul><p><strong>字符流中和编码解码问题相关的两个类：</strong></p><ul><li><code>InputStreamReader</code>：是<strong>从字节流到字符流的桥接器</strong>，它使用指定的<code>charset</code>读取字节并将其解码为字符。 它使用的字符集可以通过名称指定，也可以明确指定，或者可以接受平台的默认字符集。</li><li><code>OutputStreamWriter</code>：是<strong>从字符流到字节流的桥接器</strong>，它使用指定的<code>charset</code>读取字节并将其解码为字符。 它使用的字符集可以通过名称指定，也可以明确指定，或者可以接受平台的默认字符集。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认编码创建，idea 默认 UTF-8</span><span class="token comment">// OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("ows.txt"));</span><span class="token comment">// 指定编码创建</span><span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定编码创建</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、字符流写数据"><a href="#3、字符流写数据" class="headerlink" title="3、字符流写数据"></a>3、字符流写数据</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>void flush()</code></td><td align="left">刷新流</td></tr><tr><td align="left"><code>String getEncoding()</code></td><td align="left">返回此流使用的字符编码的名称</td></tr><tr><td align="left"><code>void write(char[] cbuf, int off, int len)</code></td><td align="left">写一个字符数组的一部分</td></tr><tr><td align="left"><code>void write(int c)</code></td><td align="left">写一个字符</td></tr><tr><td align="left"><code>void write(String str, int off, int len)</code></td><td align="left">写一个字符串的一部分</td></tr></tbody></table><h3 id="4、字符流读数据"><a href="#4、字符流读数据" class="headerlink" title="4、字符流读数据"></a>4、字符流读数据</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>String getEncoding()</code></td><td align="left">返回此流使用的字符编码的名称</td></tr><tr><td align="left"><code>int read()</code></td><td align="left">读一个字符</td></tr><tr><td align="left"><code>int read(char[] cbuf, int offset, int length)</code></td><td align="left">将字符读入数组的一部分</td></tr><tr><td align="left"><code>boolean ready()</code></td><td align="left">判断此流是否可以读取</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认编码创建，idea 默认 UTF-8</span>    <span class="token comment">// OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("ows.txt"));</span>    <span class="token comment">// 指定编码创建</span>    <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定编码创建</span>    <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"ows.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 写数据</span>    osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 刷新流，若要中间让字符进入文件，用此方法</span>    osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 写字符串的一部分</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"广东广州天河"</span><span class="token punctuation">;</span>    osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭流，先刷新</span>    osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读数据，一次读取单个字符数据</span>    <span class="token keyword">int</span> ch<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 一次读一个字符数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、复制文件"><a href="#5、复制文件" class="headerlink" title="5、复制文件"></a>5、复制文件</h3><ul><li>转换流名字较长，为了简化书写，转换流提供了对应的子类</li><li><code>FileReader</code>：用于读取字符文件的便捷类，<code>FileReader(String fileName)</code></li><li><code>FileWriter</code>：用于写入字符文件的便捷类，<code>FileWriter(String fileName)</code></li><li><strong>注：</strong>若涉及编码解码问题，还是要使用原来的类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建输入流对象</span>    <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"address.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建输出流对象</span>    <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 复制文件</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放资源</span>    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、字符缓冲流"><a href="#6、字符缓冲流" class="headerlink" title="6、字符缓冲流"></a>6、字符缓冲流</h3><h4 id="①-字符缓冲流"><a href="#①-字符缓冲流" class="headerlink" title="① 字符缓冲流"></a>① 字符缓冲流</h4><ul><li><code>BufferedWriter</code>：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途，<code>BufferedWriter(Writer out)</code></li><li><code>BufferedReader</code>：从字符输入流读取文本，缓冲字符，以提供单个字符，数组和字符串的高效读取，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途，<code>BufferedReader(Reader in)</code></li><li>缓冲区默认大小8192</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建写入对象</span><span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建读取对象</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"bw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-特有功能"><a href="#②-特有功能" class="headerlink" title="② 特有功能"></a>② 特有功能</h4><ul><li><code>BufferedWriter</code>：<code>void newLine()</code>，<strong>写一行行分隔符</strong>，行分隔符字符串由系统属性定义</li><li><code>BufferedReader</code>：<code>public String readLine()</code>，<strong>读一行文字</strong>，结果包含行的内容的字符串，<strong>不包括任何行终止字符</strong>，如果流的结尾已经到达，则为<code>null</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// newLine()，写数据</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// bw.write("\r\n");</span>    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每次刷新一下</span><span class="token punctuation">&#125;</span><span class="token comment">// readLine()，读数据</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里要换行需手动 +ln</span><span class="token punctuation">&#125;</span><span class="token comment">// 复制文件</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>       bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每次刷新一下</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-复制多级目录"><a href="#③-复制多级目录" class="headerlink" title="③ 复制多级目录"></a>③ 复制多级目录</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 复制多级目录</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建数据源对象</span>    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\java学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建目的地对象</span>    <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\迅雷下载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 文件夹复制</span>    <span class="token function">copyFolder</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 文件夹复制</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFolder</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断数据源是否为目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在目的地目录下创建和数据源一样的目录</span>        <span class="token class-name">String</span> srcFileName <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> newFolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFile<span class="token punctuation">,</span> srcFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newFolder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newFolder<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取数据源目录下的所有文件或目录的数组</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历数组，得到对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把该 File 作为数据源的 File 对象，递归调用复制文件夹的方法</span>            <span class="token function">copyFolder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> newFolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 是文件就复制</span>        <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFile<span class="token punctuation">,</span> srcFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 字节缓冲流复制文件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、IO流小结"><a href="#五、IO流小结" class="headerlink" title="五、IO流小结"></a>五、IO流小结</h2><p><img src="/2022/03/04/java-zhi-io-liu-pian/iostream2xx.png"></p><p><strong>一般均采用缓冲流</strong></p><h2 id="六、特殊操作流"><a href="#六、特殊操作流" class="headerlink" title="六、特殊操作流"></a>六、特殊操作流</h2><h3 id="1、标准输入输出流"><a href="#1、标准输入输出流" class="headerlink" title="1、标准输入输出流"></a>1、标准输入输出流</h3><h4 id="①-in"><a href="#①-in" class="headerlink" title="① in"></a>① in</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> in<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>“标准”输入流</strong>。 此流已打开并准备好提供输入数据。 通常，该流对应于键盘输入或由主机环境或用户指定的另一输入源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 键盘输入</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span><span class="token comment">// 字节流转字符流，用转换流</span><span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转字符缓冲流，用于一次读取一行数据</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上述步骤合一</span><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读键盘输入数据</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里要换行需手动 +ln</span><span class="token punctuation">&#125;</span><span class="token comment">// 整数输入</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自己实现太麻烦，Java 提供了类给予使用</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-out"><a href="#②-out" class="headerlink" title="② out"></a>② out</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>“标准”输出流</strong>。 此流已打开并准备接受输出数据。 通常，该流对应于主机环境或用户指定的显示输出或另一输出目的地。</p><p>对于简单的独立<code>Java</code>应用程序，编写一行输出数据的典型方法是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、打印流"><a href="#2、打印流" class="headerlink" title="2、打印流"></a>2、打印流</h3><h4 id="①-字节打印流"><a href="#①-字节打印流" class="headerlink" title="① 字节打印流"></a>① 字节打印流</h4><ul><li><code>PrintStream(Stream fileName)</code>：使用指定的文件名创建新的打印流</li><li>使用继承父类的方法写数据，查看的时候会转码；使用自己特有的方法写数据，查看的数据原样输出</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"ps.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写数据</span>ps<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 a</span>ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 97</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 换行写入</span>ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-字符打印流"><a href="#②-字符打印流" class="headerlink" title="② 字符打印流"></a>② 字符打印流</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>PrintWriter(String fileName)</code></td><td>使用指定的文件名创建一个新的<code>PrintWriter</code>，而不需要自动执行刷新</td></tr><tr><td><code>PrintWriter(Writer out, boolean autoFlush)</code></td><td>创建一个新的<code>PrintWriter</code>。<code>out</code>，字符输出流；<code>autoFlush</code>，若为真，则<code>println</code>，<code>printf</code>或<code>format</code>方法将刷新输出缓冲区</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象，需要手动刷新，不然不会写入数据</span><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token string">"pw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*相当于pw.write("hello");  pw.write("\r\n");*/</span>pw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭前刷新</span>pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动刷新</span><span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"pw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、对象序列化流"><a href="#3、对象序列化流" class="headerlink" title="3、对象序列化流"></a>3、对象序列化流</h3><p><strong>对象序列化：</strong>将对象保存到磁盘中，或者在网络中传输对象</p><p>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象类型、对象数据和对象中存储的属性等信息，字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</p><p>除此之外，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong></p><h4 id="①-对象序列化流"><a href="#①-对象序列化流" class="headerlink" title="① 对象序列化流"></a>① 对象序列化流</h4><ul><li><p><code>ObjectOutputStream</code></p></li><li><p>将<code>Java</code>对象的原始数据类型和图形写入<code>OutputStream</code>。可以使用<code>ObjectInputStream</code>读取（重构）对象；可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象</p></li></ul><p><strong>构造方法：</strong></p><ul><li><code>ObjectOutputStream(OutputStream out)</code>：创建一个写入指定的<code>OutputStream</code>的<code>ObjectOutputStream</code></li></ul><p><strong>序列化对象的方法：</strong></p><ul><li><code>void writeObject(Object obj)</code>：将指定的对象写入<code>ObjectOutputStream</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 学生类</span><span class="token comment">/* 1、一个对象要想被序列化，该对象所属的类必须实现 Serializable 接口2、Serializable 是一个标记接口，实现该接口，不需要重写任何方法*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    序列化运行时将每个可序列化类与版本号相关联，称为serialVersionUID    在反序列化期间使用该版本号来验证序列化对象的发送方和接收方是否已加载与该序列化兼容的该对象的类    如果接收者已经为具有与相应发送者类别不同的 serialVersionUID 的对象加载了类，则反序列化将导致InvalidClassException        为了保证跨不同java编译器实现的一致serialVersionUID值，可序列化类必须声明显式serialVersionUID值    */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serializableUID <span class="token operator">=</span> <span class="token number">42L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">// 若数据不想被序列化，添加关键字 transient</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 序列化对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建流</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"oos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建对象</span>    <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 写数据，序列化对象</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 释放资源</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-对象反序列化流"><a href="#②-对象反序列化流" class="headerlink" title="② 对象反序列化流"></a>② 对象反序列化流</h4><ul><li><code>ObjectInputStream</code></li><li>反序化先前使用<code>ObjectOutputStream</code>编写的原始数据和对象</li></ul><p><strong>构造方法：</strong></p><ul><li><code>ObjectInputStream(InputStream in)</code>：创建从指定的<code>InputStream</code>读取的<code>ObjectInputStream</code></li></ul><p><strong>序列化对象的方法：</strong></p><ul><li><code>Object readObject()</code>：从<code>ObjectInputStream</code>读取一个对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建流</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"oos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取对象</span>    <span class="token class-name">Object</span> o <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 向下转型</span>    <span class="token class-name">Student</span> s <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Properties"><a href="#4、Properties" class="headerlink" title="4、Properties"></a>4、Properties</h3><ul><li><code>Properties</code>是一个<code>Map</code>体系的集合类</li><li><code>Properties</code>可以保存到流中或从流中加载</li></ul><h4 id="①-特有方法"><a href="#①-特有方法" class="headerlink" title="① 特有方法"></a>① 特有方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>Object setProperty(String key, String value)</code></td><td>设置集合的键和值，都是<code>String</code>类型，底层调用<code>Hashtable</code>方法<code>put</code></td></tr><tr><td><code>String getProperty(String key)</code></td><td>使用此属性列表中指定的键搜索属性，不存在返回 <code>null</code></td></tr><tr><td><code>Set&lt;String&gt; stringPropertyNames()</code></td><td>从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建集合对象，因为 Properties 没有泛型，所以不用加&lt;></span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置集合的键和值</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"赵五"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 按键搜索属性</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获得不可修改的键集</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-与IO流结合的方法"><a href="#②-与IO流结合的方法" class="headerlink" title="② 与IO流结合的方法"></a>② 与IO流结合的方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void load(InputStream inStream)</code></td><td>从输入字节流读取属性列表（键和元素对）</td></tr><tr><td><strong><code>void load(Reader reader)</code></strong></td><td><strong>从输入字符流读取属性列表（键和元素对）</strong></td></tr><tr><td><code>void store(OutputStream out, String comments)</code></td><td>将此属性列表（键和元素对）写入此<code>Properties</code>表中，以适合于使用<code>load(InputStream)</code>方法的格式写入输出字节流</td></tr><tr><td><strong><code>void store(Writer writer, String comments)</code></strong></td><td><strong>将此属性列表（键和元素对）写入此<code>Properties</code>表中，以适合于使用<code>load(Reader)</code>方法的格式写入输出字符流</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token function">myStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 把集合中的数据保存到文件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"赵五"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据保存到文件</span>    prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fw<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 把文件中的数据加载到集合</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"fw.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据加载到集合</span>    prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之集合进阶篇</title>
      <link href="/2022/03/03/java-zhi-ji-he-jin-jie-pian/"/>
      <url>/2022/03/03/java-zhi-ji-he-jin-jie-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之集合进阶篇"><a href="#Java之集合进阶篇" class="headerlink" title="Java之集合进阶篇"></a>Java之集合进阶篇</h1><h2 id="一、集合类体系结构"><a href="#一、集合类体系结构" class="headerlink" title="一、集合类体系结构"></a>一、集合类体系结构</h2><p><img src="/2022/03/03/java-zhi-ji-he-jin-jie-pian/2243690-9cd9c896e0d512ed.gif"></p><p>从上面的集合框架图可以看到，<code>Java</code> 集合框架主要包括两种类型的容器，<strong>一种是集合（<code>Collection</code>）</strong>，存储一个元素集合，<strong>另一种是图（<code>Map</code>）</strong>，存储键/值对映射。<code>Collection</code> 接口又有 3 种子类型，<code>List</code>、<code>Set</code> 和 <code>Queue</code>，再下面是一些抽象类，最后是具体实现类，常用的有 <code>ArrayList</code>、<code>LinkedList</code>、<code>HashSet</code>、<code>LinkedHashSet</code>、<code>HashMap</code>、<code>LinkedHashMap</code> 等等。</p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><strong>接口：</strong>是代表集合的抽象数据类型。例如 <code>Collection</code>、<code>List</code>、Set、<code>Map</code> 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li><li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：<code>ArrayList</code>、<code>LinkedList</code>、HashSet、<code>HashMap</code>。</li><li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ul><p><img src="/2022/03/03/java-zhi-ji-he-jin-jie-pian/java-coll-2020-11-16.png"></p><h2 id="二、Collection"><a href="#二、Collection" class="headerlink" title="二、Collection"></a>二、Collection</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><ul><li><code>Collection</code> 是单例集合的顶层接口，表示一组对象，这些对象也别称为<code>Collection</code>的元素</li><li><code>JDK</code>不提供此接口的人和直接实现，提供更具体的子接口（如<code>Set</code>和<code>List</code>）实现</li></ul><p><strong>创建<code>Collection</code>集合对象</strong></p><ul><li>多态的方式</li><li>具体的实现类<code>ArrayList</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加数据</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、常用方法"><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean add(E e)</code></td><td>添加元素</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>从集合中移除指定的元素</td></tr><tr><td><code>void clear()</code></td><td>清空集合中的元素</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>判断集合中是否存在指定元素</td></tr><tr><td><code>boolean isEmpty()</code></td><td>判断集合是否为空</td></tr><tr><td><code>int size()</code></td><td>集合的长度，即元素个数</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加数据</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除元素</span>c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空元素</span>c<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否存在元素</span>c<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为空</span>c<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 集合长度</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Iterator"><a href="#2、Iterator" class="headerlink" title="2、Iterator"></a>2、Iterator</h3><p><code>Java Iterator</code>（<strong>迭代器</strong>）不是一个集合，它是<strong>一种用于访问集合的方法</strong>，可用于迭代 <code>ArrayList</code> 和 <code>HashSet</code> 等集合。</p><p><code>Iterator</code> 是 <code>Java</code> 迭代器最简单的实现，<code>ListIterator</code> 是 <code>Collection API</code> 中的接口， 它扩展了 <code>Iterator</code> 接口</p><p>迭代器 <code>it</code> 的三个基本操作是 <code>next</code> 、<code>hasNext</code> 和 <code>remove</code>。</p><ul><li>调用 <code>it.next()</code> 会<strong>返回迭代器的下一个元素</strong>，并且更新迭代器的状态</li><li>调用 <code>it.hasNext()</code> 用于<strong>检测集合中是否还有元素</strong></li><li>调用 <code>it.remove()</code> 将迭代器返回的元素<strong>删除</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取迭代器</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出集合中的第一个元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让迭代器 it 逐个返回集合中所有元素最简单的方法是使用 while 循环</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// System.out.println(it.next());</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、List"><a href="#四、List" class="headerlink" title="四、List"></a>四、List</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong><code>List</code>是<code>Collection</code>的子接口</strong></p><ul><li>有序结合（也称序列），用户可以精确控制列表中每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素</li><li>与<code>Set</code>集合不同，列表通常允许重复的元素</li></ul><p><strong>特点：</strong></p><ul><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可以重复</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建集合对象</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加数据</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 可重复</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、特有方法"><a href="#2、特有方法" class="headerlink" title="2、特有方法"></a>2、特有方法</h3><p><code>List</code>可以使用<code>Collection</code>中的方法，但也有自己特有的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void add(int index, E element)</code></td><td>在集合的指定位置插入指定元素</td></tr><tr><td><code>E remove(int index)</code></td><td>删除指定索引处的元素，<strong>返回被删除元素</strong></td></tr><tr><td><code>E set(int index, E element)</code></td><td>修改指定索引处的元素，<strong>返回被修改的元素</strong></td></tr><tr><td><code>E get(int index)</code></td><td>返回指定索引处的元素</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 遍历集合</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javaee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*若用迭代器进行遍历，迭代器的next()方法会让 modCount 增加，equals()方法也会让 modCount 增加，让其中的预期修改次数(expectedModCount)和实际修改次数(modCount)不一致的时候，会抛出并发修改异常，而get()方法不会，所以用上述方法遍历*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、ListIterator"><a href="#3、ListIterator" class="headerlink" title="3、ListIterator"></a>3、ListIterator</h3><p><code>ListIterator</code>：列表迭代器</p><h4 id="①-概述"><a href="#①-概述" class="headerlink" title="① 概述"></a>① 概述</h4><ul><li>通过<code>List</code> 中的<code>listIterator()</code>方法得到， 是<code>List</code>集合特有的迭代器，是<code>Iterator</code>的子接口</li><li>用于允许程序员沿任一方向遍历列表的列表迭代器，在迭代器件修改列表，并获取列表中迭代器的当前位置</li></ul><h4 id="②-常用方法"><a href="#②-常用方法" class="headerlink" title="② 常用方法"></a>② 常用方法</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>void add(E e)</code></td><td align="left">将指定的元素插入列表（可选操作）</td></tr><tr><td align="left"><code>boolean hasNext()</code></td><td align="left">如果此列表迭代器在<strong>向前遍历</strong>列表时具有更多元素，则返回 <code>true</code></td></tr><tr><td align="left"><code>boolean hasPrevious()</code></td><td align="left">如果此列表迭代器在<strong>反向遍历</strong>列表时具有更多元素，则返回 <code>true</code></td></tr><tr><td align="left"><code>E next()</code></td><td align="left">返回列表中的下一个元素并前进光标位置</td></tr><tr><td align="left"><code>int nextIndex()</code></td><td align="left">返回后续调用 <code>next()</code> 将返回的元素的索引</td></tr><tr><td align="left"><code>E previous()</code></td><td align="left">返回列表中的上一个元素并向后移动光标位置。</td></tr><tr><td align="left"><code>int previousIndex()</code></td><td align="left">返回后续调用 <code>previous()</code>将返回的元素的索引</td></tr><tr><td align="left"><code>void remove()</code></td><td align="left">从列表中删除 <code>next()</code>或 <code>previous()</code>（可选操作）返回的最后一个元素</td></tr><tr><td align="left"><code>void set(E e)</code></td><td align="left">用指定的元素替换 <code>next()</code>或 <code>previous()</code>返回的最后一个元素（可选操作）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lt <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历</span><span class="token keyword">while</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> lt<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lt<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javaee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 不会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*列表迭代器的add方法在添加元素后，会将实际修改次数(modCount)重新赋值给预期修改次数(expectedModCount)，所以不会报并发修改异常*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、增强for循环"><a href="#4、增强for循环" class="headerlink" title="4、增强for循环"></a>4、增强for循环</h3><p><strong>目的：</strong>简化数组和<code>Collection</code>集合的遍历</p><ul><li>实现<code>Iterable</code>接口的类允许其对象成为增强型<code>for</code>语句的目标</li><li><strong>内部原理是一个<code>Iterator</code>迭代器</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式</span><span class="token keyword">for</span><span class="token punctuation">(</span>数据类型 变量名 <span class="token operator">:</span> 数组或者 <span class="token class-name">Collection</span> 集合<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 在此处使用变量即可</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 错误实例</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"javaee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 报并发修改异常，由于增强 for 循环实际是一个 Iterator 迭代器，所以不能对集合进行增删查改</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、List集合子类特点"><a href="#5、List集合子类特点" class="headerlink" title="5、List集合子类特点"></a>5、List集合子类特点</h3><p><strong><code>List</code> 集合常用子类：</strong><code>ArrayList</code>，<code>LinkedList</code></p><ul><li><code>ArrayList</code>：底层数据结构是数组，查询快，增删慢</li><li><code>LinkedList</code>：底层数据结构是链表，查询慢，增删快</li></ul><h4 id="①-使用-ArrayList-的情况"><a href="#①-使用-ArrayList-的情况" class="headerlink" title="① 使用 ArrayList 的情况"></a><strong>① 使用 ArrayList 的情况</strong></h4><ul><li>频繁访问列表中的某一个元素</li><li>只需要在列表末尾进行添加和删除元素操作</li></ul><h4 id="②-使用-LinkedList-的情况"><a href="#②-使用-LinkedList-的情况" class="headerlink" title="② 使用 LinkedList 的情况"></a><strong>② 使用 LinkedList 的情况</strong></h4><ul><li>需要通过循环迭代来访问列表中的某些元素</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作</li></ul><h4 id="③-LinkedList-的特有方法"><a href="#③-LinkedList-的特有方法" class="headerlink" title="③ LinkedList 的特有方法"></a>③ LinkedList 的特有方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public void addFirst(E e)</code></td><td>在该列表开头插入指定的元素</td></tr><tr><td><code>public void addLast(E e)</code></td><td>将指定的元素追加到此列表末尾</td></tr><tr><td><code>public E getFirst()</code></td><td>返回此列表的第一个元素</td></tr><tr><td><code>public E getLast()</code></td><td>返回此列表的最后一个元素</td></tr><tr><td><code>public E removeFirst()</code></td><td>从此列表中删除并返回第一个元素</td></tr><tr><td><code>public E removeLast()</code></td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table><h2 id="五、Set"><a href="#五、Set" class="headerlink" title="五、Set"></a>五、Set</h2><h3 id="1、概述-2"><a href="#1、概述-2" class="headerlink" title="1、概述"></a>1、概述</h3><p><code>Set</code><strong>集合特点：</strong></p><ul><li>不包含重复元素的集合</li><li>没有带索引的方法，不能使用普通<code>for</code>循环遍历</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用其实现类 HashSet 创建 Set 对象</span><span class="token comment">// HashSet 对集合的迭代顺序不坐保证，所以不一定按照添加的顺序输出</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、哈希值"><a href="#2、哈希值" class="headerlink" title="2、哈希值"></a>2、哈希值</h3><p><strong>哈希值：</strong>是<code>JDK</code>根据对象的地址或者字符串或者数字算出来的<code>int</code>类型的熟知</p><p><code>Object</code>类中有一个方法可以获取对象的哈希值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 返回对象的哈希码值</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*1、同一对象调用 hashCode() 返回的哈希值相同2、默认情况下，不同对象调用 hashCode() 返回哈希值不同，但可以通过重写，返回哈希值相同*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、HashSet"><a href="#3、HashSet" class="headerlink" title="3、HashSet"></a>3、HashSet</h3><h4 id="①-集合特点"><a href="#①-集合特点" class="headerlink" title="① 集合特点"></a>① 集合特点</h4><ul><li>底层数据结构是哈希表</li><li><strong>对集合的迭代顺序不作任何保证</strong>，即不保证存储和取出的元素顺序一致</li><li>没有带索引的方法，所以不能使用普通<code>for</code>循环遍历</li><li>由于是<code>Set</code>集合，所以是不包含重复元素的集合，是<code>Set</code>接口的实现类</li></ul><h4 id="②-集合添加一个元素的过程"><a href="#②-集合添加一个元素的过程" class="headerlink" title="② 集合添加一个元素的过程"></a>② 集合添加一个元素的过程</h4><p><img src="/2022/03/03/java-zhi-ji-he-jin-jie-pian/image-20220303220812667.png"></p><p><strong>保证元素唯一性，需重写<code>hashCode()</code>和<code>equals()</code></strong></p><h3 id="4、LinkedHashSet"><a href="#4、LinkedHashSet" class="headerlink" title="4、LinkedHashSet"></a>4、LinkedHashSet</h3><p><strong>特点：</strong></p><ul><li>哈希表和链表实现的<code>Set</code>接口，具有可预测的迭代次序</li><li><strong>由链表保证元素有序</strong>，也就说元素的存储和取出顺序是一致的</li><li><strong>由哈希表保证元素唯一</strong>，即没有重复的元素</li></ul><h3 id="5、TreeSet"><a href="#5、TreeSet" class="headerlink" title="5、TreeSet"></a>5、TreeSet</h3><h4 id="①-特点："><a href="#①-特点：" class="headerlink" title="① 特点："></a><strong>① 特点：</strong></h4><ul><li>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法</li><li>没有带索引的方法，所以不能使用普通<code>for</code>循环遍历</li><li>由于是<code>Set</code>集合，所以不包含重复元素的集合</li></ul><h4 id="②-自然排序-Comparable-的使用"><a href="#②-自然排序-Comparable-的使用" class="headerlink" title="② 自然排序 Comparable 的使用"></a>② 自然排序 Comparable 的使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// TreeSet(), 根据其元素的自然排序进行排序</span><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出为按自然顺序的 4, 10, 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用<code>TreeSet</code>集合存储自定义对象，无参构造方法使用的是<strong>自然排序</strong>对元素进行排序</li><li>自然排序就是<strong>让元素所属的类实现<code>Comparable</code>接口</strong>，重写<code>compareTo(To)</code> 方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><h4 id="②-比较器排序-Comparator-的使用"><a href="#②-比较器排序-Comparator-的使用" class="headerlink" title="② 比较器排序 Comparator 的使用"></a>② 比较器排序 Comparator 的使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 带参创建集合对象，带匿名内部类，使用 Comparator 比较器</span><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> t1<span class="token punctuation">,</span> <span class="token class-name">Teacher</span> t2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 比较年龄</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 年龄相同，则比较名字首字母</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> t1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> num<span class="token punctuation">;</span>                <span class="token keyword">return</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用<code>TreeSet</code>集合存储自定义对象，带参构造方法使用的是<strong>比较器排序</strong>对元素进行排序</li><li>比较器排序就是<strong>让集合构造方法接收<code>Comparator</code>的实现类对象</strong>，重写<code>compareTo(To1, To2)</code> 方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><h2 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h2><h3 id="1、概述-3"><a href="#1、概述-3" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>泛型：</strong>是<code>JDK5</code>引入的特性，提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型，本质是<strong>参数化类型</strong>，即所操作的数据类型被指定为一个参数</p><p><strong>参数化类型：</strong>将类型由原来的具体的类型参数化，然后再使用/调用时传入具体的类型，可以用在类、方法和接口，分别被称为<strong>泛型类、泛型方法、泛型接口</strong></p><p><strong>好处：</strong></p><ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><p><strong>Java 中泛型标记符：</strong></p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul><h3 id="2、泛型类-amp-泛型方法"><a href="#2、泛型类-amp-泛型方法" class="headerlink" title="2、泛型类 &amp; 泛型方法"></a>2、泛型类 &amp; 泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 泛型类格式</span>修饰符 <span class="token keyword">class</span> 类名<span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 泛型方法格式</span>修饰符 <span class="token operator">&lt;</span>类型<span class="token operator">></span> 返回值类型 方法名<span class="token punctuation">(</span>类型 变量名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 泛型类实例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setT</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 泛型方法实例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Generic</span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、泛型接口"><a href="#3、泛型接口" class="headerlink" title="3、泛型接口"></a>3、泛型接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 泛型接口格式</span>修饰符 <span class="token keyword">interface</span> 接口名 <span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Generic</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> g1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"爱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、类型通配符"><a href="#4、类型通配符" class="headerlink" title="4、类型通配符"></a>4、类型通配符</h3><p><strong>类型通配符</strong>一般是使用 **<code>?</code>**代替具体的类型参数</p><ul><li><strong><code>List&lt;?&gt;</code></strong> 在逻辑上是 <code>List&lt;String&gt;</code>,<code>List&lt;Integer&gt;</code>等所有 <strong>List&lt;具体类型实参&gt;</strong> 的父类，但也仅表示是各种泛型<code>List</code>的父类，不能把元素添加到其中</li></ul><p><strong>类型通配符的上限：</strong><code>&lt;? extends 类型&gt;</code></p><ul><li><strong><code>List&lt;? extends Number&gt;</code>：</strong> 表示的类型是<strong>Number或者其子类型</strong></li></ul><p><strong>类型通配符的下限：</strong><code>&lt;? super 类型&gt;</code></p><ul><li><strong><code>List&lt;? super Number&gt;</code>：</strong> 表示的类型是<strong>Number或者其父类型</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// l1 报错，l2、l3正常运行</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> <span class="token number">12</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// l6 报错，l4、l5正常运行</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> l4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> <span class="token number">15</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> l6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、可变参数"><a href="#5、可变参数" class="headerlink" title="5、可变参数"></a>5、可变参数</h3><p><strong>可变参数</strong>又称参数个数可变，用作方法的形参出现，方法参数个数是可变的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式</span>修饰符 返回值类型 方法名<span class="token punctuation">(</span>数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 变量名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例，其中 a 是一个数组</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可变参数的变量是一个数组</li><li>如果一个方法有多个参数，包含可变参数，<strong>可变参数放最后</strong></li></ul><p><img src="/2022/03/03/java-zhi-ji-he-jin-jie-pian/image-20220303235433106.png"></p><h2 id="七、Map"><a href="#七、Map" class="headerlink" title="七、Map"></a>七、Map</h2><h3 id="1、概述-4"><a href="#1、概述-4" class="headerlink" title="1、概述"></a>1、概述</h3><p><code>Interface Map&lt;K,V&gt;</code>：K–&gt;键的类型；V–&gt;值的类型</p><ul><li>将键映射到值的对象</li><li>不能包含重复的值</li><li>每个键可以映射到最多一个值</li></ul><p><strong>创建<code>Map</code>集合对象</strong></p><ul><li>多态的方式</li><li>具体的实现类<code>HashMap</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建集合对象</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 键重复则新值替代旧值，修改元素</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、基本功能"><a href="#2、基本功能" class="headerlink" title="2、基本功能"></a>2、基本功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>V put(K key,V value)</code></td><td>将指定的值与此映射中的指定键相关联（可选操作）。 如果映射先前包含键的映射，则旧值将替换为指定的值</td></tr><tr><td><code>V remove(Object key)</code></td><td>根据键删除键值对元素</td></tr><tr><td><code>void clear()</code></td><td>移除所有的键值对元素</td></tr><tr><td><code>boolean containsKey(Object key)</code></td><td>判断集合是否包含指定的键</td></tr><tr><td><code>boolean containsValue(Object value)</code></td><td>判断集合是否包含指定的值</td></tr><tr><td><code>boolean isEmpty()</code></td><td>判断集合是否为空</td></tr><tr><td><code>int size()</code></td><td>集合长度，即键值对的个数</td></tr></tbody></table><h3 id="3、获取功能"><a href="#3、获取功能" class="headerlink" title="3、获取功能"></a>3、获取功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>V get(Object key)</code></td><td>根据键获取值</td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>获取所有键的集合</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>获取所有值的集合</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td><td>获取所有键值对对象的集合</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实例</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建对象</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加元素</span>    m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"郭靖"</span><span class="token punctuation">,</span> <span class="token string">"黄蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"杨过"</span><span class="token punctuation">,</span> <span class="token string">"小龙女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// V get(Object key)：根据键获取值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Set&lt;K> keySet()：获取所有键的集合</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Collection&lt;V> values()：获取所有值的集合</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Set&lt;Map.Entry&lt;K,V>> entrySet()：获取所有键值对对象的集合</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Map的遍历"><a href="#4、Map的遍历" class="headerlink" title="4、Map的遍历"></a>4、Map的遍历</h3><h4 id="①-方式一"><a href="#①-方式一" class="headerlink" title="① 方式一"></a>① 方式一</h4><ul><li>获取所有键的集合，用<code>keySet()</code>实现</li><li>遍历键的集合，获取每个键</li><li>根据键找值，用<code>get(Object key)</code>实现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取所有键的集合，用 keySet() 实现</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历键的集合，获取每个键</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据键找值，用 get(Object key) 实现</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-方式二"><a href="#②-方式二" class="headerlink" title="② 方式二"></a>② 方式二</h4><ul><li>获取所有键值对对象的集合，用<code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>实现</li><li>遍历键值对对象的集合，获取每一个键值对对象</li><li>根据键值对对象获取键和值，用<code>getKey()</code>获取键，用 <code>getValue()</code>获取值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取所有键值对对象的集合，用 Set&lt;Map.Entry&lt;K,V>> entrySet() 实现</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历键值对对象的集合，获取每一个键值对对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> s <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据键值对对象获取键和值，用 getKey() 获取键，用 getValue() 获取值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练手例子：统计字符串中字符的次数</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 键盘输入</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 HashMap 集合</span>        <span class="token comment">// HashMap&lt;Character, Integer> hm = new HashMap&lt;Character, Integer>();</span>        <span class="token comment">// 若要得到顺序的字母，创建 TreeMap，用法与 HashMap 相同</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历字符串，得每一个字符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> key <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 拿到的内一个字符作为键到 HashMap 中去找对应的值，看其返回值</span>            <span class="token class-name">Integer</span> value <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 返回值为 null ，表示不存在集合中，把该字符作为键，1作为值存储</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 返回值不为 null，表示存在，把该值+1，重新存储字符和对应的值</span>                value<span class="token operator">++</span><span class="token punctuation">;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 遍历集合，得到键和值，按要求拼接</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> key<span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> value <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、Collections"><a href="#八、Collections" class="headerlink" title="八、Collections"></a>八、Collections</h2><p><strong><code>Colections</code>是针对集合操作的工具类</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</code></td><td>将指定的列表按升序排列</td></tr><tr><td><code>public static void reverse(List&lt;?&gt; list)</code></td><td>反转指定列表中元素的顺序</td></tr><tr><td><code>public static void shuffle(List&lt;?&gt; list)</code></td><td>使用默认的随机源随机置换指定的列表</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> myNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数字排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数字反转</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机置换，模拟洗牌</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、实例"><a href="#九、实例" class="headerlink" title="九、实例"></a>九、实例</h2><p><strong>通过程序实现斗地主过程中的洗牌、发牌和看牌</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建 HashMap，键是编号，值是牌</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 ArrayList，存储编号</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建花色数组和点数数组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"♦"</span><span class="token punctuation">,</span> <span class="token string">"♣"</span><span class="token punctuation">,</span> <span class="token string">"♥"</span><span class="token punctuation">,</span> <span class="token string">"♠"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 从 0 开始往 HashMap 里存储编号，并存储对应的牌，同时往 ArrayList 里存储编号</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">"大王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> color <span class="token operator">:</span> colors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> color <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 洗牌，用 Collections 的 shuffle() 方法实现</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发牌，为保证编号是排序的，创建 TreeSet 集合接收</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 看牌</span>        <span class="token function">lookPoker</span><span class="token punctuation">(</span><span class="token string">"玩家1"</span><span class="token punctuation">,</span> l1<span class="token punctuation">,</span> hm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPoker</span><span class="token punctuation">(</span><span class="token string">"玩家2"</span><span class="token punctuation">,</span> l2<span class="token punctuation">,</span> hm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPoker</span><span class="token punctuation">(</span><span class="token string">"玩家3"</span><span class="token punctuation">,</span> l3<span class="token punctuation">,</span> hm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lookPoker</span><span class="token punctuation">(</span><span class="token string">"底牌"</span><span class="token punctuation">,</span> dp<span class="token punctuation">,</span> hm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 看牌方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lookPoker</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> hm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"的牌是："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> ts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> poker <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>poker <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之异常篇</title>
      <link href="/2022/03/02/java-zhi-yi-chang-pian/"/>
      <url>/2022/03/02/java-zhi-yi-chang-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之异常篇"><a href="#Java之异常篇" class="headerlink" title="Java之异常篇"></a>Java之异常篇</h1><p><strong>异常</strong>是程序出现了不正常的情况</p><h2 id="一、异常体系"><a href="#一、异常体系" class="headerlink" title="一、异常体系"></a>一、异常体系</h2><p>所有的异常类是从 <code>java.lang.Exception</code> 类继承的子类。</p><p><code>Exception</code> 类是 <code>Throwable</code> 类的子类。除了<code>Exception</code>类外，<code>Throwable</code>还有一个子类<code>Error</code> 。</p><p><code>Java</code> 程序通常<strong>不捕获错误</strong>。错误一般发生在严重故障时，它们在<code>Java</code>程序处理的范畴之外。</p><p>例如，<code>JVM</code> 内存溢出。一般地，程序不会从错误中恢复。</p><p>异常类有两个主要的子类：<code>IOException</code> 类和 <code>RuntimeException</code> 类。</p><p><img src="/2022/03/02/java-zhi-yi-chang-pian/exception-hierarchy.png"></p><p><code>Error</code> ：用来指示运行时环境发生的错误，不需要处理</p><p><code>Exception</code>：异常类，表示程序本身可以处理的问题</p><h2 id="二、Throwable"><a href="#二、Throwable" class="headerlink" title="二、Throwable"></a>二、Throwable</h2><p>下面的列表是 <code>Throwable</code> 类的主要方法:</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>public String getMessage()</code></td><td align="left">返回关于发生的异常的详细信息。这个消息在<code>Throwable</code> 类的构造函数中初始化</td></tr><tr><td align="left"><code>public Throwable getCause()</code></td><td align="left">返回一个 <code>Throwable</code> 对象代表<strong>异常原因</strong></td></tr><tr><td align="left"><code>public String toString()</code></td><td align="left">返回此 <code>Throwable</code> 的简短描述，原因和类名</td></tr><tr><td align="left"><strong><code>public void printStackTrace()</code></strong></td><td align="left"><strong>将此 <code>Throwable</code> 及其回溯打印到标准错误流，输出到控制台，原因、类名和位置</strong></td></tr><tr><td align="left"><code>public StackTraceElement [] getStackTrace()</code></td><td align="left">返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底</td></tr><tr><td align="left"><code>public Throwable fillInStackTrace()</code></td><td align="left">用当前的调用栈层次填充<code>Throwable</code> 对象栈层次，添加到栈层次任何先前信息中</td></tr></tbody></table><h2 id="三、异常处理"><a href="#三、异常处理" class="headerlink" title="三、异常处理"></a>三、异常处理</h2><h3 id="1、出现异常时-JVM-的默认处理方案"><a href="#1、出现异常时-JVM-的默认处理方案" class="headerlink" title="1、出现异常时 JVM 的默认处理方案"></a>1、出现异常时 JVM 的默认处理方案</h3><ul><li>把异常的名称，异常原因及异常出现的位置等信息输出在控制台</li><li>程序停止执行</li></ul><h3 id="2、try…catch"><a href="#2、try…catch" class="headerlink" title="2、try…catch"></a>2、try…catch</h3><p>使用 <code>try</code> 和 <code>catch</code> 关键字可以<strong>捕获异常</strong>。<code>try/catch</code> 代码块放在异常可能发生的地方。</p><p><code>try/catch</code>代码块中的代码称为<strong>保护代码</strong>，使用 <code>try/catch</code> 的语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 程序代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//Catch 块</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Access element three :"</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你访问的索引不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Catch</code> 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，<code>try</code> 后面的 <code>catch</code> 块就会被检查。</p><p>如果发生的异常包含在 <code>catch</code> 块中，异常会被传递到该 <code>catch</code> 块，这和传递一个参数到方法是一样</p><h4 id="①-执行流程："><a href="#①-执行流程：" class="headerlink" title="① 执行流程："></a>① 执行流程：</h4><ul><li>程序从<code>try</code>里的代码开始执行</li><li>出现异常，会自动生成一个异常类对象，该异常类对象将被提交给<code>Java</code>运行时系统</li><li>当<code>Java</code>运行时系统接收到异常对象时，会到<code>catch</code>中去找匹配的异常类，找到后进行异常处理</li><li>执行完毕后，程序继续往下执行</li></ul><h4 id="②-多重捕获"><a href="#②-多重捕获" class="headerlink" title="② 多重捕获"></a>② 多重捕获</h4><p>一个 <code>try</code> 代码块后面跟随多个 <code>catch</code> 代码块的情况就叫<strong>多重捕获</strong></p><p>多重捕获块的语法如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 异常的变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token comment">/*可以在 try 语句后面添加任意数量的 catch 块如果保护代码中发生异常，异常被抛给第一个 catch 块如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获如果不匹配，它会被传递给第二个 catch 块如此，直到异常被捕获或者通过所有的 catch 块*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-finally关键字"><a href="#③-finally关键字" class="headerlink" title="③ finally关键字"></a>③ finally关键字</h4><p><code>finally</code> 关键字用来创建在 <code>try</code> 代码块后面执行的代码块</p><p><strong>无论是否发生异常</strong>，<code>finally</code> 代码块中的代码<strong>总会被执行</strong></p><p>在 <code>finally</code> 代码块中，可以运行清理类型等收尾善后性质的语句</p><p><code>finally</code> 代码块出现在 <code>catch</code> 代码块最后，<strong>语法如下：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 程序代码 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意下面事项：</strong></p><ul><li><code>catch</code> 不能独立于 <code>try</code> 存在</li><li>在 <code>try/catch</code> 后面添加 <code>finally</code> 块并非强制性要求的</li><li><code>try</code> 代码后不能既没 <code>catch</code> 块也没 <code>finally</code> 块</li><li><code>try</code>, <code>catch</code>, <code>finally</code> 块之间不能添加任何代码</li></ul><h3 id="3、编译时异常和运行时异常的区别"><a href="#3、编译时异常和运行时异常的区别" class="headerlink" title="3、编译时异常和运行时异常的区别"></a>3、编译时异常和运行时异常的区别</h3><p><code>Java</code>中的异常分为两大类：<strong>编译时异常****和</strong>运行时异常<strong>，也被称为</strong>受检异常<strong>和</strong>非受检异常**</p><ul><li><strong>运行时异常</strong>（<code>RuntimeException</code>）：编译期不检查，出现问题后，需要返回修改代码</li><li><strong>编译时异常</strong>（非<code>RuntimeException</code>）：编译期必须处理，否则程序不能通过编译</li></ul><h3 id="4、throws"><a href="#4、throws" class="headerlink" title="4、throws"></a>4、throws</h3><p>并不是所有情况都有权限进行异常处理，针对这种情况，<code>Java</code>提供了<code>throws</code>处理方案，**<code>throws</code>只是抛出异常，没有真正的处理异常**</p><p><code>throws</code> 关键字<strong>放在方法签名的尾部</strong>，也可以使用 <code>throw</code> 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的</p><p>下面方法的声明抛出一个 <code>ArrayIndexOutOfBoundsException</code> 异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开</p><h3 id="5、自定义异常"><a href="#5、自定义异常" class="headerlink" title="5、自定义异常"></a>5、自定义异常</h3><p>在 <code>Java</code> 中可以自定义异常。编写异常类时需要记住下面的几点：</p><ul><li>所有异常都必须是 <code>Throwable</code> 的子类</li><li>如果希望写一个<strong>检查性异常类</strong>，则需要继承 <code>Exception</code> 类</li><li>如果你想写一个<strong>运行时异常类</strong>，那么需要继承 <code>RuntimeException</code> 类</li></ul><p>可以像下面这样定义异常类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只继承<code>Exception</code> 类来创建的异常类是检查性异常类</li><li>一个异常类和其它任何类一样，包含有变量和方法</li></ul><h3 id="6、throws-和-throw-的区别"><a href="#6、throws-和-throw-的区别" class="headerlink" title="6、throws 和 throw 的区别"></a>6、throws 和 throw 的区别</h3><p><strong>throws：</strong></p><ul><li>用在方法声明后面，跟的是异常类名</li><li>表示抛出异常，由该方法的调用者处理</li><li>表示出现异常的一种可能性，并不一定会发生异常</li></ul><p><strong>throw：</strong></p><ul><li>用在方法体内，跟的是异常对象名</li><li>表示抛出异常，由方法体内的语句处理</li><li>执行throw一定抛出了某种异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*检查输入分数是否在0-100之间*/</span><span class="token comment">// 自定义异常类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScoreException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ScoreException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ScoreException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 老师类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkScore</span><span class="token punctuation">(</span><span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ScoreException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> score <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// throw new ScoreException();</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ScoreException</span><span class="token punctuation">(</span><span class="token string">"你给的成绩应该在0-100之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分数正常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入分数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Teacher</span> t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">checkScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ScoreException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之常用API篇</title>
      <link href="/2022/03/01/java-zhi-chang-yong-api-pian/"/>
      <url>/2022/03/01/java-zhi-chang-yong-api-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之常用API篇"><a href="#Java之常用API篇" class="headerlink" title="Java之常用API篇"></a>Java之常用API篇</h1><h2 id="一、Math"><a href="#一、Math" class="headerlink" title="一、Math"></a>一、Math</h2><p><code>Math</code>包含执行基本数字运算的方法，如基本指数、对数、平方根和三角函数</p><p><strong>Math类的常用方法</strong></p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>public static int abs(int a)</code></td><td align="left">返回参数的绝对值</td></tr><tr><td align="left"><code>public static double ceil(double a)</code></td><td align="left">返回大于或等于参数的最小<code>double</code>值，等于一个整数</td></tr><tr><td align="left"><code>public static double floor(double a)</code></td><td align="left">返回大于或等于参数的最小<code>double</code>值，等于一个整数</td></tr><tr><td align="left"><code>public static int round(float a)</code></td><td align="left">按四舍五入返回最接近参数的<code>int</code></td></tr><tr><td align="left"><code>public static int max(int a, int b)</code></td><td align="left">返回两个<code>int</code>值中的较大值</td></tr><tr><td align="left"><code>public static int min(int a, int b)</code></td><td align="left">返回两个<code>int</code>值中的较小值</td></tr><tr><td align="left"><code>public static double pow(double a, double b)</code></td><td align="left">返回<code>a</code>的<code>b</code>次幂的值</td></tr><tr><td align="left"><code>public static double random()</code></td><td align="left">返回值为<code>double</code>的正值，[0.0,1.0)</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 结果均为88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、System"><a href="#二、System" class="headerlink" title="二、System"></a>二、System</h2><p><code>System</code>包含几个有用的类字段和方法，它不能被实例化</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static void exit(int status)</code></td><td>终止当前运行的<code>Java</code>虚拟机，非零表示异常终止</td></tr><tr><td><code>public static long currentTimeMillis()</code></td><td>返回当前时间（以毫米为单位）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前时间与1970.1.1之间的毫秒值</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Object"><a href="#三、Object" class="headerlink" title="三、Object"></a>三、Object</h2><p>类<code>Object</code>是类层次结构的根，每个类都有<code>Object</code>作为超类。所有类都直接或者间接继承自该类。所有对象（包括数组）都实现了这个类的方法</p><p><code>Object</code> 类可以显示继承，也可以隐式继承</p><h3 id="1、类的构造函数"><a href="#1、类的构造函数" class="headerlink" title="1、类的构造函数"></a>1、类的构造函数</h3><table><thead><tr><th align="left">构造方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Object()</code></td><td align="left">构造一个新对象</td></tr></tbody></table><h3 id="2、类的方法"><a href="#2、类的方法" class="headerlink" title="2、类的方法"></a>2、类的方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>protected Object clone()</code></td><td align="left">创建并返回一个对象的拷贝</td></tr><tr><td align="left"><strong><code>boolean equals(Object obj)</code></strong></td><td align="left"><strong>比较两个对象是否相等，默认比较地址，若要比较内容，需重写，自动生成（Alt + insert）</strong></td></tr><tr><td align="left"><code>protected void finalize()</code></td><td align="left">当 GC (垃圾回收器)确定不存在对该对象的有更多引用时，由对象的垃圾回收器调用此方法</td></tr><tr><td align="left"><code>Class getClass()</code></td><td align="left">获取对象的运行时对象的类</td></tr><tr><td align="left"><code>int hashCode()</code></td><td align="left">获取对象的 hash 值</td></tr><tr><td align="left"><code>void notify()</code></td><td align="left">唤醒在该对象上等待的某个线程</td></tr><tr><td align="left"><code>void notifyAll()</code></td><td align="left">唤醒在该对象上等待的所有线程</td></tr><tr><td align="left"><strong><code>String toString()</code></strong></td><td align="left"><strong>返回对象的字符串表示形式，建议所有子类重写此方法，自动生成（Alt + insert）</strong></td></tr><tr><td align="left"><code>void wait()</code></td><td align="left">让当前线程进入等待状态。直到其他线程调用此对象的 <code>notify()</code> 方法或 <code>notifyAll()</code> 方法</td></tr><tr><td align="left"><code>void wait(long timeout)</code></td><td align="left">让当前线程处于等待(阻塞)状态，直到其他线程调用此对象的 <code>notify()</code> 方法或 <code>notifyAll()</code> 方法，或者超过参数设置的<code>timeout</code>超时时间</td></tr><tr><td align="left"><code>void wait(long timeout, int nanos)</code></td><td align="left">与 <code>wait(long timeout)</code> 方法类似，多了一个 <code>nanos</code> 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）， 所以超时的时间还需要加上 <code>nanos</code> 纳秒</td></tr></tbody></table><p><strong>注：</strong><code>idea</code>看方法源码，选中方法后 <code>Ctrl + B</code></p><h2 id="四、Arrays"><a href="#四、Arrays" class="headerlink" title="四、Arrays"></a>四、Arrays</h2><p><code>Arrays</code>类包含用于操作数组的各种方法（如排序和搜索），还包含一个静态工厂，可以将数组视为列表，为工具类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static String toString(int[] a)</code></td><td>返回指定数组的内容的字符串表示形式</td></tr><tr><td><code>public static void sort(int[] a)</code></td><td>按照数字顺序排列指定的数组</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>工具类设计思想：</strong></p><ul><li>构造方法用<code>private</code>修饰</li><li>成员用<code>public static</code> 修饰</li></ul><h2 id="五、基本类型包装类"><a href="#五、基本类型包装类" class="headerlink" title="五、基本类型包装类"></a>五、基本类型包装类</h2><p>将基本数组类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>所有的包装类<strong>（Integer、Long、Byte、Double、Float、Short）</strong>都是抽象类 <code>Number</code> 的子类</p><table><thead><tr><th align="left">包装类</th><th align="left">基本数据类型</th></tr></thead><tbody><tr><td align="left">Boolean</td><td align="left">boolean</td></tr><tr><td align="left">Byte</td><td align="left">byte</td></tr><tr><td align="left">Short</td><td align="left">short</td></tr><tr><td align="left"><strong>Integer</strong></td><td align="left"><strong>int</strong></td></tr><tr><td align="left">Long</td><td align="left">long</td></tr><tr><td align="left"><strong>Character</strong></td><td align="left"><strong>char</strong></td></tr><tr><td align="left">Float</td><td align="left">float</td></tr><tr><td align="left">Double</td><td align="left">double</td></tr></tbody></table><p><img src="/2022/03/01/java-zhi-chang-yong-api-pian/OOP_WrapperClass.png"></p><h3 id="1、Integer类"><a href="#1、Integer类" class="headerlink" title="1、Integer类"></a>1、Integer类</h3><p><code>Integer</code>：包装一个对象中的原始类型<code>int</code>的值</p><p><strong>构造方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public static Integer valueOf(int i)</code></td><td>返回表示指定的<code>int</code>值的<code>Integer</code>实例</td></tr><tr><td><code>public static Integer valueOf(String s)</code></td><td>返回一个保存指定值的<code>Integer</code>对象<code>String</code></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出的不是 i1 地址，而是100</span><span class="token comment">// String中不能为非数字的，如"abc"，会报错</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动转换</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">/*上面代码不报错，第一段代码隐含着调用 valueOf 方法第二段代码隐含 intValue() 方法*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Int和String相互转换"><a href="#2、Int和String相互转换" class="headerlink" title="2、Int和String相互转换"></a>2、Int和String相互转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// int --> String</span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 方式一</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> number<span class="token punctuation">;</span><span class="token comment">// 方式二，String 类中的方法（推荐）</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String --> int</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token comment">// 方式一：String --> Integer --> int</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// intValue():返回 Integer 值为 int</span><span class="token comment">// 方式二，Integer 类中的方法（推荐）</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串中数据排序：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"91 27 46 38 50"</span><span class="token punctuation">;</span>        <span class="token comment">/*         split() 方法根据匹配给定的正则表达式来拆分字符串        注意： . 、 $、 | 和 * 等转义字符，必须得加 \\        注意：多个分隔符，可以用 | 作为连字符        */</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArrays <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String数组内容放入int数组中，用 parseInt 转换</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>strArrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strArrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 排序，用 Arrays 中的 sort</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用StringBuilder拼接</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token comment">// StringBuilder转String</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：只要是对象，在使用前就必须进行不为<code>null</code>的判断</strong></p><h2 id="六、日期类"><a href="#六、日期类" class="headerlink" title="六、日期类"></a>六、日期类</h2><h3 id="1、Date"><a href="#1、Date" class="headerlink" title="1、Date"></a>1、Date</h3><p>代表一个特定的时间，精确到毫秒</p><h4 id="①-构造方法"><a href="#①-构造方法" class="headerlink" title="① 构造方法"></a>① 构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Date()</code></td><td align="left">分配一个<code>Date</code>对象，并初始化</td></tr><tr><td align="left"><code>Date(long date)</code></td><td align="left">使用给定的毫秒时间值构造 <code>Date</code>对象，从标准基准时间即1970年1月1日00:00:00 GMT开始</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当前时间</span><span class="token class-name">Date</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="②-常用方法"><a href="#②-常用方法" class="headerlink" title="② 常用方法"></a>② 常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public long getTime()</code></td><td>获取的是日期对象从1970年1月1日00:00:00 GMT到现在的毫秒</td></tr><tr><td><code>public void setTime(long time)</code></td><td>设置时间，给的是毫秒值</td></tr></tbody></table><h3 id="2、SimpleDateFormat"><a href="#2、SimpleDateFormat" class="headerlink" title="2、SimpleDateFormat"></a>2、SimpleDateFormat</h3><p><code>SimpleDateFormat</code>是一个具体的类，用于以区域设置敏感的方式格式化和解析日期，允许格式化（日期→文本），解析（文本→日期）和规范化</p><p><strong>日期和时间格式</strong>由<em>日期和时间模式</em>字符串指定。 在日期和时间模式字符串中，从<code>&#39;A&#39;</code>到<code>&#39;Z&#39;</code>以及从<code>&#39;a&#39;</code>到<code>&#39;z&#39;</code>未加引号的字母被解释为表示日期或时间字符串的组成部分的模式字母。 可以使用单引号（ <code>&#39;</code> ）引用文本以避免解释。<strong>（y：年；M：月；d：日；H：时；m：分；s：秒）</strong></p><h4 id="①-构造方法-1"><a href="#①-构造方法-1" class="headerlink" title="① 构造方法"></a>① 构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>SimpleDateFormat()</code></td><td align="left">构造一个 <code>SimpleDateFormat</code>使用默认模式和日期格式符号默认 <code>FORMAT</code>区域设置。</td></tr><tr><td align="left"><code>SimpleDateFormat(String pattern)</code></td><td align="left">构造一个 <code>SimpleDateFormat</code>使用给定的模式和默认的默认日期格式符号 <code>FORMAT</code>区域设置。</td></tr></tbody></table><h4 id="②-格式化和解析日期"><a href="#②-格式化和解析日期" class="headerlink" title="② 格式化和解析日期"></a>② 格式化和解析日期</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式化（从 Date 到 String）</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span>：将日期格式化成日期<span class="token operator">/</span>时间字符串    <span class="token comment">// 解析（从 String 到 Date）</span><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span>：从给定字符串的开始解析文本以生成日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建日期对象</span><span class="token class-name">Date</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建对象</span><span class="token comment">// 无参构造</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 带参构造</span><span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 格式化，两个 String 输出内容格式不同</span><span class="token class-name">String</span> s <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析，其中 sdf 中的格式要与 String 中的格式一致，否则会报错</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"2022-03-01 11:11:11"</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> d1 <span class="token operator">=</span> sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Calendar"><a href="#3、Calendar" class="headerlink" title="3、Calendar"></a>3、Calendar</h3><p><code>Calendar</code>类是一个抽象类，为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p><h4 id="①-创建Calendar对象"><a href="#①-创建Calendar对象" class="headerlink" title="① 创建Calendar对象"></a>① 创建Calendar对象</h4><p>创建对象的过程对程序员来说是透明的，只需要使用<code>getInstance</code>方法创建即可</p><p><strong>创建一个代表系统当前日期的Calendar对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认是当前日期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>创建一个指定日期的Calendar对象</strong></p><p>使用<code>Calendar</code>类代表特定的时间，需要首先创建一个<code>Calendar</code>的对象，然后再设定该对象中的年月日参数来完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个代表2009年6月12日的Calendar对象</span><span class="token class-name">Calendar</span> c1 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2009</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②-Calendar类对象信息的获得"><a href="#②-Calendar类对象信息的获得" class="headerlink" title="② Calendar类对象信息的获得"></a>② Calendar类对象信息的获得</h4><p>用<code>get()</code>方法获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> c1 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得年份</span><span class="token keyword">int</span> year <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得月份，从 0 开始，所以要 + 1</span><span class="token keyword">int</span> month <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 获得日期 </span><span class="token keyword">int</span> date <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得小时 </span><span class="token keyword">int</span> hour <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得分钟 </span><span class="token keyword">int</span> minute <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得秒 </span><span class="token keyword">int</span> second <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推） </span><span class="token keyword">int</span> day <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③Calendar类对象信息的设置"><a href="#③Calendar类对象信息的设置" class="headerlink" title="③Calendar类对象信息的设置"></a>③Calendar类对象信息的设置</h4><p><strong>Set设置：</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public void set(int field, int value)</code></td><td>将给定的日历字段设置为给定值</td></tr><tr><td><code>public final void set(int year, int month, int date)</code></td><td>设置日历字段的值<code>YEAR</code> ， <code>MONTH</code>和<code>DAY_OF_MONTH</code></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个代表2009年7月12日的 Calendar 对象，月份从0开始</span><span class="token class-name">Calendar</span> c1 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2009</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置日期为 10 号，其它所有的数值会被重新计算</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置年份为 2008 年，其它所有的数值会被重新计算</span>c1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2008</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其他字段属性set的意义以此类推</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Add设置：</strong></p><p><strong><code>public abstract void add(int field,int value)</code>：将指定的时间量添加或减去给定的日历字段</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</span>c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</span>c1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其他字段属性的add的意义以此类推</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例：某年的二月份有多少天</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 键盘输入年份</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置日历对象</span><span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 推前一天，为2月份最后一天</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取这一天</span><span class="token keyword">int</span> date <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年的2月份有"</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之面向对象基础篇三</title>
      <link href="/2022/02/28/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-san/"/>
      <url>/2022/02/28/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-san/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之面向对象基础篇三"><a href="#Java之面向对象基础篇三" class="headerlink" title="Java之面向对象基础篇三"></a>Java之面向对象基础篇三</h1><h2 id="一、多态"><a href="#一、多态" class="headerlink" title="一、多态"></a>一、多态</h2><p>多态：同一个对象在不同时刻表现出来的不同形态</p><h3 id="1、多态的前提和体现"><a href="#1、多态的前提和体现" class="headerlink" title="1、多态的前提和体现"></a>1、多态的前提和体现</h3><ul><li><p>有继承/实现关系</p></li><li><p>有方法重写</p></li><li><p>有父类引用指向子类对象，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Parent</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2、成员访问特点"><a href="#2、成员访问特点" class="headerlink" title="2、成员访问特点"></a>2、成员访问特点</h3><ul><li><strong>成员变量：</strong>编译看左边，执行看左边，即编译和执行都找父类中的变量</li><li><strong>成员方法：</strong>编译看左边，执行看右边，即编译找父类中有无方法，执行时执行子类中的同名方法</li></ul><h3 id="3、好处和弊端"><a href="#3、好处和弊端" class="headerlink" title="3、好处和弊端"></a>3、好处和弊端</h3><ul><li><strong>好处：</strong>提高了程序的扩展性。定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作</li><li><strong>弊端：</strong>不能使用子类的特有功能</li></ul><h3 id="4、多态中的转型"><a href="#4、多态中的转型" class="headerlink" title="4、多态中的转型"></a>4、多态中的转型</h3><ul><li><strong>向上转型：</strong>从子到父，父类引用指向子类对象</li><li><strong>向下转型：</strong>从父到子，父类引用转为子类对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 向上转型</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向下转型</span><span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>转型内存图</strong></p><p><img src="/2022/02/28/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-san/image-20220228211421511.png"></p><h2 id="二、抽象类"><a href="#二、抽象类" class="headerlink" title="二、抽象类"></a>二、抽象类</h2><p>在<code>java</code>中，一个<strong>没有方法体的方法</strong>应该定义为<strong>抽象方法</strong>，而类中如果有抽象方法，该类必须定义为<strong>抽象类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 抽象方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 普通方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 子类必须重写父类的抽象方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用多态的方式实例化抽象类</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 吃</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、抽象类特点"><a href="#1、抽象类特点" class="headerlink" title="1、抽象类特点"></a>1、抽象类特点</h3><ul><li><strong>抽象类不能被实例化</strong>(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。<strong>只有抽象类的非抽象子类可以创建对象。可以用多态的方式实例化</strong></li><li>抽象类中不一定包含抽象方法，但是<strong>有抽象方法的类必定是抽象类</strong></li><li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能</li><li><strong>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法</strong></li><li><strong>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类</strong></li><li>抽象类和抽象方法必须使用<code>abstract</code>关键字修饰</li></ul><h3 id="2、抽象类成员特点"><a href="#2、抽象类成员特点" class="headerlink" title="2、抽象类成员特点"></a>2、抽象类成员特点</h3><ul><li><strong>成员变量：</strong>可以是变量，可以是被<code>final</code>修饰的常量</li><li><strong>构造方法：</strong>有构造方法，但不能实例化，构造方法用于子类访问父类数据的初始化</li><li><strong>成员方法：</strong>有抽象方法，限定子类必须完成某些动作；有非抽象方法，提高代码复用性</li></ul><h2 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h2><p>接口就是一种<strong>公共的规范标准</strong>，只要符合规范标准，大家都可以通用</p><p><code>Java</code>中的接口更多的体现在<strong>对行为的抽象</strong></p><h3 id="1、接口的特点"><a href="#1、接口的特点" class="headerlink" title="1、接口的特点"></a>1、接口的特点</h3><ul><li><p>接口用关键字<code>interface</code>修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 例子</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Jumping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类实现接口用<code>implements</code>表示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 例子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Jumping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跳"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口不能实例化，但可以通过类对象实例化，叫接口多态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Jumping</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>接口的<strong>实现类</strong>要么重写接口中所有的抽象方法，要么是抽象类</p></li></ul><h3 id="2、接口的成员特点"><a href="#2、接口的成员特点" class="headerlink" title="2、接口的成员特点"></a>2、接口的成员特点</h3><ul><li>接口中<strong>成员方法</strong>是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 <code>public abstract</code>，其他修饰符都会报错）</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量，即<strong>默认是常量</strong>（并且只能是 <code>public</code>，用 <code>private</code> 修饰会报编译错误）</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法</li><li><strong>接口没有构造方法</strong></li></ul><p><strong>注</strong>：</p><ul><li><p><code>JDK 1.8</code> 以后，<strong>接口允许包含具体实现的方法</strong>，该方法称为”默认方法”，默认方法使用 <code>default</code> 关键字修饰</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认方法，有方法体，不强制重写，但可以在实现类重写，不过要去掉 default</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态方法，有方法体，只能通过接口名调用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span><span class="token punctuation">&#125;</span>接口名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>JDK 1.9</code> 以后，允许将方法定义为 <code>private</code>，使得某些复用的代码不会把方法暴露出去</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 括号表示可以加，加了就为私有静态方法</span><span class="token keyword">private</span> <span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、类和接口的关系"><a href="#3、类和接口的关系" class="headerlink" title="3、类和接口的关系"></a>3、类和接口的关系</h3><p>类描述对象的属性和方法，接口则包含类要实现的方法。</p><ul><li>类和类的关系：继承关系，只能单继承，但可以多重继承</li><li>类和接口的关系：实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li><li>接口和接口的关系：继承关系，可以单继承，也可以多继承</li></ul><h3 id="4、抽象类和接口的区别"><a href="#4、抽象类和接口的区别" class="headerlink" title="4、抽象类和接口的区别"></a>4、抽象类和接口的区别</h3><ul><li><strong>抽象类中的方法可以有方法体</strong>，就是能实现方法的具体功能，但是接口中的方法不行</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口</li><li>抽象类是对事物的抽象，接口是对行为的抽象</li></ul><p><strong>快捷键：</strong><code>idea</code>生成构造方法的快捷键是<code>Alt+Insert</code></p><h2 id="四、内部类"><a href="#四、内部类" class="headerlink" title="四、内部类"></a>四、内部类</h2><p><strong>内部类：</strong>在一个类中定义一个类</p><p><strong>定义格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span> <span class="token comment">// 外部类</span>修饰符 <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span>  <span class="token comment">// 内部类</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按照内部类在类中定义的位置不同，<strong>分为如下两种形式：</strong></p><ul><li>在类的成员位置：成员内部类</li><li>在类的局部位置（方法中定义的类）：局部内部类</li></ul><h3 id="1、内部类的访问特点"><a href="#1、内部类的访问特点" class="headerlink" title="1、内部类的访问特点"></a>1、内部类的访问特点</h3><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类成员，必须创建对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接访问</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 报错，外部类无法访问内部类</span>                <span class="token comment">// 创建对象调用</span>        <span class="token class-name">Inner</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、成员内部类"><a href="#2、成员内部类" class="headerlink" title="2、成员内部类"></a>2、成员内部类</h3><p>成员内部类，外界如何创建对象使用</p><p><strong>格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">外部类名<span class="token punctuation">.</span>内部类名 对象名 <span class="token operator">=</span> 外部类对象<span class="token punctuation">.</span>内部类对象<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 创建内部类对象，并调用方法</span>    <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>还有另外一种形式（常用）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 成员内部类，当将内部类设为 private</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接访问</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 用方法对内部类调用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Inner</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过创建外部类，调用方法实现</span>    <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、局部内部类"><a href="#3、局部内部类" class="headerlink" title="3、局部内部类"></a>3、局部内部类</h3><p>局部内部类是在方法中定义的类，外界无法使用，需要在方法内部创建对象并使用，可以直接访问外部类的成员，也可以访问方法内的局部变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                <span class="token comment">// 局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 在方法中创建对象调用</span>        <span class="token class-name">Inner</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过创建外部类，调用方法实现</span>    <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、匿名内部类"><a href="#4、匿名内部类" class="headerlink" title="4、匿名内部类"></a>4、匿名内部类</h3><p><strong>前提：</strong>存在一个类或者接口，类可以是具体类或者抽象类</p><p><strong>格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> 类名或者接口名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>重写方法<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 匿名内部类</span><span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用类中 show 方法</span><span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Inter</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>本质：是一个继承了该类或者实现了该接口的子类匿名对象</strong>，是局部内部类的特殊形式</p><p><strong>标准形式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 外部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 匿名内部类</span>        <span class="token class-name">Inter</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 通过创建外部类，调用方法实现</span>    <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之面向对象基础篇二</title>
      <link href="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/"/>
      <url>/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之面向对象基础篇二"><a href="#Java之面向对象基础篇二" class="headerlink" title="Java之面向对象基础篇二"></a>Java之面向对象基础篇二</h1><h2 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h2><p><strong>继承</strong>是<code>java</code>面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><p><strong>继承</strong>就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为，也可以在子类中重新定义，追加属性和方法。</p><h3 id="1、继承的格式"><a href="#1、继承的格式" class="headerlink" title="1、继承的格式"></a>1、继承的格式</h3><p>在 <code>Java</code> 中通过 <code>extends</code> 关键字可以申明一个类是从另外一个类继承而来的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/*父类也被称为基类、超类子类也被称为派生类子类可以有父类的内容，还可以有自己特有的内容*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、继承的好处和弊端"><a href="#2、继承的好处和弊端" class="headerlink" title="2、继承的好处和弊端"></a>2、继承的好处和弊端</h3><p><strong>好处：</strong></p><ul><li>提高代码的复用性（多个类相同的成员可以放到同一个类中）</li><li>提高代码的维护性（如果方法的代码需要修改，修改一处即可）</li></ul><p><strong>弊端：</strong></p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li></ul><p><strong>什么时候使用继承</strong></p><ul><li>继承体现的关系：<strong>is a</strong></li><li>假设法：若有两个类 A 和 B ，如果满足 A 是 B 的一种，或者 B 是 A 的一种，就说明存在继承关系</li></ul><h3 id="3、继承的类型"><a href="#3、继承的类型" class="headerlink" title="3、继承的类型"></a>3、继承的类型</h3><p> <strong><code>Java</code> 不支持多继承，但支持多重继承</strong></p><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/java-extends-2020-12-08-16459688766032.png"></p><h3 id="4、继承中变量的访问特点"><a href="#4、继承中变量的访问特点" class="headerlink" title="4、继承中变量的访问特点"></a>4、继承中变量的访问特点</h3><p>在子类方法中访问变量</p><ul><li>子类局部范围找，即方法内部找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>若没有就报错</li></ul><h3 id="5、继承关键字"><a href="#5、继承关键字" class="headerlink" title="5、继承关键字"></a>5、继承关键字</h3><p>继承可以使用 <code>extends</code> 和 <code>implements</code> 这两个关键字来实现继承，而且所有的类都是继承于 <code>java.lang.Object</code>，当一个类没有继承的两个关键字，则默认继承<code>object</code>（这个类在 <code>java.lang</code> 包中，所以不需要 <code>import</code>）祖先类</p><h4 id="①-extends关键字"><a href="#①-extends关键字" class="headerlink" title="① extends关键字"></a>① extends关键字</h4><p>在 <code>Java</code> 中，类的继承是<strong>单一继承</strong>，也就是说，一个子类只能拥有一个父类，所以 <code>extends</code> 只能继承一个类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-implements关键字"><a href="#②-implements关键字" class="headerlink" title="② implements关键字"></a>② implements关键字</h4><p>使用 <code>implements</code> 关键字可以变相的使<code>java</code>具有多继承的特性，使用范围为<strong>类继承接口</strong>的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-super与this关键字"><a href="#③-super与this关键字" class="headerlink" title="③ super与this关键字"></a>③ super与this关键字</h4><p><code>super</code>关键字：可以通过<code>super</code>关键字来实现对父类成员的访问，用来<strong>引用当前对象的父类</strong></p><p><code>this</code>关键字：<strong>指向自己的引用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// this 调用自己的方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// super 调用父类方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token comment">// 访问本类成员变量</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment">// 访问父类成员变量</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④-final关键字"><a href="#④-final关键字" class="headerlink" title="④ final关键字"></a>④ final关键字</h4><p><code>final</code> 关键字声明类可以把类定义为<strong>不能继承的</strong>，即最终类；或者用于修饰方法，该方法<strong>不能被子类重写</strong></p><ul><li><p>声明类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span><span class="token comment">//类体&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符<span class="token punctuation">(</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span><span class="token keyword">protected</span><span class="token punctuation">)</span> <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>注</strong>:实例变量也可以被定义为 <code>final</code>，被定义为 <code>final</code> 的变量不能被修改。被声明为 <code>final</code> 类的方法自动地声明为 <code>final</code>，但是实例变量并不是 <code>final</code></p><h3 id="6、构造器"><a href="#6、构造器" class="headerlink" title="6、构造器"></a>6、构造器</h3><ul><li><strong>子类是不继承父类的构造器</strong>（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果<strong>父类的构造器带有参数</strong>，则必须在子类的构造器中显式地通过 <code>super</code> 关键字调用父类的构造器并配以适当的参数列表。</li><li>如果<strong>父类构造器没有参数</strong>，则在子类的构造器中不需要使用 <code>super</code> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</li><li>子类中所有的构造方法<strong>默认都会访问父类中无参的构造方法</strong>，若要访问带参，则需要显式地通过 <code>super</code> 关键字调用父类的构造器</li><li>每一个子类的构造方法的第一条语句默认都是：<code>super()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass(int n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SubClass 类继承</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 自动调用父类的无参数构造器</span>    <span class="token comment">// super(); 默认会有，不用写</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用父类中带有参数的构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass(int n):"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SubClass2 类继承</span><span class="token keyword">class</span> <span class="token class-name">SubClass2</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token class-name">SubClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用父类中带有参数的构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">SubClass2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 自动调用父类的无参数构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass2(int n):"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、继承中成员方法的访问特点"><a href="#7、继承中成员方法的访问特点" class="headerlink" title="7、继承中成员方法的访问特点"></a>7、继承中成员方法的访问特点</h3><p>通过子类对象访问一个方法</p><ul><li><p>子类成员范围找</p></li><li><p>父类成员范围找</p></li><li><p>若没有就报错</p></li></ul><h2 id="二、方法重写和重载"><a href="#二、方法重写和重载" class="headerlink" title="二、方法重写和重载"></a>二、方法重写和重载</h2><h3 id="1、重写"><a href="#1、重写" class="headerlink" title="1、重写"></a>1、重写</h3><p>重写是<strong>子类对父类的允许访问的方法的实现过程进行重新编写</strong>, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong>沿袭父类的功能，又定义了子类的特有内容</p><p>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物可以移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 加注解，检查重写方法的方法声明的正确性</span>   <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以跑和走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以吠叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDog</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Animal 对象</span>      <span class="token class-name">Animal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dog 对象</span>       a<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 Animal 类的方法</span>      b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 Dog 类的方法，重写</span>      b<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，b 的引用类型 Animal 没有 bark 方法</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><ul><li>参数列表与被重写方法的<strong>参数列表必须完全相同</strong></li><li>返回类型与被重写方法的<strong>返回类型</strong>可以不相同，但是必须是父类返回值的派生类（<code>java5</code> 及更早版本返回类型要一样，<code>java7</code> 及更高版本可以不同）</li><li><strong>访问权限</strong>不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 <code>public</code>，那么在子类中重写该方法就不能声明为 <code>protected</code>（<code>public</code> &gt; 默认 &gt; <code>private</code>）</li><li>父类的成员方法只能被它的子类重写</li><li>声明为 <code>final</code> 的方法不能被重写</li><li>声明为 <code>static</code> 的方法不能被重写，但是能够被再次声明</li><li>子类和父类在<strong>同一个包</strong>中，那么子类可以重写父类所有方法，<strong>除了声明为 <code>private</code> 和 <code>final</code> 的方法</strong></li><li>子类和父类<strong>不在同一个包</strong>中，那么子类<strong>只能够重写父类的声明为 <code>public</code> 和 <code>protected</code> 的非 <code>final</code> 方法</strong></li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法<strong>不能抛出新的强制性异常</strong>，或者比被重写方法声明的更广泛的强制性异常，反之则可以。例如：父类的一个方法申明了一个检查异常 <code>IOException</code>，但是在重写这个方法的时候不能抛出 <code>Exception</code> 异常，因为 <code>Exception</code> 是 <code>IOException</code> 的父类，抛出 <code>IOException</code> 异常或者 <code>IOException</code> 的子类异常。</li><li><strong>构造方法不能被重写</strong></li><li>如果不能继承一个类，则不能重写该类的方法</li></ul><h3 id="2、重载"><a href="#2、重载" class="headerlink" title="2、重载"></a>2、重载</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而<strong>参数不同</strong>。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p><strong>最常用的地方就是构造器的重载</strong></p><p><strong>重载规则:</strong></p><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型</li><li>被重载的方法可以改变访问修饰符</li><li>被重载的方法可以声明新的或更广的检查异常</li><li>方法能够在同一个类中或者在一个子类中被重载</li><li>无法以返回值类型作为重载函数的区分标准</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overloading</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//以下两个参数类型顺序不同</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"returntest3"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"returntest4"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Overloading</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Overloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、重写与重载之间的区别"><a href="#3、重写与重载之间的区别" class="headerlink" title="3、重写与重载之间的区别"></a>3、重写与重载之间的区别</h3><table><thead><tr><th align="center">区别点</th><th align="center">重载方法</th><th align="center">重写方法</th></tr></thead><tbody><tr><td align="center">参数列表</td><td align="center">必须修改</td><td align="center">一定不能修改</td></tr><tr><td align="center">返回类型</td><td align="center">可以修改</td><td align="center">一定不能修改</td></tr><tr><td align="center">异常</td><td align="center">可以修改</td><td align="center">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="center">访问</td><td align="center">可以修改</td><td align="center">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>方法的重写(<code>Overriding</code>)和重载(<code>Overloading</code>)是<code>java</code>多态性的不同表现，<strong>重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</strong></p><ul><li>方法重载是一个类中定义了多个方法名相同，而他们的参数的数量不同或数量相同而类型和次序不同，则称为方法的重载(Overloading)。</li><li>方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样，返回值也一样的方法，就称为重写(Overriding)。</li><li>方法重载是一个类的多态性表现，而方法重写是子类与父类的一种多态性表现。</li></ul><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/overloading-vs-overriding.png"></p><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/20171102-1.png"></p><h2 id="三、包（package）"><a href="#三、包（package）" class="headerlink" title="三、包（package）"></a>三、包（package）</h2><h3 id="1、包的作用"><a href="#1、包的作用" class="headerlink" title="1、包的作用"></a>1、包的作用</h3><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用，对类进行分类管理</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以<strong>避免名字冲突</strong></li><li>包也限定了<strong>访问权限</strong>，拥有包访问权限的类才能访问某个包中的类</li></ul><p><code>Java</code> 使用包（<code>package</code>）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（<code>class</code>）、接口、枚举（<code>enumerations</code>）和注释（<code>annotation</code>）等。</p><h3 id="2、import-关键字"><a href="#2、import-关键字" class="headerlink" title="2、import 关键字"></a>2、import 关键字</h3><p>为了能够使用某一个包的成员，我们需要在 <code>Java</code> 程序中明确导入该包。使用 “<code>import</code>“ 语句可完成此功能。</p><p>在 <code>java</code> 源文件中 <code>import</code> 语句应位于 <code>package</code> 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">package1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>package2…<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname<span class="token operator">|</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果在一个包中，一个类想要使用本包中的另一个类，那么该包名可以省略</p><h2 id="四、修饰符"><a href="#四、修饰符" class="headerlink" title="四、修饰符"></a>四、修饰符</h2><h3 id="1、权限修饰符"><a href="#1、权限修饰符" class="headerlink" title="1、权限修饰符"></a>1、权限修饰符</h3><p><code>Java</code>中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。<code>Java</code> 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">子孙类(同一包)</th><th align="center">子孙类(不同包)</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code>protected</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y/N</td><td align="center">N</td></tr><tr><td align="center"><code>default</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><code>private</code></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><p><code>protected</code> 需要从以下两个点来分析说明：</p><ul><li><p><strong>子类与基类在同一包中</strong>：被声明为 <code>protected</code> 的变量、方法和构造器能被同一个包中的任何其他类访问；</p></li><li><p><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 <code>protected</code> 方法，而不能访问基类实例的<code>protected</code>方法。</p></li><li><p><strong>接口</strong>及接口的成员变量和成员方法<strong>不能</strong>声明为 <code>protected</code></p></li></ul><h3 id="2、非访问修饰符"><a href="#2、非访问修饰符" class="headerlink" title="2、非访问修饰符"></a>2、非访问修饰符</h3><ul><li><code>static</code> 修饰符，用来修饰类方法和类变量</li><li><code>final</code> 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的</li></ul><h4 id="①-final修饰符"><a href="#①-final修饰符" class="headerlink" title="① final修饰符"></a>① final修饰符</h4><p><code>final</code> 表示”最后的、最终的”含义，变量一旦赋值后，<strong>不能被重新赋值</strong>。被 <code>final</code> 修饰的实例变量必须显式指定初始值。</p><p><code>final</code> 修饰符通常和 <code>static</code> 修饰符一起使用来<strong>创建类常量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// final 修饰基本类型变量</span><span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">// 报错，final 修饰的变量不能重新赋值</span><span class="token comment">// final 修饰引用类型变量</span><span class="token keyword">final</span> <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">// 正确，修饰的是 s，只是地址值不变，内容可改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>final 方法</strong></p><p>父类中的 <code>final</code> 方法可以被子类继承，但是不能被子类重写</p><p>声明 <code>final</code> 方法的主要目的是<strong>防止该方法的内容被修改</strong></p><p>如下所示，使用 <code>final</code> 修饰符声明方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 方法体    &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final 类</strong></p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 类体 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②-static修饰符"><a href="#②-static修饰符" class="headerlink" title="② static修饰符"></a>② static修饰符</h4><ul><li><p><strong>静态变量：</strong></p><p><code>static</code> 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 <strong>静态变量也被称为类变量</strong>。<strong>局部变量</strong>不能被声明为 <code>static</code> 变量</p></li><li><p><strong>静态方法：</strong></p><p><code>static</code> 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据</p></li></ul><p><strong>特点：</strong></p><ul><li><p>被类的所有对象共享</p></li><li><p>可以通过类名调用，也可以通过对象名调用，<strong>推荐使用类名调用</strong></p></li><li><p>静态成员方法只能访问静态成员</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之二叉树篇</title>
      <link href="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/"/>
      <url>/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、深入了解前中后序"><a href="#一、深入了解前中后序" class="headerlink" title="一、深入了解前中后序"></a>一、深入了解前中后序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 迭代遍历数组 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 递归遍历数组 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span><span class="token punctuation">&#125;</span><span class="token comment">/* 迭代遍历单链表 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 递归遍历单链表 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单链表和数组的遍历可以是迭代的，也可以是递归的，二叉树这种结构无非就是二叉链表，不过没办法简单改写成迭代形式，所以一般说二叉树的遍历框架都是指递归的形式。</p><p><strong>倒序打印</strong>一条单链表上所有节点的值，实现方式有很多，如果对递归的理解足够透彻，<strong>可以利用后序位置</strong>，在后序位置添加输出代码即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 递归遍历单链表，倒序打印链表元素 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点</strong>，绝不仅仅是三个顺序不同的 List：</p><ul><li>前序位置的代码在刚刚进入一个二叉树节点的时候执行</li><li>后序位置的代码在将要离开一个二叉树节点的时候执行</li><li>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行</li></ul><p>画成图，前中后序三个位置在二叉树上是这样：</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225150418112.png"></p><p><strong>每个节点都有「唯一」属于自己的前中后序位置，二叉树的所有问题，就是让你在前中后序位置注入巧妙的代码逻辑，去达到自己的目的</strong>。</p><p>遇到一道二叉树的题目时的通用思考过程是：</p><p><strong>是否可以通过遍历一遍二叉树得到答案？如果不能的话，是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong></p><h3 id="1、后序位置的特殊之处"><a href="#1、后序位置的特殊之处" class="headerlink" title="1、后序位置的特殊之处"></a>1、后序位置的特殊之处</h3><p>和前序位置对比，前序位置的代码执行是自顶向下的，而后序位置的代码执行是自底向上的，<strong>意味着前序位置的代码只能从函数参数中获取父节点传递来的数据，而后序位置的代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据</strong>。</p><p>关于前后序的对比可以就两个问题来回答</p><ol><li>如果把根节点看做第 1 层，如何打印出每一个节点所在的层数？</li><li>如何打印出每个节点的左右子树各有多少节点？</li></ol><p><strong>问题一：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二叉树遍历函数</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"节点 %s 在第 %d 层"</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这样调用</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题二：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义：输入一棵二叉树，返回这棵二叉树的节点总数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> leftCount <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightCount <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"节点 %s 的左子树有 %d 个节点，右子树有 %d 个节点"</span><span class="token punctuation">,</span>            root<span class="token punctuation">,</span> leftCount<span class="token punctuation">,</span> rightCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftCount <span class="token operator">+</span> rightCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>后序位置的特点</strong>，只有后序位置才能通过返回值获取子树的信息。</p><p><strong>换句话说，一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225152117374.png"></p><p>所谓二叉树的「直径」长度，就是任意两个结点之间的路径长度。</p><p>解决这题的关键在于，<strong>每一条二叉树的「直径」长度，就是一个节点的左右子树的最大深度之和</strong>。</p><p>用后序位置思路考虑的代码编写解法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 记录最大直径的长度</span><span class="token keyword">int</span> maxDiameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxDiameter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 后序位置顺便计算最大直径</span>    <span class="token comment">// 将每个节点最大直径(左子树深度+右子树深度)当前最大值比较并取大者</span>    maxDiameter <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDiameter<span class="token punctuation">,</span> left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回节点深度</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、层序遍历"><a href="#2、层序遍历" class="headerlink" title="2、层序遍历"></a>2、层序遍历</h3><p>二叉树题型主要是用来培养递归思维的，而层序遍历属于迭代遍历，其代码框架</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入一棵二叉树的根节点，层序遍历这棵二叉树</span><span class="token keyword">void</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从上到下遍历二叉树的每一层</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从左到右遍历每一层的每个节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将下一层节点放入队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中<code>while</code> 循环和 <code>for</code> 循环分管从上到下和从左到右的遍历</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225153218933.png"></p><p><code>BFS</code>（宽度优先搜索算法）就是从二叉树的层次遍历扩展出来，常用于求无权图的<strong>最短路径</strong>问题</p><h2 id="二、刷题第一期"><a href="#二、刷题第一期" class="headerlink" title="二、刷题第一期"></a>二、刷题第一期</h2><h3 id="1、写递归算法的秘诀"><a href="#1、写递归算法的秘诀" class="headerlink" title="1、写递归算法的秘诀"></a>1、写递归算法的秘诀</h3><p><strong>写递归算法的关键是要明确函数的「定义」是什么，然后相信这个定义，利用这个定义推导最终结果，绝不要跳入递归的细节</strong>。</p><p><strong>写树相关的算法，简单说就是，先搞清楚当前 <code>root</code> 节点「该做什么」以及「什么时候做」，然后根据函数定义递归调用子节点</strong>，递归调用会让孩子节点做相同的事情。</p><ul><li>所谓「该做什么」就是让你想清楚写什么代码能够实现题目想要的效果</li><li>所谓「什么时候做」，就是让你思考这段代码到底应该写在前序、中序还是后序遍历的代码位置上。</li></ul><h3 id="2、实践"><a href="#2、实践" class="headerlink" title="2、实践"></a>2、实践</h3><h4 id="①-翻转二叉树"><a href="#①-翻转二叉树" class="headerlink" title="① 翻转二叉树"></a>① 翻转二叉树</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225160008164.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将整棵树的节点翻转</span><span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// base case</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**** 前序遍历位置 ****/</span>    <span class="token comment">// root 节点需要交换它的左右子节点</span>    <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// 让左右子节点继续翻转它们的子节点</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*如果把交换左右子节点的代码复制粘贴到后序遍历的位置也是可以的，但是直接放到中序遍历的位置是不行的*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他解法（前中后层序）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用前序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 先序遍历--从顶向下交换</span>        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 保存右子树</span>            <span class="token class-name">TreeNode</span> rightTree <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token comment">// 交换左右子树的位置</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>rightTree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 利用中序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归找到左节点</span>            <span class="token class-name">TreeNode</span> rightNode<span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 保存右节点</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token comment">// 递归找到右节点 继续交换 : 因为此时左右节点已经交换了,所以此时的右节点为root.left</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 后序遍历-- 从下向上交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> leftNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> rightNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 利用层次遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 层次遍历--直接左右交换即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TreeNode</span> rightTree <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> rightTree<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-填充二叉树节点的右侧指针"><a href="#②-填充二叉树节点的右侧指针" class="headerlink" title="② 填充二叉树节点的右侧指针"></a>② 填充二叉树节点的右侧指针</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225160656228.png"></p><p><strong>二叉树的问题难点在于，如何把题目的要求细化成每个节点需要做的事情</strong>，对于这一题，如果只依赖一个节点的话，肯定是没办法连接「跨父节点」的两个相邻节点的。解法就是增加函数参数，一个节点做不到，就给他安排两个节点，「将每一层二叉树节点连接起来」可以细化成「将每两个相邻节点都连接起来」：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主函数</span><span class="token class-name">Node</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 辅助函数</span><span class="token keyword">void</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node1<span class="token punctuation">,</span> <span class="token class-name">Node</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**** 前序遍历位置 ****/</span>    <span class="token comment">// 将传入的两个节点连接</span>    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>        <span class="token comment">// 连接相同父节点的两个子节点</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接跨越父节点的两个子节点</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-二叉树展开为链表"><a href="#③-二叉树展开为链表" class="headerlink" title="③ 二叉树展开为链表"></a>③ 二叉树展开为链表</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225210956086.png"></p><p>在还没操作节点右子树前，不能破坏该节点的右子树指向。所以采用后序遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义：将以 root 为根的树拉平为链表</span><span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// base case</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**** 后序遍历位置 ****/</span>    <span class="token comment">// 此时左右子树已经被拉平成一条链表</span>    <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">// 将左子树作为右子树</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 将原先的右子树接到当前右子树的末端</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225212402462.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之集合篇</title>
      <link href="/2022/02/14/java-zhi-ji-he-pian/"/>
      <url>/2022/02/14/java-zhi-ji-he-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p><code>ArrayList</code> 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，可以添加或删除元素。</p><p><code>ArrayList</code> 继承了 <code>AbstractList</code> ，并实现了 <code>List</code> 接口。</p><p><code>ArrayList</code> 类位于 <code>java.util</code> 包中，使用前需要引入它，<strong>语法格式如下</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 引入 ArrayList 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span> <span class="token comment">// 初始化</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> objectName <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　 <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>E</strong>： 泛型数据类型，用于设置 <code>objectName</code> 的数据类型，<strong>只能为引用数据类型</strong></li><li><strong>objectName</strong>: 对象名</li></ul><p><code>ArrayList</code> 中的元素实际上是对象，除<code>String</code>类型外， 要存储其他类型，而 <code>E</code> 只能为引用数据类型，这时就需要使用到基本类型的包装类。</p><p><strong>基本类型对应的包装类表</strong>如下：</p><table><thead><tr><th align="left">基本类型</th><th align="left">引用类型</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr></tbody></table><p>此外，<code>BigInteger</code>、<code>BigDecimal</code> 用于高精度的运算，<code>BigInteger</code> 支持任意精度的整数，也是引用类型，但它们没有相对应的基本类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 存放整数元素</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> li<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存放字符元素</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> li<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>ArrayList()</code></td><td align="left">构造一个初始容量为10的空列表</td></tr><tr><td align="left"><code>ArrayList(int initialCapacity)</code></td><td align="left">构造具有指定初始容量的空列表</td></tr><tr><td align="left"><code>ArrayList(Collection&lt;? extends E&gt; c)</code></td><td align="left">按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表</td></tr></tbody></table><h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><p>常用方法列表如下：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong><code>add()</code></strong></td><td align="left"><strong>将元素插入到指定位置的 <code>arraylist</code> 中</strong></td></tr><tr><td align="left"><code>addAll()</code></td><td align="left">添加集合中的所有元素到 <code>arraylist</code> 中</td></tr><tr><td align="left"><code>clear()</code></td><td align="left">删除 <code>arraylist</code> 中的所有元素</td></tr><tr><td align="left"><code>clone()</code></td><td align="left">复制一份 <code>arraylist</code></td></tr><tr><td align="left"><code>contains()</code></td><td align="left">判断元素是否在 <code>arraylist</code></td></tr><tr><td align="left"><strong><code>get()</code></strong></td><td align="left"><strong>通过索引值获取 <code>arraylist</code> 中的元素</strong></td></tr><tr><td align="left"><code>indexOf()</code></td><td align="left">返回 <code>arraylist</code> 中元素的索引值</td></tr><tr><td align="left"><code>removeAll()</code></td><td align="left">删除存在于指定集合中的 <code>arraylist</code> 里的所有元素</td></tr><tr><td align="left"><strong><code>remove()</code></strong></td><td align="left"><strong>删除 <code>arraylist</code> 里的单个元素</strong></td></tr><tr><td align="left"><strong><code>size()</code></strong></td><td align="left"><strong>返回 <code>arraylist</code> 里元素数量</strong></td></tr><tr><td align="left"><code>isEmpty()</code></td><td align="left">判断 <code>arraylist</code> 是否为空</td></tr><tr><td align="left"><code>subList()</code></td><td align="left">截取部分 <code>arraylist</code> 的元素</td></tr><tr><td align="left"><strong><code>set()</code></strong></td><td align="left"><strong>替换 <code>arraylist</code> 中指定索引的元素</strong></td></tr><tr><td align="left"><code>sort()</code></td><td align="left">对 <code>arraylist</code> 元素进行排序</td></tr><tr><td align="left"><code>toArray()</code></td><td align="left">将 <code>arraylist</code> 转换为数组</td></tr><tr><td align="left"><code>toString()</code></td><td align="left">将 <code>arraylist</code> 转换为字符串</td></tr><tr><td align="left"><code>ensureCapacity()</code></td><td align="left">设置指定容量大小的 <code>arraylist</code></td></tr><tr><td align="left"><code>lastIndexOf()</code></td><td align="left">返回指定元素在 <code>arraylist</code> 中最后一次出现的位置</td></tr><tr><td align="left"><code>retainAll()</code></td><td align="left">保留 <code>arraylist</code> 中在指定集合中也存在的那些元素</td></tr><tr><td align="left"><code>containsAll()</code></td><td align="left">查看 <code>arraylist</code> 是否包含指定集合中的所有元素</td></tr><tr><td align="left"><code>trimToSize()</code></td><td align="left">将 <code>arraylist</code> 中的容量调整为数组中的元素个数</td></tr><tr><td align="left"><code>removeRange()</code></td><td align="left">删除 <code>arraylist</code> 中指定索引之间存在的元素</td></tr><tr><td align="left"><code>replaceAll()</code></td><td align="left">将给定的操作内容替换掉数组中每一个元素</td></tr><tr><td align="left"><code>removeIf()</code></td><td align="left">删除所有满足特定条件的 <code>arraylist</code> 元素</td></tr><tr><td align="left"><code>forEach()</code></td><td align="left">遍历 <code>arraylist</code> 中每一个元素并执行特定操作</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 引入 ArrayList 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">// 引入 Collections 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构造方法，创建空的集合，sites:[]</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素，sites:[Taobao]</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 追加指定元素到集合末尾，sites:[Taobao,Weibo]</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Weibo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 指定位置插入，sites:[Google,Taobao,Weibo]，索引不能越界</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 访问第二个元素</span>        sites<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token comment">// 修改元素，第一个参数为索引位置，第二个为要修改的值，sites[Google,Wiki,Weibo]</span>        sites<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Wiki"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 根据索引删除。删除第三个元素</span>        sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 删除指定元素</span>        sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Wiki"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 集合元素数量</span>        sites<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、sort-方法"><a href="#4、sort-方法" class="headerlink" title="4、sort() 方法"></a>4、<strong>sort() 方法</strong></h4><p><code>sort()</code> 方法根据指定的顺序对动态数组中的元素进行排序。</p><p><code>sort()</code> 方法的语法为：</p><pre class="line-numbers language-none"><code class="language-none">arraylist.sort(Comparator c)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：</strong><code>arraylist</code> 是 <code>ArrayList</code> 类的一个对象。</p><p><strong>参数说明：</strong></p><ul><li><code>comparator</code> - 顺序方式</li></ul><p><strong>返回值</strong></p><p><code>sort()</code> 方法不返回任何值，它只是更改动态数组列表中元素的顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> myNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 元素进行升序排列，在此，Java Comparator 接口的 naturalOrder() 方法指定元素以自然顺序（升序）排序</span>sites<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">naturalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 降序</span>sites<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照特定值排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字母排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数字排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、集合存储对象并遍历"><a href="#5、集合存储对象并遍历" class="headerlink" title="5、集合存储对象并遍历"></a>5、集合存储对象并遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 方法调用</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 键盘输入</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合中添加对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Alt + insert</code>：快速构建构造函数</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之字符串篇</title>
      <link href="/2022/02/13/java-zhi-zi-fu-chuan-pian/"/>
      <url>/2022/02/13/java-zhi-zi-fu-chuan-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、API"><a href="#一、API" class="headerlink" title="一、API"></a>一、API</h3><p><code>API</code>（<code>Ppplicaton Programming Interface</code>）：应用程序编程接口</p><p><strong>Java API：</strong>指的就是<code>JDK</code>中提供的各种功能的<code>Java</code>类</p><p>这些类将底层的实现封装起来，可以通过帮助文档来学习如何使用<code>API</code></p><p><strong>注意：</strong>调用方法的时候，如果方法有明确的返回值，用变量接收可以手动完成，也可以使用快捷键完成（<code>Ctrl + Alt + V</code>）</p><h3 id="二、String"><a href="#二、String" class="headerlink" title="二、String"></a>二、String</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>字符串广泛应用 在 <code>Java</code> 编程中，在 <code>Java</code> 中字符串属于对象，<code>Java</code> 提供了 <code>String</code> 类来创建和操作字符串</p><p><code>String</code>类在<code>java.lang</code>包下，所以使用的时候不需要导包</p><p><strong>Java程序中所有的双引号字符串都是<code>String</code>类的对象</strong></p><p><strong>注意：</strong></p><ul><li><code>String</code> 类不可改变，一旦创建了 <code>String</code> 对象，那它的值就无法改变</li><li>可以被共享</li><li>效果上相当于字符数组（<code>char[]</code>）,但底层原理是字节数组（<code>byte[]</code>）,<code>Java8</code>开始</li></ul><h4 id="2、构造方法（共11种）"><a href="#2、构造方法（共11种）" class="headerlink" title="2、构造方法（共11种）"></a>2、构造方法（共11种）</h4><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213221121628.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无参数</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据字符数组的内容，创建</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据字节数组内容，创建</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String 直接创建，推荐方法</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span><span class="token comment">// 相同引用</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> s2<span class="token punctuation">;</span>                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h4><ul><li>通过<code>new</code>创建的字符串对象，每一次<code>new</code>都会申请一个内存空间，虽然内容相同，但地址值不同</li><li>通过 <code>&quot;&quot;</code> 方式给出的字符串，只要字符序列相同，无论在程序代码中出现几次，<code>JVM</code>都只会建立一个<code>String</code>对象，并在字符串池中维护</li></ul><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213222702226.png"></p><h4 id="4、字符串的常用方法"><a href="#4、字符串的常用方法" class="headerlink" title="4、字符串的常用方法"></a>4、字符串的常用方法</h4><table><thead><tr><th align="left">SN(序号)</th><th align="left">方法名</th><th>方法描述</th></tr></thead><tbody><tr><td align="left"><strong>1</strong></td><td align="left"><strong><code>char charAt(int index)</code></strong></td><td><strong>返回指定索引处的 <code>char</code> 值</strong></td></tr><tr><td align="left"><strong>2</strong></td><td align="left"><strong><code>int compareTo(Object o)</code></strong></td><td><strong>把这个字符串和另一个对象比较</strong></td></tr><tr><td align="left">3</td><td align="left"><code>int compareTo(String anotherString)</code></td><td>按字典顺序比较两个字符串</td></tr><tr><td align="left">4</td><td align="left"><code>int compareToIgnoreCase(String str)</code></td><td>按字典顺序比较两个字符串，不考虑大小写</td></tr><tr><td align="left"><strong>5</strong></td><td align="left"><strong><code>String concat(String str)</code></strong></td><td><strong>将指定字符串连接到此字符串的结尾</strong></td></tr><tr><td align="left">6</td><td align="left"><code>boolean contentEquals(StringBuffer sb)</code></td><td>当且仅当字符串与指定的<code>StringBuffer</code>有相同顺序的字符时候返回真</td></tr><tr><td align="left">7</td><td align="left"><code>static String copyValueOf(char[] data)</code></td><td>返回指定数组中表示该字符序列的 <code>String</code></td></tr><tr><td align="left">8</td><td align="left"><code>static String copyValueOf(char[] data, int offset, int count)</code></td><td>返回指定数组中表示该字符序列的 <code>String</code></td></tr><tr><td align="left">9</td><td align="left"><code>boolean endsWith(String suffix)</code></td><td>测试此字符串是否以指定的后缀结束</td></tr><tr><td align="left"><strong>10</strong></td><td align="left"><strong><code>boolean equals(Object anObject)</code></strong></td><td><strong>将此字符串与指定的对象比较，严格区分大小写</strong></td></tr><tr><td align="left">11</td><td align="left"><code>boolean equalsIgnoreCase(String anotherString)</code></td><td>将此 <code>String</code> 与另一个 <code>String</code> 比较，不考虑大小写</td></tr><tr><td align="left">12</td><td align="left"><code>byte[] getBytes()</code></td><td>使用平台的默认字符集将此 <code>String</code> 编码为 <code>byte</code> 序列，并将结果存储到一个新的 <code>byte</code> 数组中</td></tr><tr><td align="left">13</td><td align="left"><code>byte[] getBytes(String charsetName)</code></td><td>使用指定的字符集将此 <code>String</code> 编码为 <code>byte</code> 序列，并将结果存储到一个新的 <code>byte</code> 数组中</td></tr><tr><td align="left">14</td><td align="left"><code>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code></td><td>将字符从此字符串复制到目标字符数组</td></tr><tr><td align="left">15</td><td align="left"><code>int hashCode()</code></td><td>返回此字符串的哈希码</td></tr><tr><td align="left">16</td><td align="left"><code>int indexOf(int ch)</code></td><td>返回指定字符在此字符串中第一次出现处的索引</td></tr><tr><td align="left">17</td><td align="left"><code>int indexOf(int ch, int fromIndex)</code></td><td>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索</td></tr><tr><td align="left">18</td><td align="left"><code>int indexOf(String str)</code></td><td>返回指定子字符串在此字符串中第一次出现处的索引</td></tr><tr><td align="left">19</td><td align="left"><code>int indexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</td></tr><tr><td align="left">20</td><td align="left"><code>String intern()</code></td><td>返回字符串对象的规范化表示形式</td></tr><tr><td align="left">21</td><td align="left"><code>int lastIndexOf(int ch)</code></td><td>返回指定字符在此字符串中最后一次出现处的索引</td></tr><tr><td align="left">22</td><td align="left"><code>int lastIndexOf(int ch, int fromIndex)</code></td><td>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索</td></tr><tr><td align="left">23</td><td align="left"><code>int lastIndexOf(String str)</code></td><td>返回指定子字符串在此字符串中最右边出现处的索引</td></tr><tr><td align="left">24</td><td align="left"><code>int lastIndexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</td></tr><tr><td align="left"><strong>25</strong></td><td align="left"><strong><code>int length()</code></strong></td><td><strong>返回此字符串的长度</strong></td></tr><tr><td align="left">26</td><td align="left"><code>boolean matches(String regex)</code></td><td>告知此字符串是否匹配给定的正则表达式</td></tr><tr><td align="left">27</td><td align="left"><code>boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</code></td><td>测试两个字符串区域是否相等</td></tr><tr><td align="left">28</td><td align="left"><code>boolean regionMatches(int toffset, String other, int ooffset, int len)</code></td><td>测试两个字符串区域是否相等</td></tr><tr><td align="left">29</td><td align="left"><code>String replace(char oldChar, char newChar)</code></td><td>返回一个新的字符串，它是通过用 <code>newChar</code> 替换此字符串中出现的所有 <code>oldChar</code> 得到的</td></tr><tr><td align="left">30</td><td align="left"><code>String replaceAll(String regex, String replacement)</code></td><td>使用给定的 <code>replacement</code> 替换此字符串所有匹配给定的正则表达式的<strong>子字符串</strong></td></tr><tr><td align="left">31</td><td align="left"><code>String replaceFirst(String regex, String replacement)</code></td><td>使用给定的 <code>replacement</code> 替换此字符串匹配给定的正则表达式的<strong>第一个子字符串</strong></td></tr><tr><td align="left">32</td><td align="left"><code>String[] split(String regex)</code></td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td align="left">33</td><td align="left"><code>String[] split(String regex, int limit)</code></td><td>根据匹配给定的正则表达式来拆分此字符串</td></tr><tr><td align="left">34</td><td align="left"><code>boolean startsWith(String prefix)</code></td><td>测试此字符串是否以指定的前缀开始</td></tr><tr><td align="left">35</td><td align="left"><code>boolean startsWith(String prefix, int toffset)</code></td><td>测试此字符串从指定索引开始的子字符串是否以指定前缀开始</td></tr><tr><td align="left">36</td><td align="left"><code>CharSequence subSequence(int beginIndex, int endIndex)</code></td><td>返回一个新的字符序列，它是此序列的一个子序列</td></tr><tr><td align="left">37</td><td align="left"><code>String substring(int beginIndex)</code></td><td>返回一个新的字符串，它是此字符串的一个子字符串</td></tr><tr><td align="left">38</td><td align="left"><code>String substring(int beginIndex, int endIndex)</code></td><td>返回一个新字符串，它是此字符串的一个子字符串</td></tr><tr><td align="left">39</td><td align="left"><code>char[] toCharArray()</code></td><td>将此字符串转换为一个新的字符数组</td></tr><tr><td align="left">40</td><td align="left"><code>String toLowerCase()</code></td><td>使用默认语言环境的规则将此 <code>String</code> 中的所有字符都转换为<strong>小写</strong></td></tr><tr><td align="left">41</td><td align="left"><code>String toLowerCase(Locale locale)</code></td><td>使用给定 <code>Locale</code> 的规则将此 <code>String</code> 中的所有字符都转换为<strong>小写</strong></td></tr><tr><td align="left">42</td><td align="left"><code>String toString()</code></td><td>返回此对象本身（它已经是一个字符串！）</td></tr><tr><td align="left">43</td><td align="left"><code>String toUpperCase()</code></td><td>使用默认语言环境的规则将此 <code>String</code> 中的所有字符都转换为<strong>大写</strong></td></tr><tr><td align="left">44</td><td align="left"><code>String toUpperCase(Locale locale)</code></td><td>使用给定 <code>Locale</code> 的规则将此 <code>String</code> 中的所有字符都转换为<strong>大写</strong></td></tr><tr><td align="left">45</td><td align="left"><code>String trim()</code></td><td>返回字符串的副本，忽略前导空白和尾部空白</td></tr><tr><td align="left">46</td><td align="left"><code>static String valueOf(primitive data type x)</code></td><td>返回给定<code>data type</code>类型x参数的字符串表示形式</td></tr><tr><td align="left">47</td><td align="left"><code>contains(CharSequence chars)</code></td><td>判断是否包含指定的字符系列</td></tr><tr><td align="left"><strong>48</strong></td><td align="left"><strong><code>isEmpty()</code></strong></td><td><strong>判断字符串是否为空</strong></td></tr></tbody></table><p><strong>更多方法参看<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html">Java String API</a> 文档</strong></p><h4 id="5、字符串的比较"><a href="#5、字符串的比较" class="headerlink" title="5、字符串的比较"></a>5、字符串的比较</h4><p><strong>使用 <code>==</code>作比较：</strong></p><ul><li>基本类型：比较的是<strong>数据值</strong>是否相同</li><li>引用类型：比较的是<strong>地址值</strong>是否相同</li></ul><p>字符串是对象，它比较内容是否相同，是通过 <code>equals()</code>来实现的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// public boolean equals(Object anObject):将此字符串与指定对象进行比较，参数直接传递字符串</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、StringBuilder"><a href="#三、StringBuilder" class="headerlink" title="三、StringBuilder"></a>三、StringBuilder</h3><h4 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h4><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213231357335.png"></p><p>如果对字符串进行拼接操作，每次拼接都会构建一个新的<code>String</code>对象，既耗时，又浪费内存空间。可以通过<code>Java</code>提供的<code>StringBuilder</code>类解决这个问题</p><p><strong><code>StringBuilder</code>是一个可变的字符串类，即其内容是可变的</strong></p><h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>StringBuffer()</code></td><td align="left">构造一个字符串缓冲区，其中没有字符，初始容量为16个字符</td></tr><tr><td align="left"><code>StringBuffer(int capacity)</code></td><td align="left">构造一个字符串缓冲区，其中没有字符和指定的初始容量</td></tr><tr><td align="left"><code>StringBuffer(CharSequence seq)</code></td><td align="left">构造一个字符串缓冲区，其中包含与指定的 <code>CharSequence</code>相同的字符</td></tr><tr><td align="left"><code>StringBuffer(String str)</code></td><td align="left">构造一个初始化为指定字符串内容的字符串缓冲区</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建空白可变字符串对象</span><span class="token class-name">StringBuilder</span>  sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建可变字符串对象</span><span class="token class-name">StringBuilder</span>  sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>public StringBuilder append(任意类型)</code></strong></td><td><strong>添加数据，并返回对象本身</strong></td></tr><tr><td><strong><code>public StringBuilder reverse()</code></strong></td><td><strong>返回相反的字符序列</strong></td></tr><tr><td><code>public delete(int start, int end)</code></td><td>移除此序列的子字符串中的字符</td></tr><tr><td><code>public insert(int offset, (任意类型) i)</code></td><td>将对应类型参数的字符串表示形式插入此序列中</td></tr><tr><td><code>replace(int start, int end, String str)</code></td><td>使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符</td></tr><tr><td><code>int capacity()</code></td><td>返回当前容量</td></tr><tr><td><code>char charAt(int index)</code></td><td>返回此序列中指定索引处的 <code>char</code> 值</td></tr><tr><td><code>void ensureCapacity(int minimumCapacity)</code></td><td>确保容量至少等于指定的最小值</td></tr><tr><td><code>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code></td><td>将字符从此序列复制到目标字符数组 <code>dst</code></td></tr><tr><td><code>int indexOf(String str)</code></td><td>返回第一次出现的指定子字符串在该字符串中的索引</td></tr><tr><td><code>int indexOf(String str, int fromIndex)</code></td><td>从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引</td></tr><tr><td><code>int lastIndexOf(String str)</code></td><td>返回最右边出现的指定子字符串在此字符串中的索引</td></tr><tr><td><code>int lastIndexOf(String str, int fromIndex)</code></td><td>返回 <code>String</code> 对象中子字符串最后出现的位置</td></tr><tr><td><strong><code>int length()</code></strong></td><td><strong>返回长度（字符数）</strong></td></tr><tr><td><code>void setCharAt(int index, char ch)</code></td><td>将给定索引处的字符设置为 <code>ch</code></td></tr><tr><td><code>void setLength(int newLength)</code></td><td>设置字符序列的长度</td></tr><tr><td><code>void setLength(int newLength)</code></td><td>返回一个新的字符序列，该字符序列是此序列的子序列</td></tr><tr><td><code>String substring(int start)</code></td><td>返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列</td></tr><tr><td><code>String substring(int start, int end)</code></td><td>返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列</td></tr><tr><td><strong><code>String toString()</code></strong></td><td><strong>返回此序列中数据的字符串表示形式</strong></td></tr></tbody></table><h4 id="4、添加与反转"><a href="#4、添加与反转" class="headerlink" title="4、添加与反转"></a>4、添加与反转</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span>和<span class="token class-name">String</span>转换的reverse方法<span class="token comment">// append 添加数据</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 链式编程</span><span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 两种方式输出结果相同</span><span class="token comment">// 反转</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 综合 StringBuilder 和 String 转换的 reverse 方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">myReverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*        一般步骤：    StringBuilder sb = new StringBuilder(s);    sb.reverse();    String ss = sb.toString();    return ss;*/</span><span class="token comment">// 可以将上面的四段代码简化，链式编程</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、StringBuilder和String相互转换"><a href="#5、StringBuilder和String相互转换" class="headerlink" title="5、StringBuilder和String相互转换"></a>5、StringBuilder和String相互转换</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*StringBuilder转换为String：public String toString()：通过toString()就可以将StringBuilder转换为StringString转换为StringBuilder：public StringBuilder(String s)：通过构造方法就可以将String转换为StringBuilder*/</span><span class="token comment">// StringBuilder转换为String</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String转换为StringBuilder</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之面向对象基础篇</title>
      <link href="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/"/>
      <url>/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象基础篇"><a href="#面向对象基础篇" class="headerlink" title="面向对象基础篇"></a>面向对象基础篇</h2><h3 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h3><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态，是对现实生活中一类具有共同属性的行为的事物的抽象</li></ul><p><strong>类的特点：</strong></p><ul><li>类是对象的数据类型</li><li>类是具有相同属性和行为的一组对象的集合</li></ul><p><strong>对象的属性：</strong>对象具有的各种特征，每个对象的每个属性都拥有特定的值</p><p><strong>对象的行为：</strong>对象能够执行的操作</p><h4 id="1、-类的定义"><a href="#1、-类的定义" class="headerlink" title="1、 类的定义"></a>1、 类的定义</h4><p><strong>类的重要性：</strong>是Java程序的基本组成单位</p><p><strong>类的组成：</strong>属性和行为</p><ul><li>属性：在类中通过<strong>成员变量</strong>来体现（类中方法外的变量）</li><li>行为：在类中通过<strong>成员方法</strong>来体现（如先前学习的<strong>方法</strong>相比去掉<code>static</code>关键字即可）</li></ul><p><strong>一个类可以包含以下类型变量：</strong></p><ul><li><p><strong>局部变量</strong>：在<strong>方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。</p><p>变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li><p><strong>成员变量</strong>：成员变量是定义在<strong>类中，方法体之外</strong>的变量。这种变量在创建对象的时候实例化。</p><p>成员变量可以被类中方法、构造方法和特定类的语句块访问。</p></li><li><p><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p></li><li><p><strong>区别</strong>：<img src="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/image-20220213202338278.png"></p></li></ul><p><strong>定义步骤：</strong></p><ol><li>定义类</li><li>编写类的成员变量</li><li>编写类的成员方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*类的定义格式：public class 类名&#123;// 成员变量变量1的数据类型 变量1;变量2的数据类型 变量2;....// 成员方法方法1:方法2:&#125;*/</span><span class="token comment">// 定义 Dog 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> breed<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">String</span> colour<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、对象的使用"><a href="#2、对象的使用" class="headerlink" title="2、对象的使用"></a>2、对象的使用</h4><p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字 new 来创建一个对象。</li><li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象：格式：类名 对象名 = new 类名();</span><span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用对象</span><span class="token comment">// 使用成员变量：格式：对象名.变量名</span>d<span class="token punctuation">.</span>age    <span class="token comment">// 使用成员方法：格式：对象名.方法名()</span>d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、构造方法"><a href="#3、构造方法" class="headerlink" title="3、构造方法"></a>3、构造方法</h4><ul><li>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</li><li>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*构造方法：完成对象数据的初始化格式：public class 类名&#123;修饰符 类名(参数)&#123;&#125;&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 构造方法内书写的内容</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h3><h4 id="1、封装概述："><a href="#1、封装概述：" class="headerlink" title="1、封装概述："></a>1、封装概述：</h4><ul><li>是面向对象三大特征之一（<strong>封装、继承、多态</strong>）</li><li>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作</li></ul><h4 id="2、封装的优点："><a href="#2、封装的优点：" class="headerlink" title="2、封装的优点："></a>2、封装的优点：</h4><ul><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员变量进行更精确的控制</li><li>隐藏信息，实现细节</li><li>提高代码的安全性和复用性</li></ul><h4 id="3、步骤："><a href="#3、步骤：" class="headerlink" title="3、步骤："></a>3、步骤：</h4><ul><li>修改属性的可见性来限制对属性的访问（一般限制为<code>private</code>）</li><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*private 关键字：1、是一个权限修饰符2、可以修饰成员（成员变量和成员方法）3、作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问getXxx()/setXxx()一对赋取值方法，用于对私有属性的访问：1、get变量名()：用于获取成员变量的值，方法用public修饰2、set变量名(参数)：用于设置成员变量的值，方法用public修饰采用 this 关键字是为了解决成员变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。*/</span><span class="token comment">// 创建一个 Person 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> idNum<span class="token punctuation">;</span>    <span class="token comment">// 构造方法</span>        <span class="token comment">// 无参构造方法，若不设置，系统默认给，但定义了，系统将不给，若要使用，需要手动设置</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 带参构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> idNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"赵四"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> <span class="token string">"1134"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// age = age; 变量重名，两个 age 都指的形参，而不是成员变量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span> <span class="token class-name">String</span> newId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 成员变量和局部变量不重名，可以不用 this</span>      idNum <span class="token operator">=</span> newId<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>this的内存原理：</strong></p><p><img src="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/image-20220213204818032.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之数组方法篇</title>
      <link href="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/"/>
      <url>/2022/02/11/java-zhi-shu-zu-fang-fa-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、IDEA的使用"><a href="#一、IDEA的使用" class="headerlink" title="一、IDEA的使用"></a>一、IDEA的使用</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>IDEA</strong>全称<strong>IntelliJ IDEA</strong>，是用于Java语言开发的集成环境</p><p><strong>集成环境：</strong>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具</p><h3 id="2、内容辅助键和快捷键"><a href="#2、内容辅助键和快捷键" class="headerlink" title="2、内容辅助键和快捷键"></a>2、内容辅助键和快捷键</h3><ul><li><p><strong>快速生成语句</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">快速生成<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法：psvm <span class="token operator">+</span> 回车快速生成输出语句：sout <span class="token operator">+</span> 回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>内容辅助键</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> space（内容提示，代码补全）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>快捷键</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注释</span>单行：选中代码，<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token operator">/</span>多行：选中代码，<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Shift</span> <span class="token operator">+</span> <span class="token operator">/</span><span class="token comment">// 格式化</span><span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> <span class="token class-name">L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><h3 id="1、定义格式"><a href="#1、定义格式" class="headerlink" title="1、定义格式"></a>1、定义格式</h3><p><strong>数组是一种用于存储多个相同类型数据的存储模型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式一：数据类型[] 变量名，首选的方法</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token comment">//定义一个int类型的数组，数组名是arr</span><span class="token comment">// 格式二：数据类型 变量名[]</span><span class="token keyword">double</span> cur<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个int类型变量，变量名是arr数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h3><p><strong>动态初始化：</strong>初始化时只指定数据长度，由系统为数组分配初始值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式：数据类型[] 变量名 = new 数据类型[数组长度]</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*左边：double：说明数组中的元素类型是double类型[]：说明这是一个数组arr：数组名称右边：new：为数组申请内存空间double：说明数组中的元素类型是double类型[]：说明这是一个数组10：数组长度，即数组中元素个数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态初始化：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 格式：数据类型[] 变量名 = new 数据类型[]&#123;数据0, 数据1.....&#125;;简化格式：（推荐方法）数据类型[] 变量名 = &#123;数据0, 数据1.....&#125;;*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cur <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、内存分配"><a href="#3、内存分配" class="headerlink" title="3、内存分配"></a>3、内存分配</h3><ul><li><p><strong>栈内存：</strong>存储局部变量</p><p>定义在方法中的变量，如上面的<code>arr</code>，使用完毕，<strong>立即消失</strong></p></li><li><p><strong>堆内存：</strong>存储<code>new</code>出来的内容（实体，对象）</p><p>数组在初始化时会为存储空间添加默认值</p><table><thead><tr><th align="center">类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">0</td></tr><tr><td align="center">浮点数</td><td align="center">0.0</td></tr><tr><td align="center">布尔类型</td><td align="center">false</td></tr><tr><td align="center">字符</td><td align="center">空字符</td></tr><tr><td align="center">引用数据类型</td><td align="center">null</td></tr></tbody></table><p>每个<code>new</code>出来的东西都有一个地址值，使用完毕，会<strong>在垃圾回收期空闲时被回收</strong></p></li></ul><p><strong>内存分配图</strong></p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211213350199.png"></p><p><strong>多个数组指向相同内存图</strong>：当数组指向相同内存时，任何一个数组修改数据，内存数据也会被修改</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211213653152.png"></p><h3 id="4、数组操作"><a href="#4、数组操作" class="headerlink" title="4、数组操作"></a>4、数组操作</h3><h4 id="①-常见问题："><a href="#①-常见问题：" class="headerlink" title="① 常见问题："></a><strong>① 常见问题：</strong></h4><ul><li><p><strong>索引越界：</strong>访问了数组中不存在的索引对应的元素，造成索引越界问题<code>ArrayIndexOutOfBoundsException</code></p></li><li><p><strong>空指针异常：</strong>访问的数组已经不在指向堆内存的数据，造成空指针异常</p><p><code>NullPointerException</code></p></li><li><p><strong>null：</strong>空值，引用数据类型的默认值，表示不指向任何有效对象</p></li></ul><h4 id="②-常见操作"><a href="#②-常见操作" class="headerlink" title="② 常见操作"></a>② 常见操作</h4><p><strong>遍历</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用for循环</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他操作</span><span class="token punctuation">&#125;</span><span class="token comment">//  For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组，更推荐的方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取最大值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 初始化max</span><span class="token keyword">int</span> max<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// For-Each 循环，也可使用for循环，这里来熟悉For-Each 循环如何操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">></span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出最大值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>方法</strong>是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><h4 id="①-优点："><a href="#①-优点：" class="headerlink" title="① 优点："></a><strong>① 优点：</strong></h4><ul><li>使程序变得更简短而清晰</li><li>有利于程序维护</li><li>可以提高程序开发的效率</li><li>提高了代码的重用性</li></ul><h4 id="②-命名规则："><a href="#②-命名规则：" class="headerlink" title="② 命名规则："></a>② <strong>命名规则：</strong></h4><ul><li>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<code>addPerson</code>。</li><li>下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li></ul><h3 id="2、定义和调用"><a href="#2、定义和调用" class="headerlink" title="2、定义和调用"></a>2、定义和调用</h3><ul><li>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong></li><li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为<strong>方法调用</strong></li></ul><p>一般情况下，<strong>定义方法</strong>包含以下语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*修饰符 返回值类型 方法名(参数类型 参数名)&#123;    ...    方法体    ...    return 返回值; &#125;*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个方法的所有部分：</p><ul><li><p><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</p></li><li><p><strong>返回值类型 ：</strong>方法可能会返回值。<code>returnValueType</code> 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值，在这种情况下，<code>returnValueType</code> 是关键字<code>void</code></p></li><li><p><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名</p></li><li><p><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p></li><li><p><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211221246368.png"></p></li></ul><p><strong>调用方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">max_value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、形参和实参"><a href="#3、形参和实参" class="headerlink" title="3、形参和实参"></a>3、形参和实参</h3><p><strong>形参：</strong>方法定义中的参数，等同于变量定义格式</p><p><strong>实参：</strong>方法调用中的参数，等同于使用变量或常量</p><h3 id="4、方法注意事项"><a href="#4、方法注意事项" class="headerlink" title="4、方法注意事项"></a>4、方法注意事项</h3><ul><li>方法不能嵌套定义</li><li><code>void</code>表示无返回值，可以省略<code>return</code>，也可以单独书写<code>return</code>，后面不加数据</li></ul><h3 id="5、方法重载"><a href="#5、方法重载" class="headerlink" title="5、方法重载"></a>5、方法重载</h3><p><strong>方法重载</strong>指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载：</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul><p><strong>特点：</strong></p><ul><li>重载仅对应方法的定义，与方法的调用无关</li><li>重载仅针对同一个类中方法的名称与参数进行识别，<strong>与返回值无关</strong>，换句话说不能通过返回值来判定两个方法是否相互构成重载</li><li>在调用的时候，Java虚拟机会通过参数的不同来区分同名方法</li></ul><h3 id="6、方法的参数传递"><a href="#6、方法的参数传递" class="headerlink" title="6、方法的参数传递"></a>6、<strong>方法的参数传递</strong></h3><p>对于<strong>基本数据类型的参数</strong>，形式参数的改变，不影响实际参数的值</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211224943473.png"></p><p>对于<strong>引用类型的参数</strong>，形式参数的改变，影响实际参数的值</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211225220164.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列用法</title>
      <link href="/2022/02/11/you-xian-dui-lie-yong-fa/"/>
      <url>/2022/02/11/you-xian-dui-lie-yong-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>在leetcode刷题过程中，接触到优先队列(priority_queue)的使用，因此作为学习加以补充</strong></p><h2 id="一、什么是优先级队列"><a href="#一、什么是优先级队列" class="headerlink" title="一、什么是优先级队列"></a>一、什么是优先级队列</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>优先级队列中，<strong>数据按关键词有序排列</strong>，插入新数据的时候，会自动插入到合适的位置保证队列有序。（顺序有两种形式：升序或者是降序）</p><p><strong>标准定义：</strong></p><p><code>PriorityQueue</code> 类在<code>Java1.5</code>中引入。<code>PriorityQueue</code> 是基于优先堆的一个无界队列，这个优先队列中的元素可以默认自然排序或者通过提供的<code>Comparator</code>（比较器）在队列实例化的时候排序。要求使用Java <code>Comparable</code> 和<code>Comparator</code> 接口给对象排序，并且在排序时会按照优先级处理其中的元素。</p><h3 id="2、特征"><a href="#2、特征" class="headerlink" title="2、特征"></a>2、特征</h3><p>优先级队列底层的数据结构其实是一颗二叉堆</p><ul><li>二叉堆是一个完全二叉树</li><li>根节点总是大于左右子节点（大顶堆），或者是小于左右子节点（小顶堆）</li></ul><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认初始容量，11</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">// 维护一个队列：因为基于二叉堆来实现优先队列，queue[i]的子节点为queue[2*i+1]/queue[2*i+2]</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span><span class="token comment">// 优先队列中的元素个数</span><span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 比较器：用于降序或者是比较自定义的对象，比如可以根据age</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">;</span><span class="token comment">// 优先级队列的结构：被修改的次数</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><ul><li><p>默认构造方法：<code>PriorityQueue()</code></p><p>使用默认的初始容量（11）创建一个 <code>PriorityQueue</code>，并根据其自然顺序对元素进行排序。</p></li><li><p>包含集合元素：<code>PriorityQueue(Collection c)</code></p><p>创建包含指定 collection 中元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> collection，其元素要置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据优先级队列的排序规则无法比较指定 collection 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定 collection 或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定初始容量：<code>PriorityQueue(int initialCapacity)</code></p><p>使用指定的初始容量创建一个 <code>PriorityQueue</code>，并根据其自然顺序对元素进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>initialCapacity <span class="token operator">-</span> 此优先级队列的初始容量    <span class="token comment">// 抛出</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">-</span> 如果 initialCapacity 小于 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定初始容量和比较器：<code>PriorityQueue(int initialCapacity, Comparator comparator)</code></p><p>使用指定的初始容量创建一个 <code>PriorityQueue</code>，并根据指定的比较器对元素进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>initialCapacity <span class="token operator">-</span> 此优先级队列的初始容量comparator <span class="token operator">-</span> 用于对此优先级队列进行排序的比较器。如果该参数为 <span class="token keyword">null</span>，则将使用元素的 自然顺序    <span class="token comment">// 抛出</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">-</span> 如果 initialCapacity 小于 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包含优先级元素：<code>PriorityQueue(PriorityQueue c)</code></p><p>创建包含指定优先级队列元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> 优先级队列，其元素要置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据 c 的顺序无法比较 c 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定优先级队列或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包含set元素：<code>PriorityQueue(SortedSet c)</code></p><p>创建包含指定有序 set 元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> 有序 set，其元素将置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据有序 set 的顺序无法比较该有序 set 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定有序 set 或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、普通方法"><a href="#3、普通方法" class="headerlink" title="3、普通方法"></a>3、普通方法</h3><p><code>PriorityQueue</code>中常用的方法很多。来看几个常用的。</p><h4 id="①-add："><a href="#①-add：" class="headerlink" title="① add："></a><strong>① add：</strong></h4><p><strong>插入一个元素，不成功会抛出异常</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②-offer："><a href="#②-offer：" class="headerlink" title="② offer："></a><strong>② offer：</strong></h4><p><strong>插入一个元素，不能被立即执行的情况下会返回一个特殊的值（true 或者 false）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，优先级队列插入的元素不能为空，步骤是这样的：</p><p>首先把<code>modCount</code>数量加1，如果容量不够把当前队列的尺寸加<code>1</code>，最后在<code>i</code>的位置上使用<code>siftUp</code>方法把<code>e</code>添加进来。此时真正插入的操作又落到了<code>siftUp</code>方法身上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftUpComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但<code>siftup</code>方法并没有实现真正的插入操作，而是先判断是否使用了自己的比较器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 比较器为空时的插入</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftUpComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> e <span class="token operator">=</span> es<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            k <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 比较器不为空的插入</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> e <span class="token operator">=</span> es<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        k <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-remove："><a href="#③-remove：" class="headerlink" title="③ remove："></a>③ remove：</h4><p><strong>删除一个元素，如果不成功会返回false。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正实现删除操作的是<code>removeAt</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span> <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert i >= 0 &amp;&amp; i &lt; size;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> queue<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token comment">// removed last element</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">E</span> moved <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> moved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> moved<span class="token punctuation">)</span>                    <span class="token keyword">return</span> moved<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除操作主要是两部分，<code>if</code>里面判断删除的是否是最后一个，否则的话就是用<code>siftDown</code>方法进行“向下沉”删除。不成功使用<code>siftup</code>“向上浮”。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> size<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftDownComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除比较器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert n > 0;</span>        <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>        <span class="token keyword">int</span> half <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">// loop while a non-leaf</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// assume left child is least</span>            <span class="token class-name">Object</span> c <span class="token operator">=</span> es<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                c <span class="token operator">=</span> es<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            k <span class="token operator">=</span> child<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> half <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> c <span class="token operator">=</span> es<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> es<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        k <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④-poll："><a href="#④-poll：" class="headerlink" title="④ poll："></a>④ poll：</h4><p><strong>删除一个元素，并返回删除的元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>es <span class="token operator">=</span> queue<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmp <span class="token operator">=</span> comparator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> es<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> es<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑤-peek："><a href="#⑤-peek：" class="headerlink" title="⑤ peek："></a>⑤ peek：</h4><p><strong>查询队顶元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="⑥-indexOf-Object-o-："><a href="#⑥-indexOf-Object-o-：" class="headerlink" title="⑥ indexOf(Object o)："></a>⑥ indexOf(Object o)：</h4><p><strong>查询对象o的索引</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> queue<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> size<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑦-contain-Object-o-："><a href="#⑦-contain-Object-o-：" class="headerlink" title="⑦ contain(Object o)："></a>⑦ contain(Object o)：</h4><p><strong>判断是否容纳了元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之基础语法篇</title>
      <link href="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/"/>
      <url>/2022/02/10/java-zhi-ji-chu-yu-fa-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="Java之基础语法篇"><a href="#Java之基础语法篇" class="headerlink" title="Java之基础语法篇"></a>Java之基础语法篇</h2><h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><ul><li><p>单行注释</p><p><code>格式：    // 注释信息</code></p></li><li><p>多行注释</p><p><code>格式：    /* 注释信息 */</code> </p></li><li><p>文档注释</p><p><code>格式：    /** 注释信息*/</code></p></li></ul><h3 id="2、关键字（50个）"><a href="#2、关键字（50个）" class="headerlink" title="2、关键字（50个）"></a>2、关键字（50个）</h3><ul><li>关键字的字母全部小写</li><li>有特殊的颜色标记</li></ul><h3 id="3、常量"><a href="#3、常量" class="headerlink" title="3、常量"></a>3、常量</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210201515314.png"></p><p><strong>注意：</strong>空常量不能直接输出</p><h3 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h3><p>计算机存储设备的最小信息单元叫 <strong>位（bit）</strong> ，又称<strong>比特位</strong>，常用小写字母 <strong>b</strong> 表示；而计算机中最小的存储单位为 <strong>字节（byte）</strong>，通常用大写字母 <strong>B</strong> 表示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span> B（byte） <span class="token operator">=</span> <span class="token number">8</span> b<span class="token number">1</span> KB <span class="token operator">=</span> <span class="token number">1024</span> B<span class="token number">1</span> MB <span class="token operator">=</span> <span class="token number">1024</span> KB<span class="token number">1</span> GB <span class="token operator">=</span> <span class="token number">1024</span> MB<span class="token number">1</span> TB <span class="token operator">=</span> <span class="token number">1024</span> GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210202546063.png"></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210202633533.png"></p><h3 id="5、变量"><a href="#5、变量" class="headerlink" title="5、变量"></a>5、变量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*变量定义格式：数据类型 变量名 = 变量值;基本数据类型：byte,short,int,long,float,double,char,boolean变量的使用：取值格式：变量名修改值格式：变量名 = 变量值;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>变量名不能重复</li><li>变量未赋值时不能使用</li><li><code>long</code>类型变量定义时，为防止整数过大，在后面加<code>L</code>，如 <code>long a = 100000L</code></li><li><code>float</code>类型变量定义时，为防止类型不兼容，在后面加<code>F</code>，如 <code>float b = 3.14F</code></li></ul><h3 id="6、标识符"><a href="#6、标识符" class="headerlink" title="6、标识符"></a>6、标识符</h3><h4 id="①-定义规则："><a href="#①-定义规则：" class="headerlink" title="① 定义规则："></a><strong>① 定义规则：</strong></h4><ul><li>由<strong>数字、字母、下划线（_）和美元符（$）</strong>组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h4 id="②-常见命名约定"><a href="#②-常见命名约定" class="headerlink" title="② 常见命名约定"></a><strong>② 常见命名约定</strong></h4><p><strong>小驼峰命名法：（方法、变量）</strong></p><ul><li>标识符是一个单词时，首字母小写，如 <code>name</code></li><li>标识符由多个单词组成时，第一个单词首字母小写，其他单词首字母大写，如 <code>firstName</code></li></ul><p><strong>大驼峰命名法：（类）</strong></p><ul><li>标识符是一个单词时，首字母大写，如 <code>Student</code></li><li>标识符由多个单词组成时，每个单词首字母大写，如 <code>GoodStudent</code></li></ul><h3 id="7、类型转换"><a href="#7、类型转换" class="headerlink" title="7、类型转换"></a>7、类型转换</h3><h4 id="①-自动类型转换"><a href="#①-自动类型转换" class="headerlink" title="① 自动类型转换"></a>① 自动类型转换</h4><p>把一个表示<strong>数据范围小的数值或变量</strong>赋值给另一个表示<strong>数据范围大的变量</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210205542768.png"></p><h4 id="②-强制类型转换"><a href="#②-强制类型转换" class="headerlink" title="② 强制类型转换"></a>② 强制类型转换</h4><p>把一个表示<strong>数据范围大的数值或变量</strong>赋值给另一个表示<strong>数据范围小的变量</strong></p><ul><li>格式：<strong>目标数据类型 变量名 = (目标数据类型)值或者变量</strong>，如 <code>int k = (int)88.88</code></li></ul><h3 id="8、算数运算符"><a href="#8、算数运算符" class="headerlink" title="8、算数运算符"></a>8、算数运算符</h3><p><code>+,-,*,/,%</code></p><p><strong>整数操作只得整数，想得小数，浮点数参与</strong></p><h4 id="①-字符的”-”操作"><a href="#①-字符的”-”操作" class="headerlink" title="① 字符的”+”操作"></a>① 字符的”+”操作</h4><p>字符参与加操作，使用字符在计算机底层<strong>对应的数值</strong>来进行计算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*ASCII码表中，A~Z为65~90，a~z为97~122，'0'~'9'为48~57*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>算术表达式中<strong>包含多个基本数据类型</strong>的值的时候，整个算术表达式的<strong>类型</strong>会<strong>自动进行提升</strong></p><p><strong>提升规则：</strong></p><ul><li><code>byte</code>类型，<code>short</code>类型和<code>char</code>类型将被提升到int类型</li><li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型，等级顺序如自动类型转换中的图</li></ul><h4 id="②-字符串的”-”操作"><a href="#②-字符串的”-”操作" class="headerlink" title="② 字符串的”+”操作"></a>② 字符串的”+”操作</h4><ul><li><p>当”+”操作中出现字符串时，这个”+”是<strong>字符串连接符</strong>，而不是算术运算</p><p>如<code>&quot;hello&quot; + 666</code>编译结果为 <code>hello666</code></p></li><li><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行”+”操作时，从左到右逐个执行，如</p><p><code>1 + 99 + &quot;年&quot;</code>编译结果为 <code>100年</code></p><p><code>&quot;年&quot; + 1 + 99</code> 编译结果为<code>年199</code></p></li></ul><h3 id="9、赋值运算符"><a href="#9、赋值运算符" class="headerlink" title="9、赋值运算符"></a>9、赋值运算符</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210213143725.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*扩展的赋值运算符底层隐含了强制类型转换short s = 10;// 可以正确编译，常用s += 20;// 不能正确编译，10为 int 类型，右侧运算完后，为 int 类型，而左侧依然为 short 类型s = s + 10// 正确写法，右侧运算完后强制类型转换s = (short)(s + 10)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、自增自减运算符"><a href="#10、自增自减运算符" class="headerlink" title="10、自增自减运算符"></a>10、自增自减运算符</h3><p><code>++,--</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*i++ VS ++i①单独使用，二者效果相同②参与操作使用，i++ 先赋值后加一，++i 先加一后赋值（i--和--i类似）*/</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// 编译后，j = 10, i = 11</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 编译后，k = 11, i = 11</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">++</span>l<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、关系运算符"><a href="#11、关系运算符" class="headerlink" title="11、关系运算符"></a>11、关系运算符</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210214308154.png"></p><h3 id="12、逻辑运算符"><a href="#12、逻辑运算符" class="headerlink" title="12、逻辑运算符"></a>12、逻辑运算符</h3><p>逻辑运算符是用来<strong>连接关系表达式</strong>的运算符，也可以直接<strong>连接布尔类型的常量或变量</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210215300616.png"></p><p><strong>短路逻辑运算符</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210215656296.png"></p><h3 id="13、三元运算符"><a href="#13、三元运算符" class="headerlink" title="13、三元运算符"></a>13、三元运算符</h3><ul><li>格式： 关系表达式 ? 表达式1 : 表达式2</li><li>范例： <code>a &gt; b ? a : b</code></li></ul><p><strong>计算规则：</strong></p><ul><li>首先<strong>计算关系表达式的值</strong></li><li>若值为<code>true</code>，<strong>表达式1的值</strong>就是运算结果</li><li>若值为<code>flase</code>，<strong>表达式2的值</strong>就是运算结果</li></ul><h3 id="14、数据输入"><a href="#14、数据输入" class="headerlink" title="14、数据输入"></a>14、数据输入</h3><p><strong>Scanner使用的基本步骤：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ①导包，导包动作必须出现在类定义的上面</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">// ②创建对象，只有sc是变量名可变，其他不许变</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ③接收数据，只有i可以变</span><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ④关闭扫描器，在使用完scanner输入操作后，将其关闭，避免一直占用资源</span>sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在基础步骤上，对于输入的数据加以判断</strong></p><ul><li><p>通过 <code>Scanner</code> 类的 <code>next()</code> 与 <code>nextLine()</code> 方法获取输入的字符串，在读取前一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否还有输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输入数据</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据为："</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭</span>scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要输入 <code>int</code> 或 <code>float</code> 等类型的数据，在 <code>Scanner</code> 类中也有支持，但是在输入之前最好先使用 <code>hasNextXxx()</code> 方法进行验证，再使用 <code>nextXxx()</code> 来读取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断输入的是否是整数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 接收整数</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数数据："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输入错误的信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭</span>scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>在Scanner类中next() 与 nextLine() 区别</strong></p><p><strong>next():</strong></p><ul><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li><li>next() 不能得到带有空格的字符串</li></ul><p><strong>nextLine()：</strong></p><ul><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白</li></ul><h3 id="15、流程控制"><a href="#15、流程控制" class="headerlink" title="15、流程控制"></a>15、流程控制</h3><p><strong>分类：</strong></p><ul><li>顺序结构（代码依次执行）</li><li>分支结构（<strong>if，switch</strong>）</li><li>循环结构（<strong>for，while，do…while</strong>）</li></ul><h3 id="16、if语句"><a href="#16、if语句" class="headerlink" title="16、if语句"></a>16、if语句</h3><h4 id="①-格式一："><a href="#①-格式一：" class="headerlink" title="① 格式一："></a>① 格式一：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式为true将执行的语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-格式二："><a href="#②-格式二：" class="headerlink" title="② 格式二："></a>② 格式二：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式的值为true</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式的值为false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③格式三："><a href="#③格式三：" class="headerlink" title="③格式三："></a>③格式三：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 1的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 2的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 3的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//如果以上布尔表达式都不为true执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17、switch语句"><a href="#17、switch语句" class="headerlink" title="17、switch语句"></a>17、switch语句</h3><p><code>switch case</code> 语句语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> value <span class="token operator">:</span>                <span class="token comment">//语句      </span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选    </span>    <span class="token keyword">case</span> value <span class="token operator">:</span>               <span class="token comment">//语句       </span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选    </span>    <span class="token comment">//你可以有任意数量的case语句    </span>    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选       </span>        <span class="token comment">//语句 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>switch case</code> 语句有如下规则：</p><ul><li><code>switch</code> 语句中的变量类型可以是： <code>byte</code>、<code>short</code>、<code>int</code> 或者 <code>char</code>。从 Java SE 7 开始，<code>switch</code> 支持字符串 <code>String</code> 类型了，同时 <code>case</code> 标签必须为字符串常量或字面量</li><li><code>switch</code> 语句可以拥有多个 <code>case</code> 语句。每个 <code>case</code> 后面跟一个要比较的值和冒号</li><li><code>case</code> 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 <code>case</code> 语句的值相等时，那么 <code>case</code> 语句之后的语句开始执行，直到 <code>break</code> 语句出现才会跳出 <code>switch</code> 语句</li><li>当遇到 <code>break</code> 语句时，<code>switch</code> 语句终止。程序跳转到 <code>switch</code> 语句后面的语句执行。<code>case</code> 语句不必须要包含 <code>break</code> 语句。如果没有 <code>break</code> 语句出现，程序会继续执行下一条 <code>case</code> 语句，直到出现 <code>break</code> 语句</li><li><code>switch</code> 语句可以包含一个 <code>default</code> 分支，该分支一般是 <code>switch</code> 语句的最后一个分支（可以在任何位置，但<strong>建议在最后一个</strong>）。<code>default</code> 在没有 <code>case</code> 语句的值和变量值相等的时候执行。<code>default</code> 分支不需要 <code>break</code> 语句</li><li><strong>case穿透</strong>：如果<code>case</code> 控制的语句体后面不写<code>break</code>，将会出现穿透现象，在不判断下个<code>case</code> 值的情况下，向下运行，知道遇到<code>break</code> 或者整个switch语句的结束</li></ul><p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p><h3 id="18、for循环语句"><a href="#18、for循环语句" class="headerlink" title="18、for循环语句"></a>18、for循环语句</h3><p>for<strong>循环执行的次数是在执行前就确定的</strong>。语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span class="token comment">/*初始化：初始化语句 -> 表示循环开启的起始状态布尔表达式：条件判断语句 -> 表示循环反复执行的条件更新：条件控制语句 -> 表示循环执行中每次变化的内容代码语句的内容为循环体语句 -> 表示循环重复执行的内容*/</span><span class="token comment">// 死循环格式</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 for 循环有以下几点说明：</p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句</li><li>然后，检测布尔表达式的值。如果为 <code>true</code>，循环体被执行。如果为<code>false</code>，循环终止，开始执行循环体后面的语句</li><li>执行一次循环后，更新循环控制变量</li><li>再次检测布尔表达式。循环执行上面的过程</li></ul><p><strong>增强for循环</strong></p><p>Java5 引入了一种主要<strong>用于数组的增强型 for 循环</strong>。</p><p>Java 增强 <code>for</code> 循环语法格式如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//代码句子</span><span class="token punctuation">&#125;</span><span class="token comment">// 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</span><span class="token comment">// 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</span><span class="token comment">// 例子</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Larry"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Lacy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> name <span class="token operator">:</span> names <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行结果为 James,Larry,Tom,Lacy,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19、while循环语句"><a href="#19、while循环语句" class="headerlink" title="19、while循环语句"></a>19、while循环语句</h3><p><strong>while是最基本的循环</strong>，它的结构为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span> 布尔表达式 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环内容</span><span class="token punctuation">&#125;</span><span class="token comment">// 只要布尔表达式为 true，循环就会一直执行下去</span><span class="token comment">// 标准化格式</span>初始化语句<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 死循环格式</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20、do…while循环语句"><a href="#20、do…while循环语句" class="headerlink" title="20、do…while循环语句"></a>20、do…while循环语句</h3><p><code>do…while</code> 循环和 <code>while</code> 循环相似，不同的是，<code>do…while</code> 循环<strong>至少会执行一次</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 死循环格式</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>布尔表达式（条件判断语句）在循环体的后面，所以<strong>语句块在检测布尔表达式之前已经执行了</strong>。 如果布尔表达式的值为 <code>true</code>，则语句块一直执行，直到布尔表达式的值为 <code>false</code> </p><h3 id="21、跳转控制语句"><a href="#21、跳转控制语句" class="headerlink" title="21、跳转控制语句"></a>21、跳转控制语句</h3><p><strong>两个关键字都是基于条件控制的</strong></p><h4 id="①-continue："><a href="#①-continue：" class="headerlink" title="① continue："></a><strong>① continue：</strong></h4><p><code>continue</code> 适用于任何循环控制结构中。作用是<strong>让程序立刻跳转到下一次循环的迭代执行</strong>。</p><ul><li>在 <code>for</code> 循环中，<code>continue</code> 语句使程序立即<strong>跳转到更新语句（条件控制语句）</strong></li><li>在 <code>while</code> 或者 <code>do…while</code> 循环中，程序立即<strong>跳转到布尔表达式的条件判断语句</strong></li></ul><h4 id="②-break："><a href="#②-break：" class="headerlink" title="② break："></a><strong>② break：</strong></h4><ul><li><code>break</code> 主要用在循环语句或者 <code>switch</code> 语句中，用来<strong>跳出整个语句块</strong></li><li><code>break</code> 跳出最里层的循环，并且继续执行该循环下面的语句</li></ul><h3 id="22、循环嵌套"><a href="#22、循环嵌套" class="headerlink" title="22、循环嵌套"></a>22、循环嵌套</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 分支语句中包含分支语句称为分支嵌套</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 循环语句中包含循环语句称为循环嵌套</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23、Random"><a href="#23、Random" class="headerlink" title="23、Random"></a>23、Random</h3><p><strong>作用：</strong>用于产生一个随机数</p><p><strong>使用步骤：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ①导包</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span>    <span class="token comment">// ②创建对象</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ③获取随机数</span><span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据的范围：[0,10)，包括0，但不包括10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Java.util.Random()</code><strong>方法摘要</strong>：</p><ul><li><code>protected int next(int bits)</code>：生成下一个伪随机数</li><li><code>boolean nextBoolean()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的<code>boolean</code>值</li><li><code>void nextBytes(byte[] bytes)</code>：生成随机字节并将其置于用户提供的 byte 数组中</li><li><code>double nextDouble()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 <code>double</code> 值</li><li><code>float nextFloat()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布<code>float</code> 值</li><li><code>double nextGaussian()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的<code>double</code> 值，其平均值是 0.0，标准差是 1.0</li><li><code>int nextInt()</code>：返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 <code>int</code> 值</li><li><code>int nextInt(int n)</code>：返回一个伪随机数，它是取自此随机数生成器序列的、在（包括和指定值（不包括）之间均匀分布的<code>int</code> 值</li><li><code>long nextLong()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 <code>long</code> 值</li><li><code>void setSeed(long seed)</code>：使用单个 long 种子设置此随机数生成器的种子</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之单链表篇</title>
      <link href="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/"/>
      <url>/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 代码初始结构 * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表篇"><a href="#单链表篇" class="headerlink" title="单链表篇"></a>单链表篇</h2><h3 id="1-1-合并两个有序链表（双指针技巧）"><a href="#1-1-合并两个有序链表（双指针技巧）" class="headerlink" title="1.1 合并两个有序链表（双指针技巧）"></a>1.1 合并两个有序链表（双指针技巧）</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title.jpg"></p><p><strong>代码1：</strong></p><p>思路：使用<strong>双指针技巧</strong>和<strong>虚拟头结点技巧</strong>，算法的逻辑类似于「拉拉链」，<code>l1, l2</code> 类似于拉链两侧的锯齿，指针 <code>p</code> 就好像拉链的拉索，将两个有序链表合并。 <code>dummy</code> 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 虚拟头结点</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token comment">// 双指针技巧，在此算法中双指针也可不用</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 比较 p1 和 p2 两个指针</span>        <span class="token comment">// 将值较小的的节点接到 p 指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">></span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// p 指针不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 很新颖的递归使用</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list1<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> list1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>val <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">;</span>        res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>next<span class="token punctuation">,</span>list1<span class="token punctuation">.</span>val <span class="token operator">>=</span> list2<span class="token punctuation">.</span>val <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-合并k个升序链表"><a href="#1-2-合并k个升序链表" class="headerlink" title="1.2 合并k个升序链表"></a><strong>1.2 合并k个升序链表</strong></h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title2.jpg"></p><p><strong>代码1：</strong></p><p>思路：使用优先级队列（二叉堆）把链表节点放入一个最小堆，就可以每次获得 <code>k</code> 个节点中的最小节点，即用容量为K的最小堆优先队列，把链表的头结点都放进去，然后出队当前优先队列中最小的，挂上链表，然后让出队的那个节点的下一个入队，再出队当前优先队列中最小的，直到优先队列为空。<strong>算法整体的时间复杂度是 <code>O(Nlogk)</code>，其中 <code>k</code> 是链表的条数，<code>N</code> 是这些链表的节点总数</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 虚拟头结点</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token comment">// 优先级队列，最小堆</span><span class="token comment">/*        // JAVA之前，使用匿名内部类。记得初始化队列长度    PriorityQueue&lt;ListNode> pq=new PriorityQueue&lt;>(lists.length,new Comparator&lt;ListNode>()&#123;        @Override        public int compare(ListNode l1,ListNode l2)&#123;        // 在添加元素的时候就进行规则排序。升序            if(l1.bal>l2.val)&#123;                return 1;            &#125;else if(l1.val==l2.val)&#123;                return 0;            &#125;else&#123;                return -1;            &#125;        &#125;    &#125;);*/</span>           <span class="token comment">// Java8后使用lambda表达式更加高效、简捷</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>        lists<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>val <span class="token operator">-</span> b<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 k 个链表的头结点加入最小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> head <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 进行非空判断，防止里面存在空的子数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token comment">// 插入的时候已经进行了排序,最小的元素放在最前面</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取最小节点，接到结果链表中</span>        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// p 指针不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-单链表的倒数第k个节点"><a href="#1-3-单链表的倒数第k个节点" class="headerlink" title="1.3 单链表的倒数第k个节点"></a>1.3 单链表的倒数第k个节点</h3><p>假设链表有 <code>n</code> 个节点，找单链表的第 <code>k</code> 个节点，一个 for 循环遍历就找到了；若要找倒数第 <code>k</code> 个节点，反过来就是正数第 <code>n - k</code> 个节点；一般算法只给一个 <code>ListNode</code> 头结点代表一条单链表，需要先遍历一遍链表算出 <code>n</code> 的值，然后再遍历链表计算第 <code>n - k</code> 个节点。也就是说，这个解法需要<strong>遍历两次链表</strong>才能得到出倒数第 <code>k</code> 个节点。</p><p>能不能<strong>只遍历一次链表</strong>，就算出倒数第 <code>k</code> 个节点？可以，巧妙使用双指针技巧</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 返回链表的倒数第 k 个节点</span><span class="token class-name">ListNode</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 让第一个指针 p1 先走 k 步</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// p1 和 p2 同时走 n - k 步</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// p2 现在指向第 n - k 个节点</span>    <span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽说遍历一次链表和遍历两次链表的时间复杂度都是 <code>O(N)</code>，但上述这个算法更有技巧性。</p><p><strong>技巧的leetcode题</strong></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title3.jpg"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 虚拟头结点</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// next链接链表</span>        dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 删除倒数第 n 个，要先找倒数第 n + 1 个节点</span>        <span class="token class-name">ListNode</span> x <span class="token operator">=</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span>dummy<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删掉倒数第 n 个节点</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210115622925.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 快慢指针初始化指向 head</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 快指针走到末尾时停止</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 慢指针走一步，快指针走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 慢指针指向中点</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果链表长度为<strong>偶数</strong>，也就是说中点有两个的时候，我们这个解法返回的节点是<strong>靠后的那个节点</strong>。</p><p>另外，这段代码稍加修改就可以直接用到判断链表成环的算法题上。</p><h3 id="1-4-判断链表是否包含环"><a href="#1-4-判断链表是否包含环" class="headerlink" title="1.4 判断链表是否包含环"></a>1.4 判断链表是否包含环</h3><p>判断链表是否包含环属于经典问题了，解决方案也是<strong>用快慢指针</strong></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120318689.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 慢指针走一步，快指针走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">// 快慢指针相遇，说明含有环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不包含环</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果链表中含有环，<strong>如何计算这个环的起点</strong>？</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120404094.png"></p><p><strong>思路：</strong>当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 上面的代码类似 hasCycle 函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// fast 遇到空指针说明没有环</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 重新指向头结点</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 快慢指针同步前进，相交点就是环起点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>假设快慢指针相遇时，慢指针 <code>slow</code> 走了 <code>k</code> 步，那么快指针 <code>fast</code> 一定走了 <code>2k</code> 步：</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120937196.png"></p><p><code>fast</code> 一定比 <code>slow</code> 多走了 <code>k</code> 步，这多走的 <code>k</code> 步其实就是 <code>fast</code> 指针在环里转圈圈，所以 <code>k</code> 的值就是环长度的「整数倍」。</p><p>假设相遇点距环的起点的距离为 <code>m</code>，那么结合上图的 <code>slow</code> 指针，环的起点距头结点 <code>head</code> 的距离为 <code>k - m</code>，也就是说如果从 <code>head</code> 前进 <code>k - m</code> 步就能到达环起点。</p><p>巧的是，如果从相遇点继续前进 <code>k - m</code> 步，也恰好到达环起点。因为结合上图的 <code>fast</code> 指针，从相遇点开始走k步可以转回到相遇点，那走 <code>k - m</code> 步肯定就走到环起点了：</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120957366.png"></p><p>所以，只要把快慢指针中的任一个重新指向 <code>head</code>，然后两个指针同速前进，<code>k - m</code> 步后一定会相遇，相遇之处就是环的起点。</p><h3 id="1-5-两个链表是否相交"><a href="#1-5-两个链表是否相交" class="headerlink" title="1.5 两个链表是否相交"></a>1.5 两个链表是否相交</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210121324448.png"></p><p>用两个指针 <code>p1</code> 和 <code>p2</code> 分别在两条链表上前进，并不能<strong>同时</strong>走到公共节点，也就无法得到相交节点 <code>c1</code>。</p><p>**解决这个问题的关键是，通过某些方式，让 <code>p1</code> 和 <code>p2</code> 能够同时到达相交节点 <code>c1</code>**。</p><p>可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起。</p><p>如果这样进行拼接，就可以让 <code>p1</code> 和 <code>p2</code> 同时进入公共部分，也就是同时到达相交节点 <code>c1</code></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210121244978.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义两个指针, 第一轮让两个到达末尾的节点指向另一个链表的头部, 最后如果相遇则为交点(在第一轮移动中恰好抹除了长度差)，两个指针等于移动了相同的距离, 有交点就返回, 无交点就是各走了两条指针的长度*/</span><span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// p1 指向 A 链表头结点，p2 指向 B 链表头结点</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> headA<span class="token punctuation">,</span> p2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p1 <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">else</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p2 <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token keyword">else</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 空间复杂度为 O(1)，时间复杂度为 O(N)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-反转链表"><a href="#1-6-反转链表" class="headerlink" title="1.6 反转链表"></a>1.6 反转链表</h3><h4 id="①-反转整个链表"><a href="#①-反转整个链表" class="headerlink" title="① 反转整个链表"></a>① 反转整个链表</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211150152221.png"></p><p><strong>代码1：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 常规双指针</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">//用保存结果</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">//保存下个结点</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>       <span class="token comment">//头结点接p链表后续</span>            p <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token comment">//每轮将一个结点反转</span>            cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token comment">//cur指针下移</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/* 如，输入[1,2,3,4,5]第一轮while运行完：cur:2->3->4->5->nullp:1->nulltemp:2->3->4->5->null第二轮完：cur:3->4->5->nullp:2->1->null.......*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归</span><span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 链表只有一个节点的时候反转也是它自己，直接返回即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点</span>    <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让下一个节点的next指向自己</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 自己的next废弃掉</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 返回的是最深处的last，也就是原链表的最后一个节点</span>    <span class="token keyword">return</span> last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>reverse(head.next)</code>运行后</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211151955422.png"></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211151904100.png"></p><h4 id="②-反转链表的一部分"><a href="#②-反转链表的一部分" class="headerlink" title="② 反转链表的一部分"></a>② 反转链表的一部分</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title.png"></p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1-2-3-4-5，要反转2-4，就把3摘下来，插到1-2之间，此时成了1-3-2-4-5。再把4摘下来，插到1-3之间，就成了1-4-3-2-5。提前加一个头结点可以省去边界麻烦。*/</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 虚拟头结点</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 结果结点，最后输出res.next</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token comment">// 变量值，控制指针移动</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 将 pre 移动到要反转的区域右侧</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反转的最右侧结点</span>        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 要反转的点，在例子中，第一轮为3，第二轮为4</span>            <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                        <span class="token comment">// 控制反转次数</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③K个一组反转链表"><a href="#③K个一组反转链表" class="headerlink" title="③K个一组反转链表"></a>③K个一组反转链表</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221101527109.png"></p><p><strong>代码1：递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span><span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> cur <span class="token operator">=</span> a<span class="token punctuation">;</span> nxt <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token comment">// while 终止的条件改一下就行了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> nxt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回反转后的头结点</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 区间 [a, b) 包含 k 个待反转元素</span>        <span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        a <span class="token operator">=</span> b <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 不足 k 个，不需要反转，base case</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反转前 k 个元素</span>        <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归反转后续链表并连接起来</span>        a<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221104930736.png"></p><p><strong>链表是一种兼具递归和迭代性质的数据结构</strong></p><p><strong>代码2：迭代</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过先计算链表长度来确定循环次数</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prev <span class="token operator">=</span> res<span class="token punctuation">,</span> curr <span class="token operator">=</span> head<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>        res<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 获得链表长度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 重置 curr 位置</span>    curr <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 反转次数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 组内反转</span>                <span class="token comment">/*                在每个组内，把cur后面的一个数提到最前面，拿12345， k=3举例，第一组就是123，1为cur                循环中，cur指向从未变化，第一轮把1后面的2提到最前面，变成213，第二轮把1后面的3，提到头部，变成321                */</span>                nxt <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> nxt<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                nxt<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> nxt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-回文链表"><a href="#1-7-回文链表" class="headerlink" title="1.7 回文链表"></a>1.7 回文链表</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221112847861.png"></p><p><strong>代码1：使用反转技巧</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 快慢指针技巧找中点</span>        <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// fast指针没有指向null，说明链表长度为奇数，slow还要再前进一步</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 反转后比较回文串</span>        <span class="token class-name">ListNode</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> right <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*算法总体的时间复杂度 O(N)，空间复杂度 O(1)，但破坏了原有的链表结构*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 合并代码</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 快慢指针找中点</span>        <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">,</span> pre<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 反转</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>            slow <span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// 比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">!=</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：用栈</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 利用栈先进后出的特性，将链表数据放入栈中，然后链表数据顺序拿出与栈顶元素比较*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> rear <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rear<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            rear <span class="token operator">=</span> rear<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rear <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token punctuation">.</span>val <span class="token operator">!=</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            rear <span class="token operator">=</span> rear<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之框架思维</title>
      <link href="/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/"/>
      <url>/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="所谓框架思维"><a href="#所谓框架思维" class="headerlink" title="所谓框架思维"></a>所谓框架思维</h3><h4 id="一、存储方式"><a href="#一、存储方式" class="headerlink" title="一、存储方式"></a>一、存储方式</h4><p>数据结构的存储方式只有两种：<strong>数组（顺序存储）</strong>、<strong>链表（链式存储）</strong></p><p>散列表、栈、队列、堆、树、图等等各种数据结构都属于「上层建筑」，而数组和链表才是「结构基础」。这些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作。</p><ol><li><p><strong>「队列」</strong>、<strong>「栈」</strong>这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。</p></li><li><p><strong>「图」</strong>的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。</p></li><li><p><strong>「散列表」</strong>就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。</p></li><li><p><strong>「树」</strong>，用数组实现就是<strong>「堆」</strong>，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。</p></li><li><p><strong>二者的优缺点如下</strong>：</p><p><strong>数组</strong>由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p><p><strong>链表</strong>因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以<strong>不能随机访问</strong>；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p></li></ol><h4 id="二、数据结构的基本操作"><a href="#二、数据结构的基本操作" class="headerlink" title="二、数据结构的基本操作"></a>二、数据结构的基本操作</h4><p>数据结构种类很多，但其基本操作无非就是遍历+访问，也就是：<strong>增删查改</strong></p><p>形式分两种：<strong>线性和非线性</strong></p><p><strong>线性就是 for/while 迭代为代表，非线性就是递归为代表。</strong></p><p><strong>数据遍历框架，典型的线性迭代结构</strong>：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void traverse(int[] arr)&#123;for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;&#x2F;&#x2F;迭代访问arr[i]&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>链表遍历框架，兼具迭代和递归结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的单链表节点 *&#x2F;class ListNode &#123;    int val;    ListNode next;&#125;void traverse(ListNode head) &#123;    for (ListNode p &#x3D; head; p !&#x3D; null; p &#x3D; p.next) &#123;        &#x2F;&#x2F; 迭代访问 p.val    &#125;&#125;void traverse(ListNode head) &#123;    &#x2F;&#x2F; 递归访问 head.val    traverse(head.next);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树遍历框架，典型的非线性递归遍历结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的二叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode left, right;&#125;void traverse(TreeNode root) &#123;    &#x2F;&#x2F; 前序遍历代码位置    traverse(root.left);    &#x2F;&#x2F; 中序遍历代码位置    traverse(root.right);    &#x2F;&#x2F; 后序遍历代码位置&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树框架可以扩展为 N 叉树的遍历框架：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的 N 叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode[] children;&#125;void traverse(TreeNode root) &#123;    for (TreeNode child : root.children)        traverse(child);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>N</code>叉树的遍历又可以扩展为图的遍历，因为图就是好几 <code>N</code> 叉棵树的结合体。但图是可能出现环的，用个布尔数组 <code>visited</code> 做标记来解决。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>学会利用框架思维，<strong>涉及到递归问题，学着使用树的遍历框架</strong>，若二叉树框架不行，扩展到N叉树遍历框架，将思路转化为代码，这是个任重道远的问题，<strong>但只要有心，谁都可以学好。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2022/02/07/hexo-da-jian-bo-ke/"/>
      <url>/2022/02/07/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="1-1-下载并安装node-js"><a href="#1-1-下载并安装node-js" class="headerlink" title="1.1 下载并安装node.js"></a>1.1 下载并安装node.js</h4><ul><li>官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装后验证：node -v</li></ul><h4 id="1-2-下载并安装git"><a href="#1-2-下载并安装git" class="headerlink" title="1.2 下载并安装git"></a>1.2 下载并安装git</h4><ul><li>官网下载:  <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装后验证：git -v</li></ul><h4 id="1-3-命令行安装cnpm"><a href="#1-3-命令行安装cnpm" class="headerlink" title="1.3  命令行安装cnpm"></a>1.3  命令行安装cnpm</h4><ul><li>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code></li><li>安装后验证：cnpm -v</li></ul><h4 id="1-4-命令行安装hexo"><a href="#1-4-命令行安装hexo" class="headerlink" title="1.4 命令行安装hexo"></a>1.4 命令行安装hexo</h4><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证：hexo  -v</li></ul><h3 id="二、配置github"><a href="#二、配置github" class="headerlink" title="二、配置github"></a>二、配置github</h3><p><strong>创建仓库：</strong></p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了。每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><strong>注意：</strong></p><ul><li>注册的邮箱一定要验证，否则不会成功</li><li>仓库名字必须是：username.github.io，其中username是你的用户名</li></ul><h3 id="三、配置SSH免密登录"><a href="#三、配置SSH免密登录" class="headerlink" title="三、配置SSH免密登录"></a>三、配置SSH免密登录</h3><p>提交代码需要拥有github权限才可以，但是直接使用用户名和密码不安全，所以使用ssh key来解决本地和服务器的连接问题。</p><p><strong>操作步骤：</strong></p><ol><li><p>首先打开电脑文件夹，找到C:\Users\用户名\.ssh文件夹并删除</p></li><li><p>在C:\Users\用户名文件夹下右键打开Git Bash Here输入命令：</p><p>ssh-keygen -t rsa -C github邮件地址  </p><p>生成.ssh秘钥，输入后连敲三次回车</p></li><li><p>生成了一个新的 C:\Users\用户名\.ssh文件夹，打开这个文件夹，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容</p></li><li><p>打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title随便填，保存即可</p></li><li><p>检测是否设置成功：</p><p>输入命令：  <code>$ ssh -T git@github.com</code>        # 注意邮箱地址不用改</p><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p></li><li><p>此时还需要配置：</p><p>$ git config –global user.name “git用户名”             // 你的github用户名，非昵称</p><p>$ git config –global user.email  “<a href="mailto:&#x78;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#x78;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“      // 填写你的github注册邮箱</p></li></ol><h3 id="四、使用hexo搭建博客"><a href="#四、使用hexo搭建博客" class="headerlink" title="四、使用hexo搭建博客"></a>四、使用hexo搭建博客</h3><h4 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h4><ol><li><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），由于这个文件夹将来就作为存放代码的地方，所以最好不要随便放</p></li><li><p>在该文件夹下右键打开 Git Bash Here，输入hexo init 初始化</p><p>注意：</p><p>​    这里可能会出现Failed to install dependencies的问题，运行 npm install就行；最终会有一行INFO Start blogging with Hexo！如果有那就运行完成</p></li><li><p>执行以下命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g   <span class="token comment">#生成</span>$ hexo s   <span class="token comment">#启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>  即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见</p><p>解决端口冲突问题请参考这篇文章<a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">https://www.runoob.com/w3cnote/windows-finds-port-usage.html</a></p><p>到这里就完成了hexo的本地部分，后面进行部署到github上</p></li></ol><h4 id="4-2-将博客部署到github"><a href="#4-2-将博客部署到github" class="headerlink" title="4.2 将博客部署到github"></a>4.2 将博客部署到github</h4><ol><li><p>在上述文件目录下安装 hexo-deployer-git 插件</p><ul><li>安装命令： npm install hexo-deployer-git –save</li><li>必须安装，否则执行hexo d 的话会报错误</li></ul></li><li><p>编辑文件目录下的_config.yml 文件, 在文件末尾添加如下内容：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:chenkey837/chenkey837.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其中 repo 中的内容即为 github 个人主页链接地址</p></li><li><p>在文件目录下，输入命令：hexo d 将本地 blog 推送到 github仓库, 前面若<strong>没有进行SSH免密操作</strong>，这里则需要输入 username &amp; pwd</p></li></ol><p>至此博客的初始化基本完成，后续进行主题更换，现域名为<a href="http://chenkey837.github.io/">http://chenkey837.github.io/</a></p><h3 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h3><h4 id="5-1-寻找主题"><a href="#5-1-寻找主题" class="headerlink" title="5.1 寻找主题"></a>5.1 寻找主题</h4><ul><li><p>hexo官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>可在里面下载主题，点击主题名即可跳转到github上，也可以直接在github上搜索主题</p></li><li><p>寻找完后，本博客使用github上一个大佬的主题blinkfox/hexo-theme-matery</p></li><li><p>链接：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></li></ul><h4 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a>5.2 下载主题</h4><ol><li><p>Git Bash Here中先cd到hexo目录下</p></li><li><p>再输入命令 $ git clone 主题http链接  themes/主题名称，这里若http链接clone失败，按照前文操作下来可以用SSH链接clone，链接为<a href="">git@github.com:blinkfox/hexo-theme-matery.git</a></p><p>注意：theme 文件夹下存放的就是博客的主题，主题是否下载成功可到该目录下查看</p></li></ol><h4 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a>5.3 使用主题</h4><ul><li>打开hexo目录下的_config.yml文件，在里面找到theme: landscape改为theme: blinkfox  （blinkfox为要使用的主题名）,然后重新执行hexo g来重新生成</li><li>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再执行hexo g 和 hexo s 重新生成和发布</li><li>之后hexo d推送到github仓库</li><li>再次在浏览器中输入对应域名, 即可发现主题已更换，若主题仍无更换，则将将根_config.yml文件中的 branch: master改为main</li><li>音乐id：7264784219</li></ul><h4 id="5-4-修改主题内容"><a href="#5-4-修改主题内容" class="headerlink" title="5.4 修改主题内容"></a>5.4 修改主题内容</h4><p>使用的是blinkfox主题，后期相关修改参考大佬发的主题文档</p><p>文档链接：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><ul><li>注意：一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的</li><li>大致在下图的文件夹里面修改文件，记得修改后的文件需要关闭后，再在hexo根目录右键打开Git Bash Here，输入两个命令：hexo g 重新生成，hexo s 开启本地预览服务,等修改的符合要求了，再输入 hexo d  推送到github仓库即可</li><li>这样就可以输入网址查看更改后的内容了</li></ul><p>文档上没有提及的修改：</p><ul><li>返回按钮样式修改：在主题下面的 blinkfox\layout_partial 文件夹中的 back-top.esj 文件中修改</li></ul><p><strong>特别注意：</strong></p><ul><li>修改生成的默认页面信息，要到主题下面的_config.yml文件里面去改，而不是根目录下的_config.yml文件</li></ul><h3 id="六、写博客"><a href="#六、写博客" class="headerlink" title="六、写博客"></a>六、写博客</h3><h4 id="6-1-写博客的步骤"><a href="#6-1-写博客的步骤" class="headerlink" title="6.1 写博客的步骤"></a>6.1 写博客的步骤</h4><ol><li><p>创建.md文件，定位到我们的hexo根目录，Git Bash Here 中执行命令：</p><p>  <code>hexo new &#39;my-first-blog&#39;</code>  </p></li><li><p>编写并保存,用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可</p></li><li><p>清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong><code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>的区别？</p><ul><li>hexo new page ‘My-second-blog’最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。</li></ul></li></ol><h4 id="6-2-博客插入图片（使用Typora）"><a href="#6-2-博客插入图片（使用Typora）" class="headerlink" title="6.2 博客插入图片（使用Typora）"></a>6.2 博客插入图片（使用Typora）</h4><p>在md文件中插入图片的语法为<code>![]()</code>。</p><p>其中<strong>方括号</strong>是图片描述，<strong>圆括号</strong>是图片路径。</p><p>一般来说有三种图片路径，分别是<strong>相对路径，绝对路径和网络路径</strong>。</p><p><strong>完美步骤：</strong></p><ol><li><p>安装插件，在hexo根目录打开Git Bash，执行</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改配置_config.yml如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span>marked: prependRoot: <span class="token boolean">true</span> postAsset: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>文件-&gt;偏好设置</code>或者直接<code>&lt;C-,&gt;</code>进入设置，设置如下</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/image-20220208205937399.png"></p><p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。</p></li><li><p>当插入完所有的图片后，我们还需要删除每个图片路径中的<code>文件名/</code>。在Typora编辑器中，使用<code>&lt;C-f&gt;</code>快捷键，将所有的<code>文章名/</code>替换为空即可删除。</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/9d8985d94df7b36bfc94c9ce200261f9.png"> </p></li><li><p>最后再将博客上传，图片就会随着文章一起打包。在网页中就可以看到正常显示的图片</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/29/hello-world/"/>
      <url>/2022/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
