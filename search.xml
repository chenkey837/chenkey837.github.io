<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode刷题之框架思维</title>
      <link href="/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/"/>
      <url>/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="所谓框架思维"><a href="#所谓框架思维" class="headerlink" title="所谓框架思维"></a>所谓框架思维</h3><h4 id="一、存储方式"><a href="#一、存储方式" class="headerlink" title="一、存储方式"></a>一、存储方式</h4><p>数据结构的存储方式只有两种：<strong>数组（顺序存储）</strong>、<strong>链表（链式存储）</strong></p><p>散列表、栈、队列、堆、树、图等等各种数据结构都属于「上层建筑」，而数组和链表才是「结构基础」。这些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作。</p><ol><li><p><strong>「队列」</strong>、<strong>「栈」</strong>这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。</p></li><li><p><strong>「图」</strong>的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。</p></li><li><p><strong>「散列表」</strong>就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。</p></li><li><p><strong>「树」</strong>，用数组实现就是<strong>「堆」</strong>，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。</p></li><li><p><strong>二者的优缺点如下</strong>：</p><p><strong>数组</strong>由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p><p><strong>链表</strong>因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以<strong>不能随机访问</strong>；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p></li></ol><h4 id="二、数据结构的基本操作"><a href="#二、数据结构的基本操作" class="headerlink" title="二、数据结构的基本操作"></a>二、数据结构的基本操作</h4><p>数据结构种类很多，但其基本操作无非就是遍历+访问，也就是：<strong>增删查改</strong></p><p>形式分两种：<strong>线性和非线性</strong></p><p><strong>线性就是 for/while 迭代为代表，非线性就是递归为代表。</strong></p><p><strong>数据遍历框架，典型的线性迭代结构</strong>：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void traverse(int[] arr)&#123;for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;&#x2F;&#x2F;迭代访问arr[i]&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>链表遍历框架，兼具迭代和递归结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的单链表节点 *&#x2F;class ListNode &#123;    int val;    ListNode next;&#125;void traverse(ListNode head) &#123;    for (ListNode p &#x3D; head; p !&#x3D; null; p &#x3D; p.next) &#123;        &#x2F;&#x2F; 迭代访问 p.val    &#125;&#125;void traverse(ListNode head) &#123;    &#x2F;&#x2F; 递归访问 head.val    traverse(head.next);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树遍历框架，典型的非线性递归遍历结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的二叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode left, right;&#125;void traverse(TreeNode root) &#123;    &#x2F;&#x2F; 前序遍历代码位置    traverse(root.left);    &#x2F;&#x2F; 中序遍历代码位置    traverse(root.right);    &#x2F;&#x2F; 后序遍历代码位置&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树框架可以扩展为 N 叉树的遍历框架：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的 N 叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode[] children;&#125;void traverse(TreeNode root) &#123;    for (TreeNode child : root.children)        traverse(child);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>N</code>叉树的遍历又可以扩展为图的遍历，因为图就是好几 <code>N</code> 叉棵树的结合体。但图是可能出现环的，用个布尔数组 <code>visited</code> 做标记来解决。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>学会利用框架思维，<strong>涉及到递归问题，学着使用树的遍历框架</strong>，若二叉树框架不行，扩展到N叉树遍历框架，将思路转化为代码，这是个任重道远的问题，<strong>但只要有心，谁都可以学好。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2022/02/07/hexo-da-jian-bo-ke/"/>
      <url>/2022/02/07/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h4 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h4><h5 id="1-1-下载并安装node-js"><a href="#1-1-下载并安装node-js" class="headerlink" title="1.1 下载并安装node.js"></a>1.1 下载并安装node.js</h5><ul><li>官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装后验证：node -v</li></ul><h5 id="1-2-下载并安装git"><a href="#1-2-下载并安装git" class="headerlink" title="1.2 下载并安装git"></a>1.2 下载并安装git</h5><ul><li>官网下载:  <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装后验证：git -v</li></ul><h5 id="1-3-命令行安装cnpm"><a href="#1-3-命令行安装cnpm" class="headerlink" title="1.3  命令行安装cnpm"></a>1.3  命令行安装cnpm</h5><ul><li>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code></li><li>安装后验证：cnpm -v</li></ul><h5 id="1-4-命令行安装hexo"><a href="#1-4-命令行安装hexo" class="headerlink" title="1.4 命令行安装hexo"></a>1.4 命令行安装hexo</h5><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证：hexo  -v</li></ul><h4 id="二、配置github"><a href="#二、配置github" class="headerlink" title="二、配置github"></a>二、配置github</h4><p><strong>创建仓库：</strong></p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了。每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><strong>注意：</strong></p><ul><li>注册的邮箱一定要验证，否则不会成功</li><li>仓库名字必须是：username.github.io，其中username是你的用户名</li></ul><h4 id="三、配置SSH免密登录"><a href="#三、配置SSH免密登录" class="headerlink" title="三、配置SSH免密登录"></a>三、配置SSH免密登录</h4><p>提交代码需要拥有github权限才可以，但是直接使用用户名和密码不安全，所以使用ssh key来解决本地和服务器的连接问题。</p><p><strong>操作步骤：</strong></p><ol><li><p>首先打开电脑文件夹，找到C:\Users\用户名\.ssh文件夹并删除</p></li><li><p>在C:\Users\用户名文件夹下右键打开Git Bash Here输入命令：</p><p>ssh-keygen -t rsa -C github邮件地址  </p><p>生成.ssh秘钥，输入后连敲三次回车</p></li><li><p>生成了一个新的 C:\Users\用户名\.ssh文件夹，打开这个文件夹，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容</p></li><li><p>打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title随便填，保存即可</p></li><li><p>检测是否设置成功：</p><p>输入命令：  <code>$ ssh -T git@github.com</code>        # 注意邮箱地址不用改</p><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p></li><li><p>此时还需要配置：</p><p>$ git config –global user.name “git用户名”             // 你的github用户名，非昵称</p><p>$ git config –global user.email  “<a href="mailto:&#120;&#120;&#120;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#120;&#120;&#120;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a>“      // 填写你的github注册邮箱</p></li></ol><h4 id="四、使用hexo搭建博客"><a href="#四、使用hexo搭建博客" class="headerlink" title="四、使用hexo搭建博客"></a>四、使用hexo搭建博客</h4><h5 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h5><ol><li><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），由于这个文件夹将来就作为存放代码的地方，所以最好不要随便放</p></li><li><p>在该文件夹下右键打开 Git Bash Here，输入hexo init 初始化</p><p>注意：</p><p>​    这里可能会出现Failed to install dependencies的问题，运行 npm install就行；最终会有一行INFO Start blogging with Hexo！如果有那就运行完成</p></li><li><p>执行以下命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g   <span class="token comment">#生成</span>$ hexo s   <span class="token comment">#启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>  即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见</p><p>解决端口冲突问题请参考这篇文章<a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">https://www.runoob.com/w3cnote/windows-finds-port-usage.html</a></p><p>到这里就完成了hexo的本地部分，后面进行部署到github上</p></li></ol><h5 id="4-2-将博客部署到github"><a href="#4-2-将博客部署到github" class="headerlink" title="4.2 将博客部署到github"></a>4.2 将博客部署到github</h5><ol><li><p>在上述文件目录下安装 hexo-deployer-git 插件</p><ul><li>安装命令： npm install hexo-deployer-git –save</li><li>必须安装，否则执行hexo d 的话会报错误</li></ul></li><li><p>编辑文件目录下的_config.yml 文件, 在文件末尾添加如下内容：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:chenkey837/chenkey837.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其中 repo 中的内容即为 github 个人主页链接地址</p></li><li><p>在文件目录下，输入命令：hexo d 将本地 blog 推送到 github仓库, 前面若<strong>没有进行SSH免密操作</strong>，这里则需要输入 username &amp; pwd</p></li></ol><p>至此博客的初始化基本完成，后续进行主题更换，现域名为<a href="http://chenkey837.github.io/">http://chenkey837.github.io/</a></p><h4 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h4><h5 id="5-1-寻找主题"><a href="#5-1-寻找主题" class="headerlink" title="5.1 寻找主题"></a>5.1 寻找主题</h5><ul><li><p>hexo官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>可在里面下载主题，点击主题名即可跳转到github上，也可以直接在github上搜索主题</p></li><li><p>寻找完后，本博客使用github上一个大佬的主题blinkfox/hexo-theme-matery</p></li><li><p>链接：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></li></ul><h5 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a>5.2 下载主题</h5><ol><li><p>Git Bash Here中先cd到hexo目录下</p></li><li><p>再输入命令 $ git clone 主题http链接  themes/主题名称，这里若http链接clone失败，按照前文操作下来可以用SSH链接clone，链接为<a href="">git@github.com:blinkfox/hexo-theme-matery.git</a></p><p>注意：theme 文件夹下存放的就是博客的主题，主题是否下载成功可到该目录下查看</p></li></ol><h5 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a>5.3 使用主题</h5><ul><li>打开hexo目录下的_config.yml文件，在里面找到theme: landscape改为theme: blinkfox  （blinkfox为要使用的主题名）,然后重新执行hexo g来重新生成</li><li>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再执行hexo g 和 hexo s 重新生成和发布</li><li>之后hexo d推送到github仓库</li><li>再次在浏览器中输入对应域名, 即可发现主题已更换，若主题仍无更换，则将将根_config.yml文件中的 branch: master改为main</li><li>音乐id：7264784219</li></ul><h5 id="5-4-修改主题内容"><a href="#5-4-修改主题内容" class="headerlink" title="5.4 修改主题内容"></a>5.4 修改主题内容</h5><p>使用的是blinkfox主题，后期相关修改参考大佬发的主题文档</p><p>文档链接：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><ul><li>注意：一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的</li><li>大致在下图的文件夹里面修改文件，记得修改后的文件需要关闭后，再在hexo根目录右键打开Git Bash Here，输入两个命令：hexo g 重新生成，hexo s 开启本地预览服务,等修改的符合要求了，再输入 hexo d  推送到github仓库即可</li><li>这样就可以输入网址查看更改后的内容了</li></ul><p>文档上没有提及的修改：</p><ul><li>返回按钮样式修改：在主题下面的 blinkfox\layout_partial 文件夹中的 back-top.esj 文件中修改</li></ul><p>特别注意：</p><ul><li>修改生成的默认页面信息，要到主题下面的_config.yml文件里面去改，而不是根目录下的_config.yml文件</li></ul><h4 id="六、写博客"><a href="#六、写博客" class="headerlink" title="六、写博客"></a>六、写博客</h4><h5 id="6-1-写博客的步骤"><a href="#6-1-写博客的步骤" class="headerlink" title="6.1 写博客的步骤"></a>6.1 写博客的步骤</h5><ol><li><p>创建.md文件，定位到我们的hexo根目录，Git Bash Here 中执行命令：</p><p>  <code>hexo new &#39;my-first-blog&#39;</code>  </p></li><li><p>编写并保存,用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可</p></li><li><p>清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong><code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>的区别？</p><ul><li>hexo new page ‘My-second-blog’最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。</li></ul></li></ol><h5 id="6-2-博客插入图片（使用Typora）"><a href="#6-2-博客插入图片（使用Typora）" class="headerlink" title="6.2 博客插入图片（使用Typora）"></a>6.2 博客插入图片（使用Typora）</h5><p>在md文件中插入图片的语法为<code>![]()</code>。</p><p>其中<strong>方括号</strong>是图片描述，<strong>圆括号</strong>是图片路径。</p><p>一般来说有三种图片路径，分别是<strong>相对路径，绝对路径和网络路径</strong>。</p><p><strong>完美步骤：</strong></p><ol><li><p>安装插件，在hexo根目录打开Git Bash，执行</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改配置_config.yml如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span>marked: prependRoot: <span class="token boolean">true</span> postAsset: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>文件-&gt;偏好设置</code>或者直接<code>&lt;C-,&gt;</code>进入设置，设置如下</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/image-20220208205937399.png"></p><p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。</p></li><li><p>当插入完所有的图片后，我们还需要删除每个图片路径中的<code>文件名/</code>。在Typora编辑器中，使用<code>&lt;C-f&gt;</code>快捷键，将所有的<code>文章名/</code>替换为空即可删除。</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/9d8985d94df7b36bfc94c9ce200261f9.png"> </p></li><li><p>最后再将博客上传，图片就会随着文章一起打包。在网页中就可以看到正常显示的图片</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/29/hello-world/"/>
      <url>/2022/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
