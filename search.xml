<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java之面向对象基础篇二</title>
      <link href="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/"/>
      <url>/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Java之面向对象基础篇二"><a href="#Java之面向对象基础篇二" class="headerlink" title="Java之面向对象基础篇二"></a>Java之面向对象基础篇二</h1><h2 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h2><p><strong>继承</strong>是<code>java</code>面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><p><strong>继承</strong>就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为，也可以在子类中重新定义，追加属性和方法。</p><h3 id="1、继承的格式"><a href="#1、继承的格式" class="headerlink" title="1、继承的格式"></a>1、继承的格式</h3><p>在 <code>Java</code> 中通过 <code>extends</code> 关键字可以申明一个类是从另外一个类继承而来的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/*父类也被称为基类、超类子类也被称为派生类子类可以有父类的内容，还可以有自己特有的内容*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、继承的好处和弊端"><a href="#2、继承的好处和弊端" class="headerlink" title="2、继承的好处和弊端"></a>2、继承的好处和弊端</h3><p><strong>好处：</strong></p><ul><li>提高代码的复用性（多个类相同的成员可以放到同一个类中）</li><li>提高代码的维护性（如果方法的代码需要修改，修改一处即可）</li></ul><p><strong>弊端：</strong></p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li></ul><p><strong>什么时候使用继承</strong></p><ul><li>继承体现的关系：<strong>is a</strong></li><li>假设法：若有两个类 A 和 B ，如果满足 A 是 B 的一种，或者 B 是 A 的一种，就说明存在继承关系</li></ul><h3 id="3、继承的类型"><a href="#3、继承的类型" class="headerlink" title="3、继承的类型"></a>3、继承的类型</h3><p> <strong><code>Java</code> 不支持多继承，但支持多重继承</strong></p><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/java-extends-2020-12-08-16459688766032.png"></p><h3 id="4、继承中变量的访问特点"><a href="#4、继承中变量的访问特点" class="headerlink" title="4、继承中变量的访问特点"></a>4、继承中变量的访问特点</h3><p>在子类方法中访问变量</p><ul><li>子类局部范围找，即方法内部找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>若没有就报错</li></ul><h3 id="5、继承关键字"><a href="#5、继承关键字" class="headerlink" title="5、继承关键字"></a>5、继承关键字</h3><p>继承可以使用 <code>extends</code> 和 <code>implements</code> 这两个关键字来实现继承，而且所有的类都是继承于 <code>java.lang.Object</code>，当一个类没有继承的两个关键字，则默认继承<code>object</code>（这个类在 <code>java.lang</code> 包中，所以不需要 <code>import</code>）祖先类</p><h4 id="①-extends关键字"><a href="#①-extends关键字" class="headerlink" title="① extends关键字"></a>① extends关键字</h4><p>在 <code>Java</code> 中，类的继承是<strong>单一继承</strong>，也就是说，一个子类只能拥有一个父类，所以 <code>extends</code> 只能继承一个类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-implements关键字"><a href="#②-implements关键字" class="headerlink" title="② implements关键字"></a>② implements关键字</h4><p>使用 <code>implements</code> 关键字可以变相的使<code>java</code>具有多继承的特性，使用范围为<strong>类继承接口</strong>的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-super与this关键字"><a href="#③-super与this关键字" class="headerlink" title="③ super与this关键字"></a>③ super与this关键字</h4><p><code>super</code>关键字：可以通过<code>super</code>关键字来实现对父类成员的访问，用来<strong>引用当前对象的父类</strong></p><p><code>this</code>关键字：<strong>指向自己的引用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// this 调用自己的方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// super 调用父类方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token comment">// 访问本类成员变量</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment">// 访问父类成员变量</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④-final关键字"><a href="#④-final关键字" class="headerlink" title="④ final关键字"></a>④ final关键字</h4><p><code>final</code> 关键字声明类可以把类定义为<strong>不能继承的</strong>，即最终类；或者用于修饰方法，该方法<strong>不能被子类重写</strong></p><ul><li><p>声明类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span><span class="token comment">//类体&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>声明方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符<span class="token punctuation">(</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span><span class="token keyword">protected</span><span class="token punctuation">)</span> <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>注</strong>:实例变量也可以被定义为 <code>final</code>，被定义为 <code>final</code> 的变量不能被修改。被声明为 <code>final</code> 类的方法自动地声明为 <code>final</code>，但是实例变量并不是 <code>final</code></p><h3 id="6、构造器"><a href="#6、构造器" class="headerlink" title="6、构造器"></a>6、构造器</h3><ul><li><strong>子类是不继承父类的构造器</strong>（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果<strong>父类的构造器带有参数</strong>，则必须在子类的构造器中显式地通过 <code>super</code> 关键字调用父类的构造器并配以适当的参数列表。</li><li>如果<strong>父类构造器没有参数</strong>，则在子类的构造器中不需要使用 <code>super</code> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</li><li>子类中所有的构造方法<strong>默认都会访问父类中无参的构造方法</strong>，若要访问带参，则需要显式地通过 <code>super</code> 关键字调用父类的构造器</li><li>每一个子类的构造方法的第一条语句默认都是：<code>super()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">SuperClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass(int n)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SubClass 类继承</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 自动调用父类的无参数构造器</span>    <span class="token comment">// super(); 默认会有，不用写</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用父类中带有参数的构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass(int n):"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// SubClass2 类继承</span><span class="token keyword">class</span> <span class="token class-name">SubClass2</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token class-name">SubClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用父类中带有参数的构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">SubClass2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 自动调用父类的无参数构造器</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass2(int n):"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、继承中成员方法的访问特点"><a href="#7、继承中成员方法的访问特点" class="headerlink" title="7、继承中成员方法的访问特点"></a>7、继承中成员方法的访问特点</h3><p>通过子类对象访问一个方法</p><ul><li><p>子类成员范围找</p></li><li><p>父类成员范围找</p></li><li><p>若没有就报错</p></li></ul><h2 id="二、方法重写和重载"><a href="#二、方法重写和重载" class="headerlink" title="二、方法重写和重载"></a>二、方法重写和重载</h2><h3 id="1、重写"><a href="#1、重写" class="headerlink" title="1、重写"></a>1、重写</h3><p>重写是<strong>子类对父类的允许访问的方法的实现过程进行重新编写</strong>, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong>沿袭父类的功能，又定义了子类的特有内容</p><p>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物可以移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 加注解，检查重写方法的方法声明的正确性</span>   <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以跑和走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以吠叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDog</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Animal 对象</span>      <span class="token class-name">Animal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dog 对象</span>       a<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 Animal 类的方法</span>      b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 Dog 类的方法，重写</span>      b<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，b 的引用类型 Animal 没有 bark 方法</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：</strong></p><ul><li>参数列表与被重写方法的<strong>参数列表必须完全相同</strong></li><li>返回类型与被重写方法的<strong>返回类型</strong>可以不相同，但是必须是父类返回值的派生类（<code>java5</code> 及更早版本返回类型要一样，<code>java7</code> 及更高版本可以不同）</li><li><strong>访问权限</strong>不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 <code>public</code>，那么在子类中重写该方法就不能声明为 <code>protected</code>（<code>public</code> &gt; 默认 &gt; <code>private</code>）</li><li>父类的成员方法只能被它的子类重写</li><li>声明为 <code>final</code> 的方法不能被重写</li><li>声明为 <code>static</code> 的方法不能被重写，但是能够被再次声明</li><li>子类和父类在<strong>同一个包</strong>中，那么子类可以重写父类所有方法，<strong>除了声明为 <code>private</code> 和 <code>final</code> 的方法</strong></li><li>子类和父类<strong>不在同一个包</strong>中，那么子类<strong>只能够重写父类的声明为 <code>public</code> 和 <code>protected</code> 的非 <code>final</code> 方法</strong></li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法<strong>不能抛出新的强制性异常</strong>，或者比被重写方法声明的更广泛的强制性异常，反之则可以。例如：父类的一个方法申明了一个检查异常 <code>IOException</code>，但是在重写这个方法的时候不能抛出 <code>Exception</code> 异常，因为 <code>Exception</code> 是 <code>IOException</code> 的父类，抛出 <code>IOException</code> 异常或者 <code>IOException</code> 的子类异常。</li><li><strong>构造方法不能被重写</strong></li><li>如果不能继承一个类，则不能重写该类的方法</li></ul><h3 id="2、重载"><a href="#2、重载" class="headerlink" title="2、重载"></a>2、重载</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而<strong>参数不同</strong>。返回类型可以相同也可以不同。</p><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p><strong>最常用的地方就是构造器的重载</strong></p><p><strong>重载规则:</strong></p><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型</li><li>被重载的方法可以改变访问修饰符</li><li>被重载的方法可以声明新的或更广的检查异常</li><li>方法能够在同一个类中或者在一个子类中被重载</li><li>无法以返回值类型作为重载函数的区分标准</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overloading</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//以下两个参数类型顺序不同</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"returntest3"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"returntest4"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Overloading</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Overloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、重写与重载之间的区别"><a href="#3、重写与重载之间的区别" class="headerlink" title="3、重写与重载之间的区别"></a>3、重写与重载之间的区别</h3><table><thead><tr><th align="center">区别点</th><th align="center">重载方法</th><th align="center">重写方法</th></tr></thead><tbody><tr><td align="center">参数列表</td><td align="center">必须修改</td><td align="center">一定不能修改</td></tr><tr><td align="center">返回类型</td><td align="center">可以修改</td><td align="center">一定不能修改</td></tr><tr><td align="center">异常</td><td align="center">可以修改</td><td align="center">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="center">访问</td><td align="center">可以修改</td><td align="center">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>方法的重写(<code>Overriding</code>)和重载(<code>Overloading</code>)是<code>java</code>多态性的不同表现，<strong>重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</strong></p><ul><li>方法重载是一个类中定义了多个方法名相同，而他们的参数的数量不同或数量相同而类型和次序不同，则称为方法的重载(Overloading)。</li><li>方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样，返回值也一样的方法，就称为重写(Overriding)。</li><li>方法重载是一个类的多态性表现，而方法重写是子类与父类的一种多态性表现。</li></ul><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/overloading-vs-overriding.png"></p><p><img src="/2022/02/27/java-zhi-mian-xiang-dui-xiang-ji-chu-pian-er/20171102-1.png"></p><h2 id="三、包（package）"><a href="#三、包（package）" class="headerlink" title="三、包（package）"></a>三、包（package）</h2><h3 id="1、包的作用"><a href="#1、包的作用" class="headerlink" title="1、包的作用"></a>1、包的作用</h3><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用，对类进行分类管理</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以<strong>避免名字冲突</strong></li><li>包也限定了<strong>访问权限</strong>，拥有包访问权限的类才能访问某个包中的类</li></ul><p><code>Java</code> 使用包（<code>package</code>）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（<code>class</code>）、接口、枚举（<code>enumerations</code>）和注释（<code>annotation</code>）等。</p><h3 id="2、import-关键字"><a href="#2、import-关键字" class="headerlink" title="2、import 关键字"></a>2、import 关键字</h3><p>为了能够使用某一个包的成员，我们需要在 <code>Java</code> 程序中明确导入该包。使用 “<code>import</code>“ 语句可完成此功能。</p><p>在 <code>java</code> 源文件中 <code>import</code> 语句应位于 <code>package</code> 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">package1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>package2…<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname<span class="token operator">|</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果在一个包中，一个类想要使用本包中的另一个类，那么该包名可以省略</p><h2 id="四、修饰符"><a href="#四、修饰符" class="headerlink" title="四、修饰符"></a>四、修饰符</h2><h3 id="1、权限修饰符"><a href="#1、权限修饰符" class="headerlink" title="1、权限修饰符"></a>1、权限修饰符</h3><p><code>Java</code>中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。<code>Java</code> 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p>我们可以通过以下表来说明访问权限：</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">子孙类(同一包)</th><th align="center">子孙类(不同包)</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code>protected</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y/N</td><td align="center">N</td></tr><tr><td align="center"><code>default</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><code>private</code></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><p><code>protected</code> 需要从以下两个点来分析说明：</p><ul><li><p><strong>子类与基类在同一包中</strong>：被声明为 <code>protected</code> 的变量、方法和构造器能被同一个包中的任何其他类访问；</p></li><li><p><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 <code>protected</code> 方法，而不能访问基类实例的<code>protected</code>方法。</p></li><li><p><strong>接口</strong>及接口的成员变量和成员方法<strong>不能</strong>声明为 <code>protected</code></p></li></ul><h3 id="2、非访问修饰符"><a href="#2、非访问修饰符" class="headerlink" title="2、非访问修饰符"></a>2、非访问修饰符</h3><ul><li><code>static</code> 修饰符，用来修饰类方法和类变量</li><li><code>final</code> 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的</li></ul><h4 id="①-final修饰符"><a href="#①-final修饰符" class="headerlink" title="① final修饰符"></a>① final修饰符</h4><p><code>final</code> 表示”最后的、最终的”含义，变量一旦赋值后，<strong>不能被重新赋值</strong>。被 <code>final</code> 修饰的实例变量必须显式指定初始值。</p><p><code>final</code> 修饰符通常和 <code>static</code> 修饰符一起使用来<strong>创建类常量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// final 修饰基本类型变量</span><span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">// 报错，final 修饰的变量不能重新赋值</span><span class="token comment">// final 修饰引用类型变量</span><span class="token keyword">final</span> <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">// 正确，修饰的是 s，只是地址值不变，内容可改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>final 方法</strong></p><p>父类中的 <code>final</code> 方法可以被子类继承，但是不能被子类重写</p><p>声明 <code>final</code> 方法的主要目的是<strong>防止该方法的内容被修改</strong></p><p>如下所示，使用 <code>final</code> 修饰符声明方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 方法体    &#125; &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>final 类</strong></p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 类体 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②-static修饰符"><a href="#②-static修饰符" class="headerlink" title="② static修饰符"></a>② static修饰符</h4><ul><li><p><strong>静态变量：</strong></p><p><code>static</code> 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 <strong>静态变量也被称为类变量</strong>。<strong>局部变量</strong>不能被声明为 <code>static</code> 变量</p></li><li><p><strong>静态方法：</strong></p><p><code>static</code> 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据</p></li></ul><p><strong>特点：</strong></p><ul><li><p>被类的所有对象共享</p></li><li><p>可以通过类名调用，也可以通过对象名调用，<strong>推荐使用类名调用</strong></p></li><li><p>静态成员方法只能访问静态成员</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之二叉树篇</title>
      <link href="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/"/>
      <url>/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、深入了解前中后序"><a href="#一、深入了解前中后序" class="headerlink" title="一、深入了解前中后序"></a>一、深入了解前中后序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 迭代遍历数组 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 递归遍历数组 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span><span class="token punctuation">&#125;</span><span class="token comment">/* 迭代遍历单链表 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 递归遍历单链表 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单链表和数组的遍历可以是迭代的，也可以是递归的，二叉树这种结构无非就是二叉链表，不过没办法简单改写成迭代形式，所以一般说二叉树的遍历框架都是指递归的形式。</p><p><strong>倒序打印</strong>一条单链表上所有节点的值，实现方式有很多，如果对递归的理解足够透彻，<strong>可以利用后序位置</strong>，在后序位置添加输出代码即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 递归遍历单链表，倒序打印链表元素 */</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span>    <span class="token function">print</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点</strong>，绝不仅仅是三个顺序不同的 List：</p><ul><li>前序位置的代码在刚刚进入一个二叉树节点的时候执行</li><li>后序位置的代码在将要离开一个二叉树节点的时候执行</li><li>中序位置的代码在一个二叉树节点左子树都遍历完，即将开始遍历右子树的时候执行</li></ul><p>画成图，前中后序三个位置在二叉树上是这样：</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225150418112.png"></p><p><strong>每个节点都有「唯一」属于自己的前中后序位置，二叉树的所有问题，就是让你在前中后序位置注入巧妙的代码逻辑，去达到自己的目的</strong>。</p><p>遇到一道二叉树的题目时的通用思考过程是：</p><p><strong>是否可以通过遍历一遍二叉树得到答案？如果不能的话，是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong></p><h3 id="1、后序位置的特殊之处"><a href="#1、后序位置的特殊之处" class="headerlink" title="1、后序位置的特殊之处"></a>1、后序位置的特殊之处</h3><p>和前序位置对比，前序位置的代码执行是自顶向下的，而后序位置的代码执行是自底向上的，<strong>意味着前序位置的代码只能从函数参数中获取父节点传递来的数据，而后序位置的代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据</strong>。</p><p>关于前后序的对比可以就两个问题来回答</p><ol><li>如果把根节点看做第 1 层，如何打印出每一个节点所在的层数？</li><li>如何打印出每个节点的左右子树各有多少节点？</li></ol><p><strong>问题一：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二叉树遍历函数</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序位置</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"节点 %s 在第 %d 层"</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这样调用</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题二：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义：输入一棵二叉树，返回这棵二叉树的节点总数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> leftCount <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightCount <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 后序位置</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"节点 %s 的左子树有 %d 个节点，右子树有 %d 个节点"</span><span class="token punctuation">,</span>            root<span class="token punctuation">,</span> leftCount<span class="token punctuation">,</span> rightCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftCount <span class="token operator">+</span> rightCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>后序位置的特点</strong>，只有后序位置才能通过返回值获取子树的信息。</p><p><strong>换句话说，一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225152117374.png"></p><p>所谓二叉树的「直径」长度，就是任意两个结点之间的路径长度。</p><p>解决这题的关键在于，<strong>每一条二叉树的「直径」长度，就是一个节点的左右子树的最大深度之和</strong>。</p><p>用后序位置思路考虑的代码编写解法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 记录最大直径的长度</span><span class="token keyword">int</span> maxDiameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxDiameter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 后序位置顺便计算最大直径</span>    <span class="token comment">// 将每个节点最大直径(左子树深度+右子树深度)当前最大值比较并取大者</span>    maxDiameter <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDiameter<span class="token punctuation">,</span> left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回节点深度</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、层序遍历"><a href="#2、层序遍历" class="headerlink" title="2、层序遍历"></a>2、层序遍历</h3><p>二叉树题型主要是用来培养递归思维的，而层序遍历属于迭代遍历，其代码框架</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入一棵二叉树的根节点，层序遍历这棵二叉树</span><span class="token keyword">void</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从上到下遍历二叉树的每一层</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从左到右遍历每一层的每个节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将下一层节点放入队列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中<code>while</code> 循环和 <code>for</code> 循环分管从上到下和从左到右的遍历</p><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225153218933.png"></p><p><code>BFS</code>（宽度优先搜索算法）就是从二叉树的层次遍历扩展出来，常用于求无权图的<strong>最短路径</strong>问题</p><h2 id="二、刷题第一期"><a href="#二、刷题第一期" class="headerlink" title="二、刷题第一期"></a>二、刷题第一期</h2><h3 id="1、写递归算法的秘诀"><a href="#1、写递归算法的秘诀" class="headerlink" title="1、写递归算法的秘诀"></a>1、写递归算法的秘诀</h3><p><strong>写递归算法的关键是要明确函数的「定义」是什么，然后相信这个定义，利用这个定义推导最终结果，绝不要跳入递归的细节</strong>。</p><p><strong>写树相关的算法，简单说就是，先搞清楚当前 <code>root</code> 节点「该做什么」以及「什么时候做」，然后根据函数定义递归调用子节点</strong>，递归调用会让孩子节点做相同的事情。</p><ul><li>所谓「该做什么」就是让你想清楚写什么代码能够实现题目想要的效果</li><li>所谓「什么时候做」，就是让你思考这段代码到底应该写在前序、中序还是后序遍历的代码位置上。</li></ul><h3 id="2、实践"><a href="#2、实践" class="headerlink" title="2、实践"></a>2、实践</h3><h4 id="①-翻转二叉树"><a href="#①-翻转二叉树" class="headerlink" title="① 翻转二叉树"></a>① 翻转二叉树</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225160008164.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将整棵树的节点翻转</span><span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// base case</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**** 前序遍历位置 ****/</span>    <span class="token comment">// root 节点需要交换它的左右子节点</span>    <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token comment">// 让左右子节点继续翻转它们的子节点</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*如果把交换左右子节点的代码复制粘贴到后序遍历的位置也是可以的，但是直接放到中序遍历的位置是不行的*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他解法（前中后层序）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用前序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 先序遍历--从顶向下交换</span>        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 保存右子树</span>            <span class="token class-name">TreeNode</span> rightTree <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token comment">// 交换左右子树的位置</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>rightTree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 利用中序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归找到左节点</span>            <span class="token class-name">TreeNode</span> rightNode<span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 保存右节点</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token comment">// 递归找到右节点 继续交换 : 因为此时左右节点已经交换了,所以此时的右节点为root.left</span>            <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用后序遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 后序遍历-- 从下向上交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> leftNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> rightNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>right <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 利用层次遍历</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 层次遍历--直接左右交换即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TreeNode</span> rightTree <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> rightTree<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-填充二叉树节点的右侧指针"><a href="#②-填充二叉树节点的右侧指针" class="headerlink" title="② 填充二叉树节点的右侧指针"></a>② 填充二叉树节点的右侧指针</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225160656228.png"></p><p><strong>二叉树的问题难点在于，如何把题目的要求细化成每个节点需要做的事情</strong>，对于这一题，如果只依赖一个节点的话，肯定是没办法连接「跨父节点」的两个相邻节点的。解法就是增加函数参数，一个节点做不到，就给他安排两个节点，「将每一层二叉树节点连接起来」可以细化成「将每两个相邻节点都连接起来」：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主函数</span><span class="token class-name">Node</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 辅助函数</span><span class="token keyword">void</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node1<span class="token punctuation">,</span> <span class="token class-name">Node</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**** 前序遍历位置 ****/</span>    <span class="token comment">// 将传入的两个节点连接</span>    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>        <span class="token comment">// 连接相同父节点的两个子节点</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 连接跨越父节点的两个子节点</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-二叉树展开为链表"><a href="#③-二叉树展开为链表" class="headerlink" title="③ 二叉树展开为链表"></a>③ 二叉树展开为链表</h4><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225210956086.png"></p><p>在还没操作节点右子树前，不能破坏该节点的右子树指向。所以采用后序遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义：将以 root 为根的树拉平为链表</span><span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// base case</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**** 后序遍历位置 ****/</span>    <span class="token comment">// 此时左右子树已经被拉平成一条链表</span>    <span class="token class-name">TreeNode</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">// 将左子树作为右子树</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 将原先的右子树接到当前右子树的末端</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/25/leetcode-shua-ti-zhi-er-cha-shu-pian/image-20220225212402462.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之集合篇</title>
      <link href="/2022/02/14/java-zhi-ji-he-pian/"/>
      <url>/2022/02/14/java-zhi-ji-he-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p><code>ArrayList</code> 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，可以添加或删除元素。</p><p><code>ArrayList</code> 继承了 <code>AbstractList</code> ，并实现了 <code>List</code> 接口。</p><p><code>ArrayList</code> 类位于 <code>java.util</code> 包中，使用前需要引入它，<strong>语法格式如下</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 引入 ArrayList 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span> <span class="token comment">// 初始化</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> objectName <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　 <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>E</strong>： 泛型数据类型，用于设置 <code>objectName</code> 的数据类型，<strong>只能为引用数据类型</strong></li><li><strong>objectName</strong>: 对象名</li></ul><p><code>ArrayList</code> 中的元素实际上是对象，除<code>String</code>类型外， 要存储其他类型，而 <code>E</code> 只能为引用数据类型，这时就需要使用到基本类型的包装类。</p><p><strong>基本类型对应的包装类表</strong>如下：</p><table><thead><tr><th align="left">基本类型</th><th align="left">引用类型</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr></tbody></table><p>此外，<code>BigInteger</code>、<code>BigDecimal</code> 用于高精度的运算，<code>BigInteger</code> 支持任意精度的整数，也是引用类型，但它们没有相对应的基本类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 存放整数元素</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> li<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存放字符元素</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> li<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arraylist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>ArrayList()</code></td><td align="left">构造一个初始容量为10的空列表</td></tr><tr><td align="left"><code>ArrayList(int initialCapacity)</code></td><td align="left">构造具有指定初始容量的空列表</td></tr><tr><td align="left"><code>ArrayList(Collection&lt;? extends E&gt; c)</code></td><td align="left">按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表</td></tr></tbody></table><h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><p>常用方法列表如下：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong><code>add()</code></strong></td><td align="left"><strong>将元素插入到指定位置的 <code>arraylist</code> 中</strong></td></tr><tr><td align="left"><code>addAll()</code></td><td align="left">添加集合中的所有元素到 <code>arraylist</code> 中</td></tr><tr><td align="left"><code>clear()</code></td><td align="left">删除 <code>arraylist</code> 中的所有元素</td></tr><tr><td align="left"><code>clone()</code></td><td align="left">复制一份 <code>arraylist</code></td></tr><tr><td align="left"><code>contains()</code></td><td align="left">判断元素是否在 <code>arraylist</code></td></tr><tr><td align="left"><strong><code>get()</code></strong></td><td align="left"><strong>通过索引值获取 <code>arraylist</code> 中的元素</strong></td></tr><tr><td align="left"><code>indexOf()</code></td><td align="left">返回 <code>arraylist</code> 中元素的索引值</td></tr><tr><td align="left"><code>removeAll()</code></td><td align="left">删除存在于指定集合中的 <code>arraylist</code> 里的所有元素</td></tr><tr><td align="left"><strong><code>remove()</code></strong></td><td align="left"><strong>删除 <code>arraylist</code> 里的单个元素</strong></td></tr><tr><td align="left"><strong><code>size()</code></strong></td><td align="left"><strong>返回 <code>arraylist</code> 里元素数量</strong></td></tr><tr><td align="left"><code>isEmpty()</code></td><td align="left">判断 <code>arraylist</code> 是否为空</td></tr><tr><td align="left"><code>subList()</code></td><td align="left">截取部分 <code>arraylist</code> 的元素</td></tr><tr><td align="left"><strong><code>set()</code></strong></td><td align="left"><strong>替换 <code>arraylist</code> 中指定索引的元素</strong></td></tr><tr><td align="left"><code>sort()</code></td><td align="left">对 <code>arraylist</code> 元素进行排序</td></tr><tr><td align="left"><code>toArray()</code></td><td align="left">将 <code>arraylist</code> 转换为数组</td></tr><tr><td align="left"><code>toString()</code></td><td align="left">将 <code>arraylist</code> 转换为字符串</td></tr><tr><td align="left"><code>ensureCapacity()</code></td><td align="left">设置指定容量大小的 <code>arraylist</code></td></tr><tr><td align="left"><code>lastIndexOf()</code></td><td align="left">返回指定元素在 <code>arraylist</code> 中最后一次出现的位置</td></tr><tr><td align="left"><code>retainAll()</code></td><td align="left">保留 <code>arraylist</code> 中在指定集合中也存在的那些元素</td></tr><tr><td align="left"><code>containsAll()</code></td><td align="left">查看 <code>arraylist</code> 是否包含指定集合中的所有元素</td></tr><tr><td align="left"><code>trimToSize()</code></td><td align="left">将 <code>arraylist</code> 中的容量调整为数组中的元素个数</td></tr><tr><td align="left"><code>removeRange()</code></td><td align="left">删除 <code>arraylist</code> 中指定索引之间存在的元素</td></tr><tr><td align="left"><code>replaceAll()</code></td><td align="left">将给定的操作内容替换掉数组中每一个元素</td></tr><tr><td align="left"><code>removeIf()</code></td><td align="left">删除所有满足特定条件的 <code>arraylist</code> 元素</td></tr><tr><td align="left"><code>forEach()</code></td><td align="left">遍历 <code>arraylist</code> 中每一个元素并执行特定操作</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 引入 ArrayList 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">// 引入 Collections 类</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构造方法，创建空的集合，sites:[]</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加元素，sites:[Taobao]</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 追加指定元素到集合末尾，sites:[Taobao,Weibo]</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Weibo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 指定位置插入，sites:[Google,Taobao,Weibo]，索引不能越界</span>        sites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 访问第二个元素</span>        sites<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token comment">// 修改元素，第一个参数为索引位置，第二个为要修改的值，sites[Google,Wiki,Weibo]</span>        sites<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Wiki"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 根据索引删除。删除第三个元素</span>        sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 删除指定元素</span>        sites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"Wiki"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 集合元素数量</span>        sites<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、sort-方法"><a href="#4、sort-方法" class="headerlink" title="4、sort() 方法"></a>4、<strong>sort() 方法</strong></h4><p><code>sort()</code> 方法根据指定的顺序对动态数组中的元素进行排序。</p><p><code>sort()</code> 方法的语法为：</p><pre class="line-numbers language-none"><code class="language-none">arraylist.sort(Comparator c)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注：</strong><code>arraylist</code> 是 <code>ArrayList</code> 类的一个对象。</p><p><strong>参数说明：</strong></p><ul><li><code>comparator</code> - 顺序方式</li></ul><p><strong>返回值</strong></p><p><code>sort()</code> 方法不返回任何值，它只是更改动态数组列表中元素的顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sites <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> myNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 元素进行升序排列，在此，Java Comparator 接口的 naturalOrder() 方法指定元素以自然顺序（升序）排序</span>sites<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">naturalOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 降序</span>sites<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照特定值排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 字母排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>myNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数字排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、集合存储对象并遍历"><a href="#5、集合存储对象并遍历" class="headerlink" title="5、集合存储对象并遍历"></a>5、集合存储对象并遍历</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 方法调用</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStudent</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 键盘输入</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合中添加对象</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Alt + insert</code>：快速构建构造函数</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之字符串篇</title>
      <link href="/2022/02/13/java-zhi-zi-fu-chuan-pian/"/>
      <url>/2022/02/13/java-zhi-zi-fu-chuan-pian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、API"><a href="#一、API" class="headerlink" title="一、API"></a>一、API</h3><p><code>API</code>（<code>Ppplicaton Programming Interface</code>）：应用程序编程接口</p><p><strong>Java API：</strong>指的就是<code>JDK</code>中提供的各种功能的<code>Java</code>类</p><p>这些类将底层的实现封装起来，可以通过帮助文档来学习如何使用<code>API</code></p><p><strong>注意：</strong>调用方法的时候，如果方法有明确的返回值，用变量接收可以手动完成，也可以使用快捷键完成（<code>Ctrl + Alt + V</code>）</p><h3 id="二、String"><a href="#二、String" class="headerlink" title="二、String"></a>二、String</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><p>字符串广泛应用 在 <code>Java</code> 编程中，在 <code>Java</code> 中字符串属于对象，<code>Java</code> 提供了 <code>String</code> 类来创建和操作字符串</p><p><code>String</code>类在<code>java.lang</code>包下，所以使用的时候不需要导包</p><p><strong>Java程序中所有的双引号字符串都是<code>String</code>类的对象</strong></p><p><strong>注意：</strong></p><ul><li><code>String</code> 类不可改变，一旦创建了 <code>String</code> 对象，那它的值就无法改变</li><li>可以被共享</li><li>效果上相当于字符数组（<code>char[]</code>）,但底层原理是字节数组（<code>byte[]</code>）,<code>Java8</code>开始</li></ul><h4 id="2、构造方法（共11种）"><a href="#2、构造方法（共11种）" class="headerlink" title="2、构造方法（共11种）"></a>2、构造方法（共11种）</h4><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213221121628.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无参数</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据字符数组的内容，创建</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据字节数组内容，创建</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String 直接创建，推荐方法</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span><span class="token comment">// 相同引用</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> s2<span class="token punctuation">;</span>                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h4><ul><li>通过<code>new</code>创建的字符串对象，每一次<code>new</code>都会申请一个内存空间，虽然内容相同，但地址值不同</li><li>通过 <code>&quot;&quot;</code> 方式给出的字符串，只要字符序列相同，无论在程序代码中出现几次，<code>JVM</code>都只会建立一个<code>String</code>对象，并在字符串池中维护</li></ul><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213222702226.png"></p><h4 id="4、字符串的常用方法"><a href="#4、字符串的常用方法" class="headerlink" title="4、字符串的常用方法"></a>4、字符串的常用方法</h4><table><thead><tr><th align="left">SN(序号)</th><th align="left">方法名</th><th>方法描述</th></tr></thead><tbody><tr><td align="left"><strong>1</strong></td><td align="left"><strong><code>char charAt(int index)</code></strong></td><td><strong>返回指定索引处的 <code>char</code> 值</strong></td></tr><tr><td align="left"><strong>2</strong></td><td align="left"><strong><code>int compareTo(Object o)</code></strong></td><td><strong>把这个字符串和另一个对象比较</strong></td></tr><tr><td align="left">3</td><td align="left"><code>int compareTo(String anotherString)</code></td><td>按字典顺序比较两个字符串</td></tr><tr><td align="left">4</td><td align="left"><code>int compareToIgnoreCase(String str)</code></td><td>按字典顺序比较两个字符串，不考虑大小写</td></tr><tr><td align="left"><strong>5</strong></td><td align="left"><strong><code>String concat(String str)</code></strong></td><td><strong>将指定字符串连接到此字符串的结尾</strong></td></tr><tr><td align="left">6</td><td align="left"><code>boolean contentEquals(StringBuffer sb)</code></td><td>当且仅当字符串与指定的<code>StringBuffer</code>有相同顺序的字符时候返回真</td></tr><tr><td align="left">7</td><td align="left"><code>static String copyValueOf(char[] data)</code></td><td>返回指定数组中表示该字符序列的 <code>String</code></td></tr><tr><td align="left">8</td><td align="left"><code>static String copyValueOf(char[] data, int offset, int count)</code></td><td>返回指定数组中表示该字符序列的 <code>String</code></td></tr><tr><td align="left">9</td><td align="left"><code>boolean endsWith(String suffix)</code></td><td>测试此字符串是否以指定的后缀结束</td></tr><tr><td align="left"><strong>10</strong></td><td align="left"><strong><code>boolean equals(Object anObject)</code></strong></td><td><strong>将此字符串与指定的对象比较，严格区分大小写</strong></td></tr><tr><td align="left">11</td><td align="left"><code>boolean equalsIgnoreCase(String anotherString)</code></td><td>将此 <code>String</code> 与另一个 <code>String</code> 比较，不考虑大小写</td></tr><tr><td align="left">12</td><td align="left"><code>byte[] getBytes()</code></td><td>使用平台的默认字符集将此 <code>String</code> 编码为 <code>byte</code> 序列，并将结果存储到一个新的 <code>byte</code> 数组中</td></tr><tr><td align="left">13</td><td align="left"><code>byte[] getBytes(String charsetName)</code></td><td>使用指定的字符集将此 <code>String</code> 编码为 <code>byte</code> 序列，并将结果存储到一个新的 <code>byte</code> 数组中</td></tr><tr><td align="left">14</td><td align="left"><code>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code></td><td>将字符从此字符串复制到目标字符数组</td></tr><tr><td align="left">15</td><td align="left"><code>int hashCode()</code></td><td>返回此字符串的哈希码</td></tr><tr><td align="left">16</td><td align="left"><code>int indexOf(int ch)</code></td><td>返回指定字符在此字符串中第一次出现处的索引</td></tr><tr><td align="left">17</td><td align="left"><code>int indexOf(int ch, int fromIndex)</code></td><td>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索</td></tr><tr><td align="left">18</td><td align="left"><code>int indexOf(String str)</code></td><td>返回指定子字符串在此字符串中第一次出现处的索引</td></tr><tr><td align="left">19</td><td align="left"><code>int indexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</td></tr><tr><td align="left">20</td><td align="left"><code>String intern()</code></td><td>返回字符串对象的规范化表示形式</td></tr><tr><td align="left">21</td><td align="left"><code>int lastIndexOf(int ch)</code></td><td>返回指定字符在此字符串中最后一次出现处的索引</td></tr><tr><td align="left">22</td><td align="left"><code>int lastIndexOf(int ch, int fromIndex)</code></td><td>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索</td></tr><tr><td align="left">23</td><td align="left"><code>int lastIndexOf(String str)</code></td><td>返回指定子字符串在此字符串中最右边出现处的索引</td></tr><tr><td align="left">24</td><td align="left"><code>int lastIndexOf(String str, int fromIndex)</code></td><td>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</td></tr><tr><td align="left"><strong>25</strong></td><td align="left"><strong><code>int length()</code></strong></td><td><strong>返回此字符串的长度</strong></td></tr><tr><td align="left">26</td><td align="left"><code>boolean matches(String regex)</code></td><td>告知此字符串是否匹配给定的正则表达式</td></tr><tr><td align="left">27</td><td align="left"><code>boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</code></td><td>测试两个字符串区域是否相等</td></tr><tr><td align="left">28</td><td align="left"><code>boolean regionMatches(int toffset, String other, int ooffset, int len)</code></td><td>测试两个字符串区域是否相等</td></tr><tr><td align="left">29</td><td align="left"><code>String replace(char oldChar, char newChar)</code></td><td>返回一个新的字符串，它是通过用 <code>newChar</code> 替换此字符串中出现的所有 <code>oldChar</code> 得到的</td></tr><tr><td align="left">30</td><td align="left"><code>String replaceAll(String regex, String replacement)</code></td><td>使用给定的 <code>replacement</code> 替换此字符串所有匹配给定的正则表达式的<strong>子字符串</strong></td></tr><tr><td align="left">31</td><td align="left"><code>String replaceFirst(String regex, String replacement)</code></td><td>使用给定的 <code>replacement</code> 替换此字符串匹配给定的正则表达式的<strong>第一个子字符串</strong></td></tr><tr><td align="left">32</td><td align="left"><code>String[] split(String regex)</code></td><td>根据给定正则表达式的匹配拆分此字符串</td></tr><tr><td align="left">33</td><td align="left"><code>String[] split(String regex, int limit)</code></td><td>根据匹配给定的正则表达式来拆分此字符串</td></tr><tr><td align="left">34</td><td align="left"><code>boolean startsWith(String prefix)</code></td><td>测试此字符串是否以指定的前缀开始</td></tr><tr><td align="left">35</td><td align="left"><code>boolean startsWith(String prefix, int toffset)</code></td><td>测试此字符串从指定索引开始的子字符串是否以指定前缀开始</td></tr><tr><td align="left">36</td><td align="left"><code>CharSequence subSequence(int beginIndex, int endIndex)</code></td><td>返回一个新的字符序列，它是此序列的一个子序列</td></tr><tr><td align="left">37</td><td align="left"><code>String substring(int beginIndex)</code></td><td>返回一个新的字符串，它是此字符串的一个子字符串</td></tr><tr><td align="left">38</td><td align="left"><code>String substring(int beginIndex, int endIndex)</code></td><td>返回一个新字符串，它是此字符串的一个子字符串</td></tr><tr><td align="left">39</td><td align="left"><code>char[] toCharArray()</code></td><td>将此字符串转换为一个新的字符数组</td></tr><tr><td align="left">40</td><td align="left"><code>String toLowerCase()</code></td><td>使用默认语言环境的规则将此 <code>String</code> 中的所有字符都转换为<strong>小写</strong></td></tr><tr><td align="left">41</td><td align="left"><code>String toLowerCase(Locale locale)</code></td><td>使用给定 <code>Locale</code> 的规则将此 <code>String</code> 中的所有字符都转换为<strong>小写</strong></td></tr><tr><td align="left">42</td><td align="left"><code>String toString()</code></td><td>返回此对象本身（它已经是一个字符串！）</td></tr><tr><td align="left">43</td><td align="left"><code>String toUpperCase()</code></td><td>使用默认语言环境的规则将此 <code>String</code> 中的所有字符都转换为<strong>大写</strong></td></tr><tr><td align="left">44</td><td align="left"><code>String toUpperCase(Locale locale)</code></td><td>使用给定 <code>Locale</code> 的规则将此 <code>String</code> 中的所有字符都转换为<strong>大写</strong></td></tr><tr><td align="left">45</td><td align="left"><code>String trim()</code></td><td>返回字符串的副本，忽略前导空白和尾部空白</td></tr><tr><td align="left">46</td><td align="left"><code>static String valueOf(primitive data type x)</code></td><td>返回给定<code>data type</code>类型x参数的字符串表示形式</td></tr><tr><td align="left">47</td><td align="left"><code>contains(CharSequence chars)</code></td><td>判断是否包含指定的字符系列</td></tr><tr><td align="left"><strong>48</strong></td><td align="left"><strong><code>isEmpty()</code></strong></td><td><strong>判断字符串是否为空</strong></td></tr></tbody></table><p><strong>更多方法参看<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html">Java String API</a> 文档</strong></p><h4 id="5、字符串的比较"><a href="#5、字符串的比较" class="headerlink" title="5、字符串的比较"></a>5、字符串的比较</h4><p><strong>使用 <code>==</code>作比较：</strong></p><ul><li>基本类型：比较的是<strong>数据值</strong>是否相同</li><li>引用类型：比较的是<strong>地址值</strong>是否相同</li></ul><p>字符串是对象，它比较内容是否相同，是通过 <code>equals()</code>来实现的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// public boolean equals(Object anObject):将此字符串与指定对象进行比较，参数直接传递字符串</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、StringBuilder"><a href="#三、StringBuilder" class="headerlink" title="三、StringBuilder"></a>三、StringBuilder</h3><h4 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h4><p><img src="/2022/02/13/java-zhi-zi-fu-chuan-pian/image-20220213231357335.png"></p><p>如果对字符串进行拼接操作，每次拼接都会构建一个新的<code>String</code>对象，既耗时，又浪费内存空间。可以通过<code>Java</code>提供的<code>StringBuilder</code>类解决这个问题</p><p><strong><code>StringBuilder</code>是一个可变的字符串类，即其内容是可变的</strong></p><h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>StringBuffer()</code></td><td align="left">构造一个字符串缓冲区，其中没有字符，初始容量为16个字符</td></tr><tr><td align="left"><code>StringBuffer(int capacity)</code></td><td align="left">构造一个字符串缓冲区，其中没有字符和指定的初始容量</td></tr><tr><td align="left"><code>StringBuffer(CharSequence seq)</code></td><td align="left">构造一个字符串缓冲区，其中包含与指定的 <code>CharSequence</code>相同的字符</td></tr><tr><td align="left"><code>StringBuffer(String str)</code></td><td align="left">构造一个初始化为指定字符串内容的字符串缓冲区</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建空白可变字符串对象</span><span class="token class-name">StringBuilder</span>  sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建可变字符串对象</span><span class="token class-name">StringBuilder</span>  sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>public StringBuilder append(任意类型)</code></strong></td><td><strong>添加数据，并返回对象本身</strong></td></tr><tr><td><strong><code>public StringBuilder reverse()</code></strong></td><td><strong>返回相反的字符序列</strong></td></tr><tr><td><code>public delete(int start, int end)</code></td><td>移除此序列的子字符串中的字符</td></tr><tr><td><code>public insert(int offset, (任意类型) i)</code></td><td>将对应类型参数的字符串表示形式插入此序列中</td></tr><tr><td><code>replace(int start, int end, String str)</code></td><td>使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符</td></tr><tr><td><code>int capacity()</code></td><td>返回当前容量</td></tr><tr><td><code>char charAt(int index)</code></td><td>返回此序列中指定索引处的 <code>char</code> 值</td></tr><tr><td><code>void ensureCapacity(int minimumCapacity)</code></td><td>确保容量至少等于指定的最小值</td></tr><tr><td><code>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code></td><td>将字符从此序列复制到目标字符数组 <code>dst</code></td></tr><tr><td><code>int indexOf(String str)</code></td><td>返回第一次出现的指定子字符串在该字符串中的索引</td></tr><tr><td><code>int indexOf(String str, int fromIndex)</code></td><td>从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引</td></tr><tr><td><code>int lastIndexOf(String str)</code></td><td>返回最右边出现的指定子字符串在此字符串中的索引</td></tr><tr><td><code>int lastIndexOf(String str, int fromIndex)</code></td><td>返回 <code>String</code> 对象中子字符串最后出现的位置</td></tr><tr><td><strong><code>int length()</code></strong></td><td><strong>返回长度（字符数）</strong></td></tr><tr><td><code>void setCharAt(int index, char ch)</code></td><td>将给定索引处的字符设置为 <code>ch</code></td></tr><tr><td><code>void setLength(int newLength)</code></td><td>设置字符序列的长度</td></tr><tr><td><code>void setLength(int newLength)</code></td><td>返回一个新的字符序列，该字符序列是此序列的子序列</td></tr><tr><td><code>String substring(int start)</code></td><td>返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列</td></tr><tr><td><code>String substring(int start, int end)</code></td><td>返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列</td></tr><tr><td><strong><code>String toString()</code></strong></td><td><strong>返回此序列中数据的字符串表示形式</strong></td></tr></tbody></table><h4 id="4、添加与反转"><a href="#4、添加与反转" class="headerlink" title="4、添加与反转"></a>4、添加与反转</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span>和<span class="token class-name">String</span>转换的reverse方法<span class="token comment">// append 添加数据</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 链式编程</span><span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 两种方式输出结果相同</span><span class="token comment">// 反转</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 综合 StringBuilder 和 String 转换的 reverse 方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">myReverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*        一般步骤：    StringBuilder sb = new StringBuilder(s);    sb.reverse();    String ss = sb.toString();    return ss;*/</span><span class="token comment">// 可以将上面的四段代码简化，链式编程</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、StringBuilder和String相互转换"><a href="#5、StringBuilder和String相互转换" class="headerlink" title="5、StringBuilder和String相互转换"></a>5、StringBuilder和String相互转换</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*StringBuilder转换为String：public String toString()：通过toString()就可以将StringBuilder转换为StringString转换为StringBuilder：public StringBuilder(String s)：通过构造方法就可以将String转换为StringBuilder*/</span><span class="token comment">// StringBuilder转换为String</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String转换为StringBuilder</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之面向对象基础篇</title>
      <link href="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/"/>
      <url>/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象基础篇"><a href="#面向对象基础篇" class="headerlink" title="面向对象基础篇"></a>面向对象基础篇</h2><h3 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h3><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态，是对现实生活中一类具有共同属性的行为的事物的抽象</li></ul><p><strong>类的特点：</strong></p><ul><li>类是对象的数据类型</li><li>类是具有相同属性和行为的一组对象的集合</li></ul><p><strong>对象的属性：</strong>对象具有的各种特征，每个对象的每个属性都拥有特定的值</p><p><strong>对象的行为：</strong>对象能够执行的操作</p><h4 id="1、-类的定义"><a href="#1、-类的定义" class="headerlink" title="1、 类的定义"></a>1、 类的定义</h4><p><strong>类的重要性：</strong>是Java程序的基本组成单位</p><p><strong>类的组成：</strong>属性和行为</p><ul><li>属性：在类中通过<strong>成员变量</strong>来体现（类中方法外的变量）</li><li>行为：在类中通过<strong>成员方法</strong>来体现（如先前学习的<strong>方法</strong>相比去掉<code>static</code>关键字即可）</li></ul><p><strong>一个类可以包含以下类型变量：</strong></p><ul><li><p><strong>局部变量</strong>：在<strong>方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。</p><p>变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li><p><strong>成员变量</strong>：成员变量是定义在<strong>类中，方法体之外</strong>的变量。这种变量在创建对象的时候实例化。</p><p>成员变量可以被类中方法、构造方法和特定类的语句块访问。</p></li><li><p><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p></li><li><p><strong>区别</strong>：<img src="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/image-20220213202338278.png"></p></li></ul><p><strong>定义步骤：</strong></p><ol><li>定义类</li><li>编写类的成员变量</li><li>编写类的成员方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*类的定义格式：public class 类名&#123;// 成员变量变量1的数据类型 变量1;变量2的数据类型 变量2;....// 成员方法方法1:方法2:&#125;*/</span><span class="token comment">// 定义 Dog 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> breed<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">String</span> colour<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、对象的使用"><a href="#2、对象的使用" class="headerlink" title="2、对象的使用"></a>2、对象的使用</h4><p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字 new 来创建一个对象。</li><li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象：格式：类名 对象名 = new 类名();</span><span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用对象</span><span class="token comment">// 使用成员变量：格式：对象名.变量名</span>d<span class="token punctuation">.</span>age    <span class="token comment">// 使用成员方法：格式：对象名.方法名()</span>d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、构造方法"><a href="#3、构造方法" class="headerlink" title="3、构造方法"></a>3、构造方法</h4><ul><li>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</li><li>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*构造方法：完成对象数据的初始化格式：public class 类名&#123;修饰符 类名(参数)&#123;&#125;&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 构造方法内书写的内容</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h3><h4 id="1、封装概述："><a href="#1、封装概述：" class="headerlink" title="1、封装概述："></a>1、封装概述：</h4><ul><li>是面向对象三大特征之一（<strong>封装、继承、多态</strong>）</li><li>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作</li></ul><h4 id="2、封装的优点："><a href="#2、封装的优点：" class="headerlink" title="2、封装的优点："></a>2、封装的优点：</h4><ul><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员变量进行更精确的控制</li><li>隐藏信息，实现细节</li><li>提高代码的安全性和复用性</li></ul><h4 id="3、步骤："><a href="#3、步骤：" class="headerlink" title="3、步骤："></a>3、步骤：</h4><ul><li>修改属性的可见性来限制对属性的访问（一般限制为<code>private</code>）</li><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*private 关键字：1、是一个权限修饰符2、可以修饰成员（成员变量和成员方法）3、作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问getXxx()/setXxx()一对赋取值方法，用于对私有属性的访问：1、get变量名()：用于获取成员变量的值，方法用public修饰2、set变量名(参数)：用于设置成员变量的值，方法用public修饰采用 this 关键字是为了解决成员变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。*/</span><span class="token comment">// 创建一个 Person 类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> idNum<span class="token punctuation">;</span>    <span class="token comment">// 构造方法</span>        <span class="token comment">// 无参构造方法，若不设置，系统默认给，但定义了，系统将不给，若要使用，需要手动设置</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 带参构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> idNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"赵四"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idNum <span class="token operator">=</span> <span class="token string">"1134"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIdNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> idNum<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// age = age; 变量重名，两个 age 都指的形参，而不是成员变量</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdNum</span><span class="token punctuation">(</span> <span class="token class-name">String</span> newId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 成员变量和局部变量不重名，可以不用 this</span>      idNum <span class="token operator">=</span> newId<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>this的内存原理：</strong></p><p><img src="/2022/02/13/java-zhi-mian-xiang-dui-xiang-ji-chu-pian/image-20220213204818032.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之数组方法篇</title>
      <link href="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/"/>
      <url>/2022/02/11/java-zhi-shu-zu-fang-fa-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、IDEA的使用"><a href="#一、IDEA的使用" class="headerlink" title="一、IDEA的使用"></a>一、IDEA的使用</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>IDEA</strong>全称<strong>IntelliJ IDEA</strong>，是用于Java语言开发的集成环境</p><p><strong>集成环境：</strong>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具</p><h3 id="2、内容辅助键和快捷键"><a href="#2、内容辅助键和快捷键" class="headerlink" title="2、内容辅助键和快捷键"></a>2、内容辅助键和快捷键</h3><ul><li><p><strong>快速生成语句</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">快速生成<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法：psvm <span class="token operator">+</span> 回车快速生成输出语句：sout <span class="token operator">+</span> 回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>内容辅助键</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> space（内容提示，代码补全）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>快捷键</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注释</span>单行：选中代码，<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token operator">/</span>多行：选中代码，<span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Shift</span> <span class="token operator">+</span> <span class="token operator">/</span><span class="token comment">// 格式化</span><span class="token class-name">Ctrl</span> <span class="token operator">+</span> <span class="token class-name">Alt</span> <span class="token operator">+</span> <span class="token class-name">L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><h3 id="1、定义格式"><a href="#1、定义格式" class="headerlink" title="1、定义格式"></a>1、定义格式</h3><p><strong>数组是一种用于存储多个相同类型数据的存储模型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式一：数据类型[] 变量名，首选的方法</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token comment">//定义一个int类型的数组，数组名是arr</span><span class="token comment">// 格式二：数据类型 变量名[]</span><span class="token keyword">double</span> cur<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义一个int类型变量，变量名是arr数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h3><p><strong>动态初始化：</strong>初始化时只指定数据长度，由系统为数组分配初始值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式：数据类型[] 变量名 = new 数据类型[数组长度]</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*左边：double：说明数组中的元素类型是double类型[]：说明这是一个数组arr：数组名称右边：new：为数组申请内存空间double：说明数组中的元素类型是double类型[]：说明这是一个数组10：数组长度，即数组中元素个数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态初始化：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 格式：数据类型[] 变量名 = new 数据类型[]&#123;数据0, 数据1.....&#125;;简化格式：（推荐方法）数据类型[] 变量名 = &#123;数据0, 数据1.....&#125;;*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cur <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、内存分配"><a href="#3、内存分配" class="headerlink" title="3、内存分配"></a>3、内存分配</h3><ul><li><p><strong>栈内存：</strong>存储局部变量</p><p>定义在方法中的变量，如上面的<code>arr</code>，使用完毕，<strong>立即消失</strong></p></li><li><p><strong>堆内存：</strong>存储<code>new</code>出来的内容（实体，对象）</p><p>数组在初始化时会为存储空间添加默认值</p><table><thead><tr><th align="center">类型</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">0</td></tr><tr><td align="center">浮点数</td><td align="center">0.0</td></tr><tr><td align="center">布尔类型</td><td align="center">false</td></tr><tr><td align="center">字符</td><td align="center">空字符</td></tr><tr><td align="center">引用数据类型</td><td align="center">null</td></tr></tbody></table><p>每个<code>new</code>出来的东西都有一个地址值，使用完毕，会<strong>在垃圾回收期空闲时被回收</strong></p></li></ul><p><strong>内存分配图</strong></p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211213350199.png"></p><p><strong>多个数组指向相同内存图</strong>：当数组指向相同内存时，任何一个数组修改数据，内存数据也会被修改</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211213653152.png"></p><h3 id="4、数组操作"><a href="#4、数组操作" class="headerlink" title="4、数组操作"></a>4、数组操作</h3><h4 id="①-常见问题："><a href="#①-常见问题：" class="headerlink" title="① 常见问题："></a><strong>① 常见问题：</strong></h4><ul><li><p><strong>索引越界：</strong>访问了数组中不存在的索引对应的元素，造成索引越界问题<code>ArrayIndexOutOfBoundsException</code></p></li><li><p><strong>空指针异常：</strong>访问的数组已经不在指向堆内存的数据，造成空指针异常</p><p><code>NullPointerException</code></p></li><li><p><strong>null：</strong>空值，引用数据类型的默认值，表示不指向任何有效对象</p></li></ul><h4 id="②-常见操作"><a href="#②-常见操作" class="headerlink" title="② 常见操作"></a>② 常见操作</h4><p><strong>遍历</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用for循环</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他操作</span><span class="token punctuation">&#125;</span><span class="token comment">//  For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组，更推荐的方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 其他操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取最大值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义数组</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 初始化max</span><span class="token keyword">int</span> max<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// For-Each 循环，也可使用for循环，这里来熟悉For-Each 循环如何操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">></span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出最大值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>方法</strong>是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><h4 id="①-优点："><a href="#①-优点：" class="headerlink" title="① 优点："></a><strong>① 优点：</strong></h4><ul><li>使程序变得更简短而清晰</li><li>有利于程序维护</li><li>可以提高程序开发的效率</li><li>提高了代码的重用性</li></ul><h4 id="②-命名规则："><a href="#②-命名规则：" class="headerlink" title="② 命名规则："></a>② <strong>命名规则：</strong></h4><ul><li>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<code>addPerson</code>。</li><li>下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li></ul><h3 id="2、定义和调用"><a href="#2、定义和调用" class="headerlink" title="2、定义和调用"></a>2、定义和调用</h3><ul><li>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong></li><li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为<strong>方法调用</strong></li></ul><p>一般情况下，<strong>定义方法</strong>包含以下语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*修饰符 返回值类型 方法名(参数类型 参数名)&#123;    ...    方法体    ...    return 返回值; &#125;*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个方法的所有部分：</p><ul><li><p><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</p></li><li><p><strong>返回值类型 ：</strong>方法可能会返回值。<code>returnValueType</code> 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值，在这种情况下，<code>returnValueType</code> 是关键字<code>void</code></p></li><li><p><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名</p></li><li><p><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p></li><li><p><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211221246368.png"></p></li></ul><p><strong>调用方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">max_value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、形参和实参"><a href="#3、形参和实参" class="headerlink" title="3、形参和实参"></a>3、形参和实参</h3><p><strong>形参：</strong>方法定义中的参数，等同于变量定义格式</p><p><strong>实参：</strong>方法调用中的参数，等同于使用变量或常量</p><h3 id="4、方法注意事项"><a href="#4、方法注意事项" class="headerlink" title="4、方法注意事项"></a>4、方法注意事项</h3><ul><li>方法不能嵌套定义</li><li><code>void</code>表示无返回值，可以省略<code>return</code>，也可以单独书写<code>return</code>，后面不加数据</li></ul><h3 id="5、方法重载"><a href="#5、方法重载" class="headerlink" title="5、方法重载"></a>5、方法重载</h3><p><strong>方法重载</strong>指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载：</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul><p><strong>特点：</strong></p><ul><li>重载仅对应方法的定义，与方法的调用无关</li><li>重载仅针对同一个类中方法的名称与参数进行识别，<strong>与返回值无关</strong>，换句话说不能通过返回值来判定两个方法是否相互构成重载</li><li>在调用的时候，Java虚拟机会通过参数的不同来区分同名方法</li></ul><h3 id="6、方法的参数传递"><a href="#6、方法的参数传递" class="headerlink" title="6、方法的参数传递"></a>6、<strong>方法的参数传递</strong></h3><p>对于<strong>基本数据类型的参数</strong>，形式参数的改变，不影响实际参数的值</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211224943473.png"></p><p>对于<strong>引用类型的参数</strong>，形式参数的改变，影响实际参数的值</p><p><img src="/2022/02/11/java-zhi-shu-zu-fang-fa-pian/image-20220211225220164.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列用法</title>
      <link href="/2022/02/11/you-xian-dui-lie-yong-fa/"/>
      <url>/2022/02/11/you-xian-dui-lie-yong-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>在leetcode刷题过程中，接触到优先队列(priority_queue)的使用，因此作为学习加以补充</strong></p><h2 id="一、什么是优先级队列"><a href="#一、什么是优先级队列" class="headerlink" title="一、什么是优先级队列"></a>一、什么是优先级队列</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>优先级队列中，<strong>数据按关键词有序排列</strong>，插入新数据的时候，会自动插入到合适的位置保证队列有序。（顺序有两种形式：升序或者是降序）</p><p><strong>标准定义：</strong></p><p><code>PriorityQueue</code> 类在<code>Java1.5</code>中引入。<code>PriorityQueue</code> 是基于优先堆的一个无界队列，这个优先队列中的元素可以默认自然排序或者通过提供的<code>Comparator</code>（比较器）在队列实例化的时候排序。要求使用Java <code>Comparable</code> 和<code>Comparator</code> 接口给对象排序，并且在排序时会按照优先级处理其中的元素。</p><h3 id="2、特征"><a href="#2、特征" class="headerlink" title="2、特征"></a>2、特征</h3><p>优先级队列底层的数据结构其实是一颗二叉堆</p><ul><li>二叉堆是一个完全二叉树</li><li>根节点总是大于左右子节点（大顶堆），或者是小于左右子节点（小顶堆）</li></ul><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认初始容量，11</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">// 维护一个队列：因为基于二叉堆来实现优先队列，queue[i]的子节点为queue[2*i+1]/queue[2*i+2]</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span><span class="token comment">// 优先队列中的元素个数</span><span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 比较器：用于降序或者是比较自定义的对象，比如可以根据age</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">;</span><span class="token comment">// 优先级队列的结构：被修改的次数</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><ul><li><p>默认构造方法：<code>PriorityQueue()</code></p><p>使用默认的初始容量（11）创建一个 <code>PriorityQueue</code>，并根据其自然顺序对元素进行排序。</p></li><li><p>包含集合元素：<code>PriorityQueue(Collection c)</code></p><p>创建包含指定 collection 中元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> collection，其元素要置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据优先级队列的排序规则无法比较指定 collection 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定 collection 或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定初始容量：<code>PriorityQueue(int initialCapacity)</code></p><p>使用指定的初始容量创建一个 <code>PriorityQueue</code>，并根据其自然顺序对元素进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>initialCapacity <span class="token operator">-</span> 此优先级队列的初始容量    <span class="token comment">// 抛出</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">-</span> 如果 initialCapacity 小于 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定初始容量和比较器：<code>PriorityQueue(int initialCapacity, Comparator comparator)</code></p><p>使用指定的初始容量创建一个 <code>PriorityQueue</code>，并根据指定的比较器对元素进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>initialCapacity <span class="token operator">-</span> 此优先级队列的初始容量comparator <span class="token operator">-</span> 用于对此优先级队列进行排序的比较器。如果该参数为 <span class="token keyword">null</span>，则将使用元素的 自然顺序    <span class="token comment">// 抛出</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">-</span> 如果 initialCapacity 小于 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包含优先级元素：<code>PriorityQueue(PriorityQueue c)</code></p><p>创建包含指定优先级队列元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> 优先级队列，其元素要置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据 c 的顺序无法比较 c 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定优先级队列或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包含set元素：<code>PriorityQueue(SortedSet c)</code></p><p>创建包含指定有序 set 元素的 <code>PriorityQueue</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数</span>c <span class="token operator">-</span> 有序 set，其元素将置于此优先级队列中<span class="token comment">// 抛出</span><span class="token class-name">ClassCastException</span> <span class="token operator">-</span> 如果根据有序 set 的顺序无法比较该有序 set 中的各个元素<span class="token class-name">NullPointerException</span> <span class="token operator">-</span> 如果指定有序 set 或任何元素为 <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、普通方法"><a href="#3、普通方法" class="headerlink" title="3、普通方法"></a>3、普通方法</h3><p><code>PriorityQueue</code>中常用的方法很多。来看几个常用的。</p><h4 id="①-add："><a href="#①-add：" class="headerlink" title="① add："></a><strong>① add：</strong></h4><p><strong>插入一个元素，不成功会抛出异常</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="②-offer："><a href="#②-offer：" class="headerlink" title="② offer："></a><strong>② offer：</strong></h4><p><strong>插入一个元素，不能被立即执行的情况下会返回一个特殊的值（true 或者 false）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，优先级队列插入的元素不能为空，步骤是这样的：</p><p>首先把<code>modCount</code>数量加1，如果容量不够把当前队列的尺寸加<code>1</code>，最后在<code>i</code>的位置上使用<code>siftUp</code>方法把<code>e</code>添加进来。此时真正插入的操作又落到了<code>siftUp</code>方法身上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftUpComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但<code>siftup</code>方法并没有实现真正的插入操作，而是先判断是否使用了自己的比较器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 比较器为空时的插入</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftUpComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> e <span class="token operator">=</span> es<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            k <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 比较器不为空的插入</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftUpUsingComparator</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> e <span class="token operator">=</span> es<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        k <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③-remove："><a href="#③-remove：" class="headerlink" title="③ remove："></a>③ remove：</h4><p><strong>删除一个元素，如果不成功会返回false。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">removeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正实现删除操作的是<code>removeAt</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span> <span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert i >= 0 &amp;&amp; i &lt; size;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> queue<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token comment">// removed last element</span>            es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">E</span> moved <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> moved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> moved<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> moved<span class="token punctuation">)</span>                    <span class="token keyword">return</span> moved<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除操作主要是两部分，<code>if</code>里面判断删除的是否是最后一个，否则的话就是用<code>siftDown</code>方法进行“向下沉”删除。不成功使用<code>siftup</code>“向上浮”。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> size<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftDownComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除比较器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert n > 0;</span>        <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>        <span class="token keyword">int</span> half <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">// loop while a non-leaf</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// assume left child is least</span>            <span class="token class-name">Object</span> c <span class="token operator">=</span> es<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                c <span class="token operator">=</span> es<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            k <span class="token operator">=</span> child<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token class-name">T</span> x<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> half <span class="token operator">=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> c <span class="token operator">=</span> es<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> es<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        k <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    es<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④-poll："><a href="#④-poll：" class="headerlink" title="④ poll："></a>④ poll：</h4><p><strong>删除一个元素，并返回删除的元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>es <span class="token operator">=</span> queue<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> es<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            es<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> cmp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmp <span class="token operator">=</span> comparator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token function">siftDownComparable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> es<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> es<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑤-peek："><a href="#⑤-peek：" class="headerlink" title="⑤ peek："></a>⑤ peek：</h4><p><strong>查询队顶元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="⑥-indexOf-Object-o-："><a href="#⑥-indexOf-Object-o-：" class="headerlink" title="⑥ indexOf(Object o)："></a>⑥ indexOf(Object o)：</h4><p><strong>查询对象o的索引</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> queue<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> size<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="⑦-contain-Object-o-："><a href="#⑦-contain-Object-o-：" class="headerlink" title="⑦ contain(Object o)："></a>⑦ contain(Object o)：</h4><p><strong>判断是否容纳了元素</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之基础语法篇</title>
      <link href="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/"/>
      <url>/2022/02/10/java-zhi-ji-chu-yu-fa-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="Java之基础语法篇"><a href="#Java之基础语法篇" class="headerlink" title="Java之基础语法篇"></a>Java之基础语法篇</h2><h3 id="1、注释"><a href="#1、注释" class="headerlink" title="1、注释"></a>1、注释</h3><ul><li><p>单行注释</p><p><code>格式：    // 注释信息</code></p></li><li><p>多行注释</p><p><code>格式：    /* 注释信息 */</code> </p></li><li><p>文档注释</p><p><code>格式：    /** 注释信息*/</code></p></li></ul><h3 id="2、关键字（50个）"><a href="#2、关键字（50个）" class="headerlink" title="2、关键字（50个）"></a>2、关键字（50个）</h3><ul><li>关键字的字母全部小写</li><li>有特殊的颜色标记</li></ul><h3 id="3、常量"><a href="#3、常量" class="headerlink" title="3、常量"></a>3、常量</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210201515314.png"></p><p><strong>注意：</strong>空常量不能直接输出</p><h3 id="4、数据类型"><a href="#4、数据类型" class="headerlink" title="4、数据类型"></a>4、数据类型</h3><p>计算机存储设备的最小信息单元叫 <strong>位（bit）</strong> ，又称<strong>比特位</strong>，常用小写字母 <strong>b</strong> 表示；而计算机中最小的存储单位为 <strong>字节（byte）</strong>，通常用大写字母 <strong>B</strong> 表示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span> B（byte） <span class="token operator">=</span> <span class="token number">8</span> b<span class="token number">1</span> KB <span class="token operator">=</span> <span class="token number">1024</span> B<span class="token number">1</span> MB <span class="token operator">=</span> <span class="token number">1024</span> KB<span class="token number">1</span> GB <span class="token operator">=</span> <span class="token number">1024</span> MB<span class="token number">1</span> TB <span class="token operator">=</span> <span class="token number">1024</span> GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210202546063.png"></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210202633533.png"></p><h3 id="5、变量"><a href="#5、变量" class="headerlink" title="5、变量"></a>5、变量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*变量定义格式：数据类型 变量名 = 变量值;基本数据类型：byte,short,int,long,float,double,char,boolean变量的使用：取值格式：变量名修改值格式：变量名 = 变量值;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>变量名不能重复</li><li>变量未赋值时不能使用</li><li><code>long</code>类型变量定义时，为防止整数过大，在后面加<code>L</code>，如 <code>long a = 100000L</code></li><li><code>float</code>类型变量定义时，为防止类型不兼容，在后面加<code>F</code>，如 <code>float b = 3.14F</code></li></ul><h3 id="6、标识符"><a href="#6、标识符" class="headerlink" title="6、标识符"></a>6、标识符</h3><h4 id="①-定义规则："><a href="#①-定义规则：" class="headerlink" title="① 定义规则："></a><strong>① 定义规则：</strong></h4><ul><li>由<strong>数字、字母、下划线（_）和美元符（$）</strong>组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h4 id="②-常见命名约定"><a href="#②-常见命名约定" class="headerlink" title="② 常见命名约定"></a><strong>② 常见命名约定</strong></h4><p><strong>小驼峰命名法：（方法、变量）</strong></p><ul><li>标识符是一个单词时，首字母小写，如 <code>name</code></li><li>标识符由多个单词组成时，第一个单词首字母小写，其他单词首字母大写，如 <code>firstName</code></li></ul><p><strong>大驼峰命名法：（类）</strong></p><ul><li>标识符是一个单词时，首字母大写，如 <code>Student</code></li><li>标识符由多个单词组成时，每个单词首字母大写，如 <code>GoodStudent</code></li></ul><h3 id="7、类型转换"><a href="#7、类型转换" class="headerlink" title="7、类型转换"></a>7、类型转换</h3><h4 id="①-自动类型转换"><a href="#①-自动类型转换" class="headerlink" title="① 自动类型转换"></a>① 自动类型转换</h4><p>把一个表示<strong>数据范围小的数值或变量</strong>赋值给另一个表示<strong>数据范围大的变量</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210205542768.png"></p><h4 id="②-强制类型转换"><a href="#②-强制类型转换" class="headerlink" title="② 强制类型转换"></a>② 强制类型转换</h4><p>把一个表示<strong>数据范围大的数值或变量</strong>赋值给另一个表示<strong>数据范围小的变量</strong></p><ul><li>格式：<strong>目标数据类型 变量名 = (目标数据类型)值或者变量</strong>，如 <code>int k = (int)88.88</code></li></ul><h3 id="8、算数运算符"><a href="#8、算数运算符" class="headerlink" title="8、算数运算符"></a>8、算数运算符</h3><p><code>+,-,*,/,%</code></p><p><strong>整数操作只得整数，想得小数，浮点数参与</strong></p><h4 id="①-字符的”-”操作"><a href="#①-字符的”-”操作" class="headerlink" title="① 字符的”+”操作"></a>① 字符的”+”操作</h4><p>字符参与加操作，使用字符在计算机底层<strong>对应的数值</strong>来进行计算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*ASCII码表中，A~Z为65~90，a~z为97~122，'0'~'9'为48~57*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>算术表达式中<strong>包含多个基本数据类型</strong>的值的时候，整个算术表达式的<strong>类型</strong>会<strong>自动进行提升</strong></p><p><strong>提升规则：</strong></p><ul><li><code>byte</code>类型，<code>short</code>类型和<code>char</code>类型将被提升到int类型</li><li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型，等级顺序如自动类型转换中的图</li></ul><h4 id="②-字符串的”-”操作"><a href="#②-字符串的”-”操作" class="headerlink" title="② 字符串的”+”操作"></a>② 字符串的”+”操作</h4><ul><li><p>当”+”操作中出现字符串时，这个”+”是<strong>字符串连接符</strong>，而不是算术运算</p><p>如<code>&quot;hello&quot; + 666</code>编译结果为 <code>hello666</code></p></li><li><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行”+”操作时，从左到右逐个执行，如</p><p><code>1 + 99 + &quot;年&quot;</code>编译结果为 <code>100年</code></p><p><code>&quot;年&quot; + 1 + 99</code> 编译结果为<code>年199</code></p></li></ul><h3 id="9、赋值运算符"><a href="#9、赋值运算符" class="headerlink" title="9、赋值运算符"></a>9、赋值运算符</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210213143725.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*扩展的赋值运算符底层隐含了强制类型转换short s = 10;// 可以正确编译，常用s += 20;// 不能正确编译，10为 int 类型，右侧运算完后，为 int 类型，而左侧依然为 short 类型s = s + 10// 正确写法，右侧运算完后强制类型转换s = (short)(s + 10)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、自增自减运算符"><a href="#10、自增自减运算符" class="headerlink" title="10、自增自减运算符"></a>10、自增自减运算符</h3><p><code>++,--</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*i++ VS ++i①单独使用，二者效果相同②参与操作使用，i++ 先赋值后加一，++i 先加一后赋值（i--和--i类似）*/</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// 编译后，j = 10, i = 11</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 编译后，k = 11, i = 11</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">++</span>l<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、关系运算符"><a href="#11、关系运算符" class="headerlink" title="11、关系运算符"></a>11、关系运算符</h3><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210214308154.png"></p><h3 id="12、逻辑运算符"><a href="#12、逻辑运算符" class="headerlink" title="12、逻辑运算符"></a>12、逻辑运算符</h3><p>逻辑运算符是用来<strong>连接关系表达式</strong>的运算符，也可以直接<strong>连接布尔类型的常量或变量</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210215300616.png"></p><p><strong>短路逻辑运算符</strong></p><p><img src="/2022/02/10/java-zhi-ji-chu-yu-fa-pian/image-20220210215656296.png"></p><h3 id="13、三元运算符"><a href="#13、三元运算符" class="headerlink" title="13、三元运算符"></a>13、三元运算符</h3><ul><li>格式： 关系表达式 ? 表达式1 : 表达式2</li><li>范例： <code>a &gt; b ? a : b</code></li></ul><p><strong>计算规则：</strong></p><ul><li>首先<strong>计算关系表达式的值</strong></li><li>若值为<code>true</code>，<strong>表达式1的值</strong>就是运算结果</li><li>若值为<code>flase</code>，<strong>表达式2的值</strong>就是运算结果</li></ul><h3 id="14、数据输入"><a href="#14、数据输入" class="headerlink" title="14、数据输入"></a>14、数据输入</h3><p><strong>Scanner使用的基本步骤：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ①导包，导包动作必须出现在类定义的上面</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">// ②创建对象，只有sc是变量名可变，其他不许变</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ③接收数据，只有i可以变</span><span class="token keyword">int</span> i <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ④关闭扫描器，在使用完scanner输入操作后，将其关闭，避免一直占用资源</span>sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在基础步骤上，对于输入的数据加以判断</strong></p><ul><li><p>通过 <code>Scanner</code> 类的 <code>next()</code> 与 <code>nextLine()</code> 方法获取输入的字符串，在读取前一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断是否还有输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输入数据</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据为："</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭</span>scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要输入 <code>int</code> 或 <code>float</code> 等类型的数据，在 <code>Scanner</code> 类中也有支持，但是在输入之前最好先使用 <code>hasNextXxx()</code> 方法进行验证，再使用 <code>nextXxx()</code> 来读取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建对象</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断输入的是否是整数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 接收整数</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"整数数据："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输入错误的信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 关闭</span>scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>在Scanner类中next() 与 nextLine() 区别</strong></p><p><strong>next():</strong></p><ul><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li><li>next() 不能得到带有空格的字符串</li></ul><p><strong>nextLine()：</strong></p><ul><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白</li></ul><h3 id="15、流程控制"><a href="#15、流程控制" class="headerlink" title="15、流程控制"></a>15、流程控制</h3><p><strong>分类：</strong></p><ul><li>顺序结构（代码依次执行）</li><li>分支结构（<strong>if，switch</strong>）</li><li>循环结构（<strong>for，while，do…while</strong>）</li></ul><h3 id="16、if语句"><a href="#16、if语句" class="headerlink" title="16、if语句"></a>16、if语句</h3><h4 id="①-格式一："><a href="#①-格式一：" class="headerlink" title="① 格式一："></a>① 格式一：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式为true将执行的语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②-格式二："><a href="#②-格式二：" class="headerlink" title="② 格式二："></a>② 格式二：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式的值为true</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果布尔表达式的值为false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③格式三："><a href="#③格式三：" class="headerlink" title="③格式三："></a>③格式三：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 1的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 2的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果布尔表达式 3的值为true执行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//如果以上布尔表达式都不为true执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17、switch语句"><a href="#17、switch语句" class="headerlink" title="17、switch语句"></a>17、switch语句</h3><p><code>switch case</code> 语句语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> value <span class="token operator">:</span>                <span class="token comment">//语句      </span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选    </span>    <span class="token keyword">case</span> value <span class="token operator">:</span>               <span class="token comment">//语句       </span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选    </span>    <span class="token comment">//你可以有任意数量的case语句    </span>    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选       </span>        <span class="token comment">//语句 </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>switch case</code> 语句有如下规则：</p><ul><li><code>switch</code> 语句中的变量类型可以是： <code>byte</code>、<code>short</code>、<code>int</code> 或者 <code>char</code>。从 Java SE 7 开始，<code>switch</code> 支持字符串 <code>String</code> 类型了，同时 <code>case</code> 标签必须为字符串常量或字面量</li><li><code>switch</code> 语句可以拥有多个 <code>case</code> 语句。每个 <code>case</code> 后面跟一个要比较的值和冒号</li><li><code>case</code> 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 <code>case</code> 语句的值相等时，那么 <code>case</code> 语句之后的语句开始执行，直到 <code>break</code> 语句出现才会跳出 <code>switch</code> 语句</li><li>当遇到 <code>break</code> 语句时，<code>switch</code> 语句终止。程序跳转到 <code>switch</code> 语句后面的语句执行。<code>case</code> 语句不必须要包含 <code>break</code> 语句。如果没有 <code>break</code> 语句出现，程序会继续执行下一条 <code>case</code> 语句，直到出现 <code>break</code> 语句</li><li><code>switch</code> 语句可以包含一个 <code>default</code> 分支，该分支一般是 <code>switch</code> 语句的最后一个分支（可以在任何位置，但<strong>建议在最后一个</strong>）。<code>default</code> 在没有 <code>case</code> 语句的值和变量值相等的时候执行。<code>default</code> 分支不需要 <code>break</code> 语句</li><li><strong>case穿透</strong>：如果<code>case</code> 控制的语句体后面不写<code>break</code>，将会出现穿透现象，在不判断下个<code>case</code> 值的情况下，向下运行，知道遇到<code>break</code> 或者整个switch语句的结束</li></ul><p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p><h3 id="18、for循环语句"><a href="#18、for循环语句" class="headerlink" title="18、for循环语句"></a>18、for循环语句</h3><p>for<strong>循环执行的次数是在执行前就确定的</strong>。语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span class="token comment">/*初始化：初始化语句 -> 表示循环开启的起始状态布尔表达式：条件判断语句 -> 表示循环反复执行的条件更新：条件控制语句 -> 表示循环执行中每次变化的内容代码语句的内容为循环体语句 -> 表示循环重复执行的内容*/</span><span class="token comment">// 死循环格式</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 for 循环有以下几点说明：</p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句</li><li>然后，检测布尔表达式的值。如果为 <code>true</code>，循环体被执行。如果为<code>false</code>，循环终止，开始执行循环体后面的语句</li><li>执行一次循环后，更新循环控制变量</li><li>再次检测布尔表达式。循环执行上面的过程</li></ul><p><strong>增强for循环</strong></p><p>Java5 引入了一种主要<strong>用于数组的增强型 for 循环</strong>。</p><p>Java 增强 <code>for</code> 循环语法格式如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//代码句子</span><span class="token punctuation">&#125;</span><span class="token comment">// 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</span><span class="token comment">// 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</span><span class="token comment">// 例子</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Larry"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Lacy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> name <span class="token operator">:</span> names <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行结果为 James,Larry,Tom,Lacy,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19、while循环语句"><a href="#19、while循环语句" class="headerlink" title="19、while循环语句"></a>19、while循环语句</h3><p><strong>while是最基本的循环</strong>，它的结构为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span> 布尔表达式 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//循环内容</span><span class="token punctuation">&#125;</span><span class="token comment">// 只要布尔表达式为 true，循环就会一直执行下去</span><span class="token comment">// 标准化格式</span>初始化语句<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件判断语句<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 死循环格式</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20、do…while循环语句"><a href="#20、do…while循环语句" class="headerlink" title="20、do…while循环语句"></a>20、do…while循环语句</h3><p><code>do…while</code> 循环和 <code>while</code> 循环相似，不同的是，<code>do…while</code> 循环<strong>至少会执行一次</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">初始化语句<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    循环体语句<span class="token punctuation">;</span>    条件控制语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 死循环格式</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>布尔表达式（条件判断语句）在循环体的后面，所以<strong>语句块在检测布尔表达式之前已经执行了</strong>。 如果布尔表达式的值为 <code>true</code>，则语句块一直执行，直到布尔表达式的值为 <code>false</code> </p><h3 id="21、跳转控制语句"><a href="#21、跳转控制语句" class="headerlink" title="21、跳转控制语句"></a>21、跳转控制语句</h3><p><strong>两个关键字都是基于条件控制的</strong></p><h4 id="①-continue："><a href="#①-continue：" class="headerlink" title="① continue："></a><strong>① continue：</strong></h4><p><code>continue</code> 适用于任何循环控制结构中。作用是<strong>让程序立刻跳转到下一次循环的迭代执行</strong>。</p><ul><li>在 <code>for</code> 循环中，<code>continue</code> 语句使程序立即<strong>跳转到更新语句（条件控制语句）</strong></li><li>在 <code>while</code> 或者 <code>do…while</code> 循环中，程序立即<strong>跳转到布尔表达式的条件判断语句</strong></li></ul><h4 id="②-break："><a href="#②-break：" class="headerlink" title="② break："></a><strong>② break：</strong></h4><ul><li><code>break</code> 主要用在循环语句或者 <code>switch</code> 语句中，用来<strong>跳出整个语句块</strong></li><li><code>break</code> 跳出最里层的循环，并且继续执行该循环下面的语句</li></ul><h3 id="22、循环嵌套"><a href="#22、循环嵌套" class="headerlink" title="22、循环嵌套"></a>22、循环嵌套</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 分支语句中包含分支语句称为分支嵌套</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 循环语句中包含循环语句称为循环嵌套</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23、Random"><a href="#23、Random" class="headerlink" title="23、Random"></a>23、Random</h3><p><strong>作用：</strong>用于产生一个随机数</p><p><strong>使用步骤：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// ①导包</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span>    <span class="token comment">// ②创建对象</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ③获取随机数</span><span class="token keyword">int</span> number <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据的范围：[0,10)，包括0，但不包括10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Java.util.Random()</code><strong>方法摘要</strong>：</p><ul><li><code>protected int next(int bits)</code>：生成下一个伪随机数</li><li><code>boolean nextBoolean()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的<code>boolean</code>值</li><li><code>void nextBytes(byte[] bytes)</code>：生成随机字节并将其置于用户提供的 byte 数组中</li><li><code>double nextDouble()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 <code>double</code> 值</li><li><code>float nextFloat()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布<code>float</code> 值</li><li><code>double nextGaussian()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的<code>double</code> 值，其平均值是 0.0，标准差是 1.0</li><li><code>int nextInt()</code>：返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 <code>int</code> 值</li><li><code>int nextInt(int n)</code>：返回一个伪随机数，它是取自此随机数生成器序列的、在（包括和指定值（不包括）之间均匀分布的<code>int</code> 值</li><li><code>long nextLong()</code>：返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 <code>long</code> 值</li><li><code>void setSeed(long seed)</code>：使用单个 long 种子设置此随机数生成器的种子</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之单链表篇</title>
      <link href="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/"/>
      <url>/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 代码初始结构 * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表篇"><a href="#单链表篇" class="headerlink" title="单链表篇"></a>单链表篇</h2><h3 id="1-1-合并两个有序链表（双指针技巧）"><a href="#1-1-合并两个有序链表（双指针技巧）" class="headerlink" title="1.1 合并两个有序链表（双指针技巧）"></a>1.1 合并两个有序链表（双指针技巧）</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title.jpg"></p><p><strong>代码1：</strong></p><p>思路：使用<strong>双指针技巧</strong>和<strong>虚拟头结点技巧</strong>，算法的逻辑类似于「拉拉链」，<code>l1, l2</code> 类似于拉链两侧的锯齿，指针 <code>p</code> 就好像拉链的拉索，将两个有序链表合并。 <code>dummy</code> 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 虚拟头结点</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token comment">// 双指针技巧，在此算法中双指针也可不用</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> l1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 比较 p1 和 p2 两个指针</span>        <span class="token comment">// 将值较小的的节点接到 p 指针</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>val <span class="token operator">></span> p2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// p 指针不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 很新颖的递归使用</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list1<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> list1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span>val <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">;</span>        res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>next<span class="token punctuation">,</span>list1<span class="token punctuation">.</span>val <span class="token operator">>=</span> list2<span class="token punctuation">.</span>val <span class="token operator">?</span> list1 <span class="token operator">:</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-合并k个升序链表"><a href="#1-2-合并k个升序链表" class="headerlink" title="1.2 合并k个升序链表"></a><strong>1.2 合并k个升序链表</strong></h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title2.jpg"></p><p><strong>代码1：</strong></p><p>思路：使用优先级队列（二叉堆）把链表节点放入一个最小堆，就可以每次获得 <code>k</code> 个节点中的最小节点，即用容量为K的最小堆优先队列，把链表的头结点都放进去，然后出队当前优先队列中最小的，挂上链表，然后让出队的那个节点的下一个入队，再出队当前优先队列中最小的，直到优先队列为空。<strong>算法整体的时间复杂度是 <code>O(Nlogk)</code>，其中 <code>k</code> 是链表的条数，<code>N</code> 是这些链表的节点总数</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 虚拟头结点</span>    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token comment">// 优先级队列，最小堆</span><span class="token comment">/*        // JAVA之前，使用匿名内部类。记得初始化队列长度    PriorityQueue&lt;ListNode> pq=new PriorityQueue&lt;>(lists.length,new Comparator&lt;ListNode>()&#123;        @Override        public int compare(ListNode l1,ListNode l2)&#123;        // 在添加元素的时候就进行规则排序。升序            if(l1.bal>l2.val)&#123;                return 1;            &#125;else if(l1.val==l2.val)&#123;                return 0;            &#125;else&#123;                return -1;            &#125;        &#125;    &#125;);*/</span>           <span class="token comment">// Java8后使用lambda表达式更加高效、简捷</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>        lists<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>val <span class="token operator">-</span> b<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 k 个链表的头结点加入最小堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> head <span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 进行非空判断，防止里面存在空的子数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token comment">// 插入的时候已经进行了排序,最小的元素放在最前面</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取最小节点，接到结果链表中</span>        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// p 指针不断前进</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-单链表的倒数第k个节点"><a href="#1-3-单链表的倒数第k个节点" class="headerlink" title="1.3 单链表的倒数第k个节点"></a>1.3 单链表的倒数第k个节点</h3><p>假设链表有 <code>n</code> 个节点，找单链表的第 <code>k</code> 个节点，一个 for 循环遍历就找到了；若要找倒数第 <code>k</code> 个节点，反过来就是正数第 <code>n - k</code> 个节点；一般算法只给一个 <code>ListNode</code> 头结点代表一条单链表，需要先遍历一遍链表算出 <code>n</code> 的值，然后再遍历链表计算第 <code>n - k</code> 个节点。也就是说，这个解法需要<strong>遍历两次链表</strong>才能得到出倒数第 <code>k</code> 个节点。</p><p>能不能<strong>只遍历一次链表</strong>，就算出倒数第 <code>k</code> 个节点？可以，巧妙使用双指针技巧</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 返回链表的倒数第 k 个节点</span><span class="token class-name">ListNode</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 让第一个指针 p1 先走 k 步</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// p1 和 p2 同时走 n - k 步</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// p2 现在指向第 n - k 个节点</span>    <span class="token keyword">return</span> p2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽说遍历一次链表和遍历两次链表的时间复杂度都是 <code>O(N)</code>，但上述这个算法更有技巧性。</p><p><strong>技巧的leetcode题</strong></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title3.jpg"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 虚拟头结点</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// next链接链表</span>        dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 删除倒数第 n 个，要先找倒数第 n + 1 个节点</span>        <span class="token class-name">ListNode</span> x <span class="token operator">=</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span>dummy<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删掉倒数第 n 个节点</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210115622925.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 快慢指针初始化指向 head</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 快指针走到末尾时停止</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 慢指针走一步，快指针走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 慢指针指向中点</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果链表长度为<strong>偶数</strong>，也就是说中点有两个的时候，我们这个解法返回的节点是<strong>靠后的那个节点</strong>。</p><p>另外，这段代码稍加修改就可以直接用到判断链表成环的算法题上。</p><h3 id="1-4-判断链表是否包含环"><a href="#1-4-判断链表是否包含环" class="headerlink" title="1.4 判断链表是否包含环"></a>1.4 判断链表是否包含环</h3><p>判断链表是否包含环属于经典问题了，解决方案也是<strong>用快慢指针</strong></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120318689.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 慢指针走一步，快指针走两步</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">// 快慢指针相遇，说明含有环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不包含环</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果链表中含有环，<strong>如何计算这个环的起点</strong>？</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120404094.png"></p><p><strong>思路：</strong>当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 上面的代码类似 hasCycle 函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// fast 遇到空指针说明没有环</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 重新指向头结点</span>    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 快慢指针同步前进，相交点就是环起点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>假设快慢指针相遇时，慢指针 <code>slow</code> 走了 <code>k</code> 步，那么快指针 <code>fast</code> 一定走了 <code>2k</code> 步：</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120937196.png"></p><p><code>fast</code> 一定比 <code>slow</code> 多走了 <code>k</code> 步，这多走的 <code>k</code> 步其实就是 <code>fast</code> 指针在环里转圈圈，所以 <code>k</code> 的值就是环长度的「整数倍」。</p><p>假设相遇点距环的起点的距离为 <code>m</code>，那么结合上图的 <code>slow</code> 指针，环的起点距头结点 <code>head</code> 的距离为 <code>k - m</code>，也就是说如果从 <code>head</code> 前进 <code>k - m</code> 步就能到达环起点。</p><p>巧的是，如果从相遇点继续前进 <code>k - m</code> 步，也恰好到达环起点。因为结合上图的 <code>fast</code> 指针，从相遇点开始走k步可以转回到相遇点，那走 <code>k - m</code> 步肯定就走到环起点了：</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210120957366.png"></p><p>所以，只要把快慢指针中的任一个重新指向 <code>head</code>，然后两个指针同速前进，<code>k - m</code> 步后一定会相遇，相遇之处就是环的起点。</p><h3 id="1-5-两个链表是否相交"><a href="#1-5-两个链表是否相交" class="headerlink" title="1.5 两个链表是否相交"></a>1.5 两个链表是否相交</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210121324448.png"></p><p>用两个指针 <code>p1</code> 和 <code>p2</code> 分别在两条链表上前进，并不能<strong>同时</strong>走到公共节点，也就无法得到相交节点 <code>c1</code>。</p><p>**解决这个问题的关键是，通过某些方式，让 <code>p1</code> 和 <code>p2</code> 能够同时到达相交节点 <code>c1</code>**。</p><p>可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起。</p><p>如果这样进行拼接，就可以让 <code>p1</code> 和 <code>p2</code> 同时进入公共部分，也就是同时到达相交节点 <code>c1</code></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220210121244978.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*定义两个指针, 第一轮让两个到达末尾的节点指向另一个链表的头部, 最后如果相遇则为交点(在第一轮移动中恰好抹除了长度差)，两个指针等于移动了相同的距离, 有交点就返回, 无交点就是各走了两条指针的长度*/</span><span class="token class-name">ListNode</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// p1 指向 A 链表头结点，p2 指向 B 链表头结点</span>    <span class="token class-name">ListNode</span> p1 <span class="token operator">=</span> headA<span class="token punctuation">,</span> p2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p1 <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">else</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p2 <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token keyword">else</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 空间复杂度为 O(1)，时间复杂度为 O(N)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-反转链表"><a href="#1-6-反转链表" class="headerlink" title="1.6 反转链表"></a>1.6 反转链表</h3><h4 id="①-反转整个链表"><a href="#①-反转整个链表" class="headerlink" title="① 反转整个链表"></a>① 反转整个链表</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211150152221.png"></p><p><strong>代码1：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 常规双指针</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">//用保存结果</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">//保存下个结点</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>       <span class="token comment">//头结点接p链表后续</span>            p <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token comment">//每轮将一个结点反转</span>            cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token comment">//cur指针下移</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/* 如，输入[1,2,3,4,5]第一轮while运行完：cur:2->3->4->5->nullp:1->nulltemp:2->3->4->5->null第二轮完：cur:3->4->5->nullp:2->1->null.......*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归</span><span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 链表只有一个节点的时候反转也是它自己，直接返回即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点</span>    <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让下一个节点的next指向自己</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 自己的next废弃掉</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 返回的是最深处的last，也就是原链表的最后一个节点</span>    <span class="token keyword">return</span> last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>reverse(head.next)</code>运行后</p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211151955422.png"></p><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220211151904100.png"></p><h4 id="②-反转链表的一部分"><a href="#②-反转链表的一部分" class="headerlink" title="② 反转链表的一部分"></a>② 反转链表的一部分</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/title.png"></p><p><strong>代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1-2-3-4-5，要反转2-4，就把3摘下来，插到1-2之间，此时成了1-3-2-4-5。再把4摘下来，插到1-3之间，就成了1-4-3-2-5。提前加一个头结点可以省去边界麻烦。*/</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 虚拟头结点</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 结果结点，最后输出res.next</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token comment">// 变量值，控制指针移动</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 将 pre 移动到要反转的区域右侧</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反转的最右侧结点</span>        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 要反转的点，在例子中，第一轮为3，第二轮为4</span>            <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>                        <span class="token comment">// 控制反转次数</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③K个一组反转链表"><a href="#③K个一组反转链表" class="headerlink" title="③K个一组反转链表"></a>③K个一组反转链表</h4><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221101527109.png"></p><p><strong>代码1：递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 反转区间 [a, b) 的元素，注意是左闭右开 */</span><span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>    pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> cur <span class="token operator">=</span> a<span class="token punctuation">;</span> nxt <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token comment">// while 终止的条件改一下就行了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> nxt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回反转后的头结点</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 区间 [a, b) 包含 k 个待反转元素</span>        <span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        a <span class="token operator">=</span> b <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 不足 k 个，不需要反转，base case</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反转前 k 个元素</span>        <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归反转后续链表并连接起来</span>        a<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221104930736.png"></p><p><strong>链表是一种兼具递归和迭代性质的数据结构</strong></p><p><strong>代码2：迭代</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过先计算链表长度来确定循环次数</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prev <span class="token operator">=</span> res<span class="token punctuation">,</span> curr <span class="token operator">=</span> head<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span>        res<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 获得链表长度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 重置 curr 位置</span>    curr <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 反转次数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 组内反转</span>                <span class="token comment">/*                在每个组内，把cur后面的一个数提到最前面，拿12345， k=3举例，第一组就是123，1为cur                循环中，cur指向从未变化，第一轮把1后面的2提到最前面，变成213，第二轮把1后面的3，提到头部，变成321                */</span>                nxt <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> nxt<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                nxt<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> nxt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-回文链表"><a href="#1-7-回文链表" class="headerlink" title="1.7 回文链表"></a>1.7 回文链表</h3><p><img src="/2022/02/09/leetcode-shua-ti-zhi-dan-lian-biao-pian/image-20220221112847861.png"></p><p><strong>代码1：使用反转技巧</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 快慢指针技巧找中点</span>        <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// fast指针没有指向null，说明链表长度为奇数，slow还要再前进一步</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 反转后比较回文串</span>        <span class="token class-name">ListNode</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> right <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*算法总体的时间复杂度 O(N)，空间复杂度 O(1)，但破坏了原有的链表结构*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 合并代码</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 快慢指针找中点</span>        <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">,</span> pre<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 反转</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>            slow <span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// 比较</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">!=</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2：用栈</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 利用栈先进后出的特性，将链表数据放入栈中，然后链表数据顺序拿出与栈顶元素比较*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> rear <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> que <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rear<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>            rear <span class="token operator">=</span> rear<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rear <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token punctuation">.</span>val <span class="token operator">!=</span> que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            rear <span class="token operator">=</span> rear<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题之框架思维</title>
      <link href="/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/"/>
      <url>/2022/02/09/leetcode-shua-ti-zhi-kuang-jia-si-wei/</url>
      
        <content type="html"><![CDATA[<h3 id="所谓框架思维"><a href="#所谓框架思维" class="headerlink" title="所谓框架思维"></a>所谓框架思维</h3><h4 id="一、存储方式"><a href="#一、存储方式" class="headerlink" title="一、存储方式"></a>一、存储方式</h4><p>数据结构的存储方式只有两种：<strong>数组（顺序存储）</strong>、<strong>链表（链式存储）</strong></p><p>散列表、栈、队列、堆、树、图等等各种数据结构都属于「上层建筑」，而数组和链表才是「结构基础」。这些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作。</p><ol><li><p><strong>「队列」</strong>、<strong>「栈」</strong>这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题；用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。</p></li><li><p><strong>「图」</strong>的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。</p></li><li><p><strong>「散列表」</strong>就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。</p></li><li><p><strong>「树」</strong>，用数组实现就是<strong>「堆」</strong>，因为「堆」是一个完全二叉树，用数组存储不需要节点指针，操作也比较简单；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种链表「树」结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。</p></li><li><p><strong>二者的优缺点如下</strong>：</p><p><strong>数组</strong>由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。</p><p><strong>链表</strong>因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以<strong>不能随机访问</strong>；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。</p></li></ol><h4 id="二、数据结构的基本操作"><a href="#二、数据结构的基本操作" class="headerlink" title="二、数据结构的基本操作"></a>二、数据结构的基本操作</h4><p>数据结构种类很多，但其基本操作无非就是遍历+访问，也就是：<strong>增删查改</strong></p><p>形式分两种：<strong>线性和非线性</strong></p><p><strong>线性就是 for/while 迭代为代表，非线性就是递归为代表。</strong></p><p><strong>数据遍历框架，典型的线性迭代结构</strong>：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void traverse(int[] arr)&#123;for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;&#x2F;&#x2F;迭代访问arr[i]&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>链表遍历框架，兼具迭代和递归结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的单链表节点 *&#x2F;class ListNode &#123;    int val;    ListNode next;&#125;void traverse(ListNode head) &#123;    for (ListNode p &#x3D; head; p !&#x3D; null; p &#x3D; p.next) &#123;        &#x2F;&#x2F; 迭代访问 p.val    &#125;&#125;void traverse(ListNode head) &#123;    &#x2F;&#x2F; 递归访问 head.val    traverse(head.next);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树遍历框架，典型的非线性递归遍历结构：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的二叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode left, right;&#125;void traverse(TreeNode root) &#123;    &#x2F;&#x2F; 前序遍历代码位置    traverse(root.left);    &#x2F;&#x2F; 中序遍历代码位置    traverse(root.right);    &#x2F;&#x2F; 后序遍历代码位置&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二叉树框架可以扩展为 N 叉树的遍历框架：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* 基本的 N 叉树节点 *&#x2F;class TreeNode &#123;    int val;    TreeNode[] children;&#125;void traverse(TreeNode root) &#123;    for (TreeNode child : root.children)        traverse(child);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>N</code>叉树的遍历又可以扩展为图的遍历，因为图就是好几 <code>N</code> 叉棵树的结合体。但图是可能出现环的，用个布尔数组 <code>visited</code> 做标记来解决。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>学会利用框架思维，<strong>涉及到递归问题，学着使用树的遍历框架</strong>，若二叉树框架不行，扩展到N叉树遍历框架，将思路转化为代码，这是个任重道远的问题，<strong>但只要有心，谁都可以学好。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2022/02/07/hexo-da-jian-bo-ke/"/>
      <url>/2022/02/07/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="1-1-下载并安装node-js"><a href="#1-1-下载并安装node-js" class="headerlink" title="1.1 下载并安装node.js"></a>1.1 下载并安装node.js</h4><ul><li>官网下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装后验证：node -v</li></ul><h4 id="1-2-下载并安装git"><a href="#1-2-下载并安装git" class="headerlink" title="1.2 下载并安装git"></a>1.2 下载并安装git</h4><ul><li>官网下载:  <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装后验证：git -v</li></ul><h4 id="1-3-命令行安装cnpm"><a href="#1-3-命令行安装cnpm" class="headerlink" title="1.3  命令行安装cnpm"></a>1.3  命令行安装cnpm</h4><ul><li>命令：<code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code></li><li>安装后验证：cnpm -v</li></ul><h4 id="1-4-命令行安装hexo"><a href="#1-4-命令行安装hexo" class="headerlink" title="1.4 命令行安装hexo"></a>1.4 命令行安装hexo</h4><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证：hexo  -v</li></ul><h3 id="二、配置github"><a href="#二、配置github" class="headerlink" title="二、配置github"></a>二、配置github</h3><p><strong>创建仓库：</strong></p><ul><li>新建一个名为你的用户名.github.io的仓库</li><li>比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了。每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><strong>注意：</strong></p><ul><li>注册的邮箱一定要验证，否则不会成功</li><li>仓库名字必须是：username.github.io，其中username是你的用户名</li></ul><h3 id="三、配置SSH免密登录"><a href="#三、配置SSH免密登录" class="headerlink" title="三、配置SSH免密登录"></a>三、配置SSH免密登录</h3><p>提交代码需要拥有github权限才可以，但是直接使用用户名和密码不安全，所以使用ssh key来解决本地和服务器的连接问题。</p><p><strong>操作步骤：</strong></p><ol><li><p>首先打开电脑文件夹，找到C:\Users\用户名\.ssh文件夹并删除</p></li><li><p>在C:\Users\用户名文件夹下右键打开Git Bash Here输入命令：</p><p>ssh-keygen -t rsa -C github邮件地址  </p><p>生成.ssh秘钥，输入后连敲三次回车</p></li><li><p>生成了一个新的 C:\Users\用户名\.ssh文件夹，打开这个文件夹，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容</p></li><li><p>打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title随便填，保存即可</p></li><li><p>检测是否设置成功：</p><p>输入命令：  <code>$ ssh -T git@github.com</code>        # 注意邮箱地址不用改</p><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi xxxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>看到这个信息说明SSH已配置成功！</p></li><li><p>此时还需要配置：</p><p>$ git config –global user.name “git用户名”             // 你的github用户名，非昵称</p><p>$ git config –global user.email  “<a href="mailto:&#x78;&#120;&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x78;&#120;&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>“      // 填写你的github注册邮箱</p></li></ol><h3 id="四、使用hexo搭建博客"><a href="#四、使用hexo搭建博客" class="headerlink" title="四、使用hexo搭建博客"></a>四、使用hexo搭建博客</h3><h4 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h4><ol><li><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），由于这个文件夹将来就作为存放代码的地方，所以最好不要随便放</p></li><li><p>在该文件夹下右键打开 Git Bash Here，输入hexo init 初始化</p><p>注意：</p><p>​    这里可能会出现Failed to install dependencies的问题，运行 npm install就行；最终会有一行INFO Start blogging with Hexo！如果有那就运行完成</p></li><li><p>执行以下命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g   <span class="token comment">#生成</span>$ hexo s   <span class="token comment">#启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>hexo s 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>  即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见</p><p>解决端口冲突问题请参考这篇文章<a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">https://www.runoob.com/w3cnote/windows-finds-port-usage.html</a></p><p>到这里就完成了hexo的本地部分，后面进行部署到github上</p></li></ol><h4 id="4-2-将博客部署到github"><a href="#4-2-将博客部署到github" class="headerlink" title="4.2 将博客部署到github"></a>4.2 将博客部署到github</h4><ol><li><p>在上述文件目录下安装 hexo-deployer-git 插件</p><ul><li>安装命令： npm install hexo-deployer-git –save</li><li>必须安装，否则执行hexo d 的话会报错误</li></ul></li><li><p>编辑文件目录下的_config.yml 文件, 在文件末尾添加如下内容：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:chenkey837/chenkey837.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其中 repo 中的内容即为 github 个人主页链接地址</p></li><li><p>在文件目录下，输入命令：hexo d 将本地 blog 推送到 github仓库, 前面若<strong>没有进行SSH免密操作</strong>，这里则需要输入 username &amp; pwd</p></li></ol><p>至此博客的初始化基本完成，后续进行主题更换，现域名为<a href="http://chenkey837.github.io/">http://chenkey837.github.io/</a></p><h3 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h3><h4 id="5-1-寻找主题"><a href="#5-1-寻找主题" class="headerlink" title="5.1 寻找主题"></a>5.1 寻找主题</h4><ul><li><p>hexo官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>可在里面下载主题，点击主题名即可跳转到github上，也可以直接在github上搜索主题</p></li><li><p>寻找完后，本博客使用github上一个大佬的主题blinkfox/hexo-theme-matery</p></li><li><p>链接：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p></li></ul><h4 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a>5.2 下载主题</h4><ol><li><p>Git Bash Here中先cd到hexo目录下</p></li><li><p>再输入命令 $ git clone 主题http链接  themes/主题名称，这里若http链接clone失败，按照前文操作下来可以用SSH链接clone，链接为<a href="">git@github.com:blinkfox/hexo-theme-matery.git</a></p><p>注意：theme 文件夹下存放的就是博客的主题，主题是否下载成功可到该目录下查看</p></li></ol><h4 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a>5.3 使用主题</h4><ul><li>打开hexo目录下的_config.yml文件，在里面找到theme: landscape改为theme: blinkfox  （blinkfox为要使用的主题名）,然后重新执行hexo g来重新生成</li><li>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再执行hexo g 和 hexo s 重新生成和发布</li><li>之后hexo d推送到github仓库</li><li>再次在浏览器中输入对应域名, 即可发现主题已更换，若主题仍无更换，则将将根_config.yml文件中的 branch: master改为main</li><li>音乐id：7264784219</li></ul><h4 id="5-4-修改主题内容"><a href="#5-4-修改主题内容" class="headerlink" title="5.4 修改主题内容"></a>5.4 修改主题内容</h4><p>使用的是blinkfox主题，后期相关修改参考大佬发的主题文档</p><p>文档链接：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><ul><li>注意：一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的</li><li>大致在下图的文件夹里面修改文件，记得修改后的文件需要关闭后，再在hexo根目录右键打开Git Bash Here，输入两个命令：hexo g 重新生成，hexo s 开启本地预览服务,等修改的符合要求了，再输入 hexo d  推送到github仓库即可</li><li>这样就可以输入网址查看更改后的内容了</li></ul><p>文档上没有提及的修改：</p><ul><li>返回按钮样式修改：在主题下面的 blinkfox\layout_partial 文件夹中的 back-top.esj 文件中修改</li></ul><p><strong>特别注意：</strong></p><ul><li>修改生成的默认页面信息，要到主题下面的_config.yml文件里面去改，而不是根目录下的_config.yml文件</li></ul><h3 id="六、写博客"><a href="#六、写博客" class="headerlink" title="六、写博客"></a>六、写博客</h3><h4 id="6-1-写博客的步骤"><a href="#6-1-写博客的步骤" class="headerlink" title="6.1 写博客的步骤"></a>6.1 写博客的步骤</h4><ol><li><p>创建.md文件，定位到我们的hexo根目录，Git Bash Here 中执行命令：</p><p>  <code>hexo new &#39;my-first-blog&#39;</code>  </p></li><li><p>编写并保存,用typora打开这个文件就可以开始写博客了，写完后Ctrl+S 保存关闭即可</p></li><li><p>清理然后再生成一下，生成后推送到远程仓库即可，hexo根目录下右键Git Bash Here 中依次输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong><code>hexo new page &#39;postName&#39;</code>命令和<code>hexo new &#39;postName&#39;</code>的区别？</p><ul><li>hexo new page ‘My-second-blog’最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。</li></ul></li></ol><h4 id="6-2-博客插入图片（使用Typora）"><a href="#6-2-博客插入图片（使用Typora）" class="headerlink" title="6.2 博客插入图片（使用Typora）"></a>6.2 博客插入图片（使用Typora）</h4><p>在md文件中插入图片的语法为<code>![]()</code>。</p><p>其中<strong>方括号</strong>是图片描述，<strong>圆括号</strong>是图片路径。</p><p>一般来说有三种图片路径，分别是<strong>相对路径，绝对路径和网络路径</strong>。</p><p><strong>完美步骤：</strong></p><ol><li><p>安装插件，在hexo根目录打开Git Bash，执行</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改配置_config.yml如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span>marked: prependRoot: <span class="token boolean">true</span> postAsset: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>文件-&gt;偏好设置</code>或者直接<code>&lt;C-,&gt;</code>进入设置，设置如下</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/image-20220208205937399.png"></p><p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。</p></li><li><p>当插入完所有的图片后，我们还需要删除每个图片路径中的<code>文件名/</code>。在Typora编辑器中，使用<code>&lt;C-f&gt;</code>快捷键，将所有的<code>文章名/</code>替换为空即可删除。</p><p><img src="/2022/02/07/hexo-da-jian-bo-ke/9d8985d94df7b36bfc94c9ce200261f9.png"> </p></li><li><p>最后再将博客上传，图片就会随着文章一起打包。在网页中就可以看到正常显示的图片</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/29/hello-world/"/>
      <url>/2022/01/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
